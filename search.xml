<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[IAR开发STM32堆栈设置]]></title>
      <url>https://blog.cyang.tech/2018/10/25/IAR%E5%BC%80%E5%8F%91STM32%E5%A0%86%E6%A0%88%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>关于堆栈的定义在此就不赘述，详细内容可以看<a href="https://blog.csdn.net/u011303443/article/details/78989683" target="_blank" rel="external">这篇博客</a>。<br>堆栈溢出会导致野指针，返回地址错误等问题，通常程序已经无法正常运行，进入 HardFault 异常中断。为了避免这种情况，一般会分配较大的空间用做栈，可是如果仅仅为了安全就分配大空间的栈势必导致内存浪费。本文介绍两种获取栈最大消耗的方法，以方便合理设置栈的大小。</p>
<a id="more"></a>
<h1 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h1><h2 id="1、方法一"><a href="#1、方法一" class="headerlink" title="1、方法一"></a>1、方法一</h2><p>栈指针 SP 指向的位置可以反应出当前栈的消耗量。在 STM32 中，栈是向下生长的，如果我们定期的获取栈指针 SP 的值，比较后得到一个最小值，就代表了栈的最大消耗量。而如何才能定期去获取栈指针 SP 的值呢？可以使用定时器产生一个周期性的中断，在中段函数中获取栈指针 SP 的值。最简单的方法就是在系统滴答定时器（SysTick）的中断函数中调用栈分析函数。具体可以参看如下的函数。在程序运行结束后，再去获取最大栈消耗量。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> uint32_t max_stack_usage <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">stack_parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>a <span class="token operator">&lt;</span> max_stack_usage<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        max_stack_usage <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

uint32_t <span class="token function">get_max_stack_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> max_stack_usage<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于这个函数是周期执行的，必然对程序的运行性能产生影响，不过这只是为了分析，最终是要移除的。另外由于是周期执行，所以可能会错过一些周期性的压栈，以至于获取的数值并不是最大值。不过，这种方法还是有它的参考意义的。</p>
<h2 id="2、方法二"><a href="#2、方法二" class="headerlink" title="2、方法二"></a>2、方法二</h2><p>在 IAR 中，可以开启栈使用分析(IAR Embedded Workbench Stack Usage Analysis)，让 IDE 在编译链接阶段就推算出这个程序的栈最大使用量。不过这种方法无法分析使用函数指针的方式调用的函数，也不能确定递归函数的嵌套次数，因此这两种情况下需要使用配置文件来指出这种调用的压栈空间，比较麻烦，具体可看<a href="https://www.iar.com/support/resources/articles/detecting-and-avoiding-stack-overflow-in-embedded-systems/" target="_blank" rel="external">官方手册</a>。不过函数指针和递归函数毕竟是少数情况，大多数的函数都是显示调用的。因此 IDE 会分析出一条最长的调用路径，从而分析出最大的栈使用量。步骤如下：</p>
<blockquote>
<p>1、开启 options &gt; linker &gt;Advanced &gt; Enable stack usage analysis<br>2、编译后查看 map 文件中的 STACK USAGE 部分</p>
</blockquote>
<p>内容类似于：</p>
<pre><code>*******************************************************************************
*** STACK USAGE
***

  Call Graph Root Category  Max Use  Total Use
  ------------------------  -------  ---------
  Program entry              8 600      8 600
  Uncalled function            256      1 332
</code></pre><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p> 栈空间用来存放局部变量，部分函数参数，返回地址，以及保存函数调用时主调函数的寄存器内容等。为了减少栈的分配，一定要注意不要在函数中放置很大的局部数组。上文所需的 8600 字节的栈空间，就是因为程序中有一个函数中分配了一个 8192 字节的数组，如下。</p>
<pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">int</span> <span class="token function">decode_subframe_lpc</span><span class="token punctuation">(</span>FLACContext <span class="token operator">*</span>s<span class="token punctuation">,</span> int32_t<span class="token operator">*</span> decoded<span class="token punctuation">,</span> <span class="token keyword">int</span> pred_order<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    int64_t wsum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> coeff_prec<span class="token punctuation">,</span> qlevel<span class="token punctuation">;</span>
    <span class="token keyword">int</span> coeffs<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//8k, use heap to save stack</span>
    int32_t<span class="token operator">*</span> output<span class="token punctuation">;</span>
    int32_t<span class="token operator">*</span> reader<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> pcoeffs<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用两种方式来修改。其一，将 coeffs 这个数据变成 static 局部静态变量，这样做可以将这个变量从栈中移到 .bss 区域中，不过这种方式并不灵活，相当于 8192 B 的空间被占用，而其他函数无法使用。所以本质上和放在栈空间中区别不大。其二是通过 malloc 的方式灵活申请和释放内存，当不在需要这部分空间时，可以将其释放。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汇编文件从 Keil 移植到 IAR]]></title>
      <url>https://blog.cyang.tech/2018/10/19/%E6%B1%87%E7%BC%96%E6%96%87%E4%BB%B6%E4%BB%8E%20keil%20%E7%A7%BB%E6%A4%8D%E5%88%B0%20IAR/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>汇编文件移植性比较差，不同的内核架构支持的指令集都不一样，就算是相同的内核，在不同的 IDE 下的写法也有可能不一样。同样的文件在 KEIL 下可以正常运行，在 IAR 下就无法编译通过，这就是因为 KEIL 和 IAR 对汇编文件的写法要求是不一样的。KEIL 以及 ADS 下的一些伪指令和写法，在 IAR 下是不支持或者不一样的。具体可以参考 <a href="http://ftp.iar.se/WWWfiles/arm/webic/doc/EWARM_ADSMigrationGuide.ENU.pdf" target="_blank" rel="external">《EWARM_ADSMigrationGuide.ENU.pdf》</a>，下文只是我自己在移植过程中的一些修改记录。</p>
<a id="more"></a>
<h1 id="二、修改方法"><a href="#二、修改方法" class="headerlink" title="二、修改方法"></a>二、修改方法</h1><ul>
<li><p>1、修改段和区域的写法</p>
<p>系统段和区域在 ADS 下定义为 AREA，在 IAR 下定义为 RSEG，因此需要做如下更改。</p>
<blockquote>
<p>keil 下的写法</p>
<pre class="line-numbers language-asm"><code class="language-asm">AREA |.text|, CODE, READONLY, ALIGN=2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>IAR 下的写法</p>
<pre class="line-numbers language-asm"><code class="language-asm">RSEG CODE:CODE:NOROOT(2)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
</li>
<li><p>2、修改 RN 伪指令</p>
<p>在 ADS 中，可以使用语句 <code>name RN Rn</code> 来给 寄存器 Rn 重命名为 name，在 IAR 下不支持这种写法，因此需要将汇编文件中所有用到的 name 替换回 Rn。类似下面的修改：</p>
<blockquote>
<p>keil 下的写法</p>
</blockquote>
<pre class="line-numbers language-asm"><code class="language-asm">PCM RN r0  ;rename

ldr PCM, [sp, #4] ; load pcm pointer
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>IAR 下的写法</p>
<pre class="line-numbers language-asm"><code class="language-asm">ldr r0, [sp, #4] ; load pcm pointer
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
</li>
<li><p>3、修改宏的写法</p>
<p>ADS 下的宏结束标志和 IAR 下是不同的，另外写法也不一样。具体如下：</p>
<blockquote>
<p>keil 下的写法<br>```asm<br>MACRO</p>
<pre><code>MC0S $x
</code></pre><p>ldr r12, [r2], #4<br>ldr r14, [r2], #4<br>ldr r0, [r1, #(4<em>($x))]<br>ldr r3, [r1, #(4</em>(23 - $x))]</p>
</blockquote>
<p>…</p>
<p>MEND ; MCOS</p>
<pre><code>
&gt; IAR 下的写法
```asm
MC0S MACRO x

    ldr r12, [r2], #4
    ldr r14, [r2], #4
    ldr r0, [r1, #(4*(x))]
    ldr r3, [r1, #(4*(23 - x))]

...

    ENDM ; MCOS
</code></pre></li>
<li><p>4、删除 PROC、ENP、GBLA 等伪指令。这些指令在 IAR 下不支持，编译无法通过。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ide 与 Leetcode 运行结果不一样]]></title>
      <url>https://blog.cyang.tech/2018/09/16/ide%20%E4%B8%8E%20leetcode%20%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E6%A0%B7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在做 leetcode 的<a href="https://leetcode.com/problems/3sum/description/" target="_blank" rel="external">第 15 题</a>， <code>3Sum</code> 时发现，同样的代码在本地运行的结果是正确的，而在 leetcode 的服务器上结果却是错误的。而且检查了程序中，也并没有使用全局或者静态变量。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/leetcode/diff.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>通过打印，仔细对比两种环境下的输出发现，原来是代码有一条语句指针指向了数组外边的第一个地址。语句的内容是比较当前地址的值是否和后一个地址的值相同， 由于后一个地址实际上已经发生了溢出，在当前地址为数组最后一个元素时，下一个地址就在数组外边了，这个地址的值是不确定的。在本地调试时，由于两个地址的值不同，所以程序结果正确，而在 leetcode 服务器上运行时，这两个值相同，因此程序最终的结果就错误了。</p>
<a id="more"></a>
<p><img src="http://p7tst3obo.bkt.clouddn.com/leetcode/debug.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>下面是完整代码，出错的代码在第 62 行。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*
* @Author: cyang
* @Date:   2018-08-06 16:26:59
* @Last Modified by:   cyang
* @Last Modified time: 2018-09-15 14:55:12
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>return_array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize <span class="token operator">*</span> <span class="token punctuation">(</span>numsSize<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rerurn_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token number">-2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=======================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        start <span class="token operator">=</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        end <span class="token operator">=</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>numsSize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token operator">*</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> <span class="token operator">*</span>start <span class="token operator">+</span> <span class="token operator">*</span>end <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// printf("%d %d %d %d \n", i, nums[i], *start, *end);</span>
                return_array<span class="token punctuation">[</span>rerurn_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                return_array<span class="token punctuation">[</span>rerurn_size<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                return_array<span class="token punctuation">[</span>rerurn_size<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>start<span class="token punctuation">;</span>
                return_array<span class="token punctuation">[</span>rerurn_size<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>

                rerurn_size<span class="token operator">++</span><span class="token punctuation">;</span>

                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    start<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token macro property">#<span class="token directive keyword">if</span> 1 </span><span class="token comment" spellcheck="true">//ringht</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>end <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>end <span class="token operator">!=</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>numsSize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">//wrong</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>end <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token macro property">#<span class="token directive keyword">endif</span></span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    end<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                start<span class="token operator">++</span><span class="token punctuation">;</span>
                end<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                start<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// > 0</span>
            <span class="token punctuation">{</span>
                end<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p, %p\n"</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span>returnSize <span class="token operator">=</span> rerurn_size<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"rerurn_size = %d\n"</span><span class="token punctuation">,</span> rerurn_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> return_array<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// int nums[] = {-1, 0, 1, 2, -1, -4};</span>
    <span class="token comment" spellcheck="true">// int nums[] = {0, 0, 0, 0};</span>
    <span class="token comment" spellcheck="true">// int nums[] = {1, -1, -1, 0};</span>
    <span class="token comment" spellcheck="true">// int nums[] = {-2, 0, 0, 2, 2};</span>
    <span class="token comment" spellcheck="true">// int nums[] = {-2, 0, 1, 1, 2};</span>
    <span class="token comment" spellcheck="true">// int nums[] = {1, -4, -4, 2, 0, 0, -2, 3, 3, -3, -4};</span>

    <span class="token keyword">int</span> numsSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>return_array <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    return_array <span class="token operator">=</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>return_array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> returnSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> return_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> returnSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>return_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// system("pause");</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[J-Link V9 修复记录]]></title>
      <url>https://blog.cyang.tech/2018/09/13/j-link%20v9%20%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="j-link-v9"><a href="#j-link-v9" class="headerlink" title="j-link v9"></a>j-link v9</h1><p>主控: stm32f205RC</p>
<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ul>
<li>1、给 M0 下载固件的过程中经常出错，提示找不到M0。需要反复尝试很多次才可以下载。</li>
<li>2、在一次正常的拔线断电后，再也无法识别，灯也不亮了。</li>
</ul>
<a id="more"></a>
<h1 id="修复方法一"><a href="#修复方法一" class="headerlink" title="修复方法一"></a>修复方法一</h1><ul>
<li>1、准备另一个可以使用的 j-link。这里使用的就是这种只有四根线，只支持 SWD 的 j-link OB。</li>
<li>2、拆开坏了的 j-link v9， 可以看到 PCB 上留有四个圆孔，分别是 VCC，GND， SCK，SWD。具体的位置要看对应的原理图，因为有很多不同的 j-link 。</li>
<li><p>3、使用 SWD 的方式连接好的 j-link 和 坏的 j-link 。<br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/pic.jpg?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、打开 j-flash， 新建项目，配置芯片为 STM32F205RC，使用 SWD 接口，点击连接。如果无法连接，可能是上一部四条线没有接对，可更改后在尝试。也不可以不用新建项目，直接用 j-flash 打开 <code>restore.jflash</code>。<br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/new.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/choose.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>5、点击 file, 选择 open data file，打开恢复固件 <code>JLinkAll.hex</code>。</p>
</li>
<li><p>6、下载固件，完成修复。<br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/program.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/succ.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/end.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>7、完成之后，j-link v9 就修复了，可正常使用了。<br><img src="http://p7tst3obo.bkt.clouddn.com/j-link/download.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="修复方法二"><a href="#修复方法二" class="headerlink" title="修复方法二"></a>修复方法二</h1><ul>
<li>1、前面连接的方法和方法一相同，区别在于下载的东西不同。方法一中下载的固件是完整的，版本比较旧，大概是14年的版本，但是也可以用。</li>
<li>2、也可以只烧写一个 bootloader 到掉固件的j-link， 烧写方法如上，也是需要一个好的 j-link， 使用 SWD 接口和坏的 j-link 相连， 使用 j-flash 下载。bootloader 文件见末尾方法二附件。</li>
<li>3、下载完成后，将旧的 j-link 和电脑连接，打开 j-link commeder 这个软件。会提示固件需要更新，之后就会自动下载并更新固件。</li>
<li>4、之后可以看到 j-link 的 SN 为 -1，表示还未配置 SN，可使用如下命令配置。同时可添加一些特性，代码如下。<br>```<br>在JLINK的command下依次运行如下命令  </li>
</ul>
<p>Exec SetSN=XXXXXXXX      ;添加SN<br>Exec AddFeature GDB      ;添加GDB<br>Exec AddFeature RDI      ;添加RDI<br>Exec AddFeature FlashBP  ;添加FlashBP<br>Exec AddFeature FlashDL  ;添加FlashDL<br>Exec AddFeature JFlash   ;添加JFlash<br>Exec AddFeature RDDI     ;添加RDDI<br>```</p>
<p><a href="https://download.csdn.net/download/u011303443/10664113" target="_blank" rel="external">方法一附件下载</a><br><a href="https://download.csdn.net/download/u011303443/10666798" target="_blank" rel="external">方法二附件下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MPEG 简述]]></title>
      <url>https://blog.cyang.tech/2018/08/12/MPEG%20%E7%AE%80%E8%BF%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="MPEG-AUDIO-简介"><a href="#MPEG-AUDIO-简介" class="headerlink" title="MPEG AUDIO 简介"></a>MPEG AUDIO 简介</h1><p>MP3 是 MPEG Layer3 音频压缩技术的简写，这种技术可在音质极少损伤的情况下获取更好的压缩性能。MP3文件可以被压缩成不同的速率，文件压缩的越小，音质损伤越大。标准的压缩比例为10：1，一段3分钟的音频数据压缩后只需4MB大小。<br><a id="more"></a></p>
<p>MPEG 音频压缩算法由联合图像专家组开发，作为高质量数字音频数据压缩的国际标准。MPEG-1 音频压缩算法基于两种机理来减少音频信号码率额，一是利用统计相关性，去除音频信号的冗余，二是利用人耳的心理声学现象如频率掩蔽和时间掩蔽等，去除听觉冗余。分为三个层次，分别是 layer1,layer2,layer3，每个层次针对不同的应用，但是三个层次的基本模型是相同的，每个后继的层都有更高的压缩比，但是需要更加复杂的编解码器。</p>
<p>更新的版本是 MPEG-2，这个版本扩展了MPEG-1的采样率标准，在 MPEG-1 的 32kHz,44.1kHz, 48kHz 的基础上，支持16kHz,22.05kHz,24kHz 采样率。并且MPEG-2还支持多通道。</p>
<p>有一个非官方的标准MPEG-2.5，支持更低的采样率，支持8KHz，11.025kHz 和 12KHz。</p>
<h1 id="MP3-bitstream-概述"><a href="#MP3-bitstream-概述" class="headerlink" title="MP3 bitstream 概述"></a>MP3 bitstream 概述</h1><p>广泛使用的MP3指的是不论MPEG哪个版本的layer3的编码，然而，有时候MP3也泛指了所有的MPEG算法。<br>MPP3 的音频流具有固定可选的码率。根据不同的采样率和 layer 可选的 bitrate 不同，具体见下表。也允许对流中不同的部分使用不同的码率，称为“VBR”。<br><img src="http://p7tst3obo.bkt.clouddn.com/MPEG/bitrate.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>MP3编码压缩后的数据是由一系列固定大小的块组成的，这些块叫做帧。每一帧具有多少的PCM采样数据是固定的，见下表。解码时必须从帧头开始解，但可以只解一部分，可解的最小单元数见下表。<br><img src="http://p7tst3obo.bkt.clouddn.com/MPEG/sample.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>帧的格式见下图，帧头是32位的数据，用于同步一些基本的信息。例如采样率，通道数，比特率之类。16位的CRC校验值是可选的。注意，CRC校验的并不是整个帧的数据，仅仅是帧头数据的后16位和辅助信息的校验。<br><img src="http://p7tst3obo.bkt.clouddn.com/MPEG/frame.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>MPEG的音频文件没有主要的文件头。一个MPEG文件是由一系列的标准帧组成的。帧与帧之间不能有任何的垃圾数据。帧的大小可从帧头信息中获得，因此如果知道前一帧头位置可以很容易得到下一帧的帧头位置。为了支持更多的自定义格式，解码器必须连续读取几个帧头，以便计算出该音频一帧的长度。在使用自定义模式时，不可使用VBR模式，且不可以和固定大小的帧混合。</p>
<p>在Layer1和Layer2中，帧是相对独立的。每一帧都包含了足够解码使用的信息，所以解码器只要在数据流中正确解出一个帧头后就可以完成工作。但是在Layer3中，帧不总是独立的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前导零计数]]></title>
      <url>https://blog.cyang.tech/2018/08/02/%E5%89%8D%E5%AF%BC%E9%9B%B6%E8%AE%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="前导零计数"><a href="#前导零计数" class="headerlink" title="前导零计数"></a>前导零计数</h1><p>计算一个 32位 数头部 0 的个数。例如 1 前面有 31 个0， 0 则前面有 32 个0。</p>
<a id="more"></a>
<h2 id="C-语言实现"><a href="#C-语言实现" class="headerlink" title="C 语言实现"></a>C 语言实现</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cntLeadingZeros</span><span class="token punctuation">(</span>uint32_t i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uint32_t temp <span class="token operator">=</span> <span class="token operator">~</span>i<span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        ret<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="硬件指令"><a href="#硬件指令" class="headerlink" title="硬件指令"></a>硬件指令</h2><p>在 ARM 和 Xtensa 架构的硬件中，具有单独的指令可以完成前导0计算。<br>在 ARM 下是 <code>clz</code> 指令； 在 Xtensa 下是 <code>NSAU</code> 指令，用法一样。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/clz/arm.jpg?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="ARM"><br><img src="http://p7tst3obo.bkt.clouddn.com/clz/xtensa.jpg?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="xtensa"></p>
<h3 id="内嵌汇编实现"><a href="#内嵌汇编实现" class="headerlink" title="内嵌汇编实现"></a>内嵌汇编实现</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cntLeadingZeros</span><span class="token punctuation">(</span>uint32_t i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">__asm</span><span class="token punctuation">(</span><span class="token string">"clz %0, %1 "</span><span class="token punctuation">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//arm</span>
    <span class="token function">__asm</span><span class="token punctuation">(</span><span class="token string">"nsau %0, %1 "</span><span class="token punctuation">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//xtensa</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://leetcode.com/problems/number-complement/description/" target="_blank" rel="external">leetcode 题目 476</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fread 返回 0]]></title>
      <url>https://blog.cyang.tech/2018/07/25/fread%20%E8%BF%94%E5%9B%9E%200/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>fread 函数一直返回 0，检查过读取的数量不会超过文件大小，错误发生在打开文件时错误。</p>
<p>错误代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c">FILE <span class="token operator">*</span>in_file<span class="token punctuation">,</span> <span class="token operator">*</span>out_file<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">open_files</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_file_name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>out_file_name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> in_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>in_file_name<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> out_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>out_file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<p>正确应该是：</p>
<pre class="line-numbers language-c"><code class="language-c">FILE <span class="token operator">*</span>in_file<span class="token punctuation">,</span> <span class="token operator">*</span>out_file<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">open_files</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_file_name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>out_file_name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>in_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>in_file_name<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>out_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>out_file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>错误的原因在于没有使用括号，而比较运算符 == 的优先级比赋值运算符 = 要高。因此，错误的程序执行结果为，函数正常打开了文件，返回的文件指针与 NULL 相比为0，赋值给了 in_file, if 不会执行，因此误以为 in_file 是文件指针，实际上为0，所以无法读出数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一款游戏--《程序员升职记》]]></title>
      <url>https://blog.cyang.tech/2018/07/21/%E8%AE%B0%E4%B8%80%E6%AC%BE%E6%B8%B8%E6%88%8F--%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8D%87%E8%81%8C%E8%AE%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/hrm/main.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="main"></p>
<p>最近在玩一款编程类的游戏，叫做《程序员升职记》，steam 平台只需￥36。通过组合几条非常基本的指令，例如加减、自加、自减、比较、跳转，实现一些小功能，例如简单的数值绝对值输出、两数乘法、阶乘运算、反转字符串等。游戏的本质是一款支持 11 条指令，最多支持 24 字节内存的 8 位 cpu 的运行。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/hrm/level.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="level"></p>
<p>这款游戏前面的一些关卡主要在引导和介绍游戏，同时不断给出新的指令，开始只有简单的几条指令，后面会加入对内存的使用，间接寻址的使用，因此可以实现指针的操作。每一关都会给出随机的输入，经过你编写的程序后，算出符合要求的输出。编写程序的过程可以通过单步运行来调试，所以可以很快知道程序在哪里出错，并修改。</p>
<a id="more"></a>
<p><img src="http://p7tst3obo.bkt.clouddn.com/hrm/asm.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="asm"></p>
<p>这款游戏可以很好地帮助你理解 CPU 的运行原理，编写的程序其实就是汇编程序，每一条指令都可以对应到一条汇编指令。通过复制指令到记事本也可以看出。关卡的输入每一次都是随机出现的，这就要求程序要在任何合理的输入下都可以正确运行，而不是当前给定的输入。这款游戏又不像我之前玩过的另一款手机上的编程类游戏–light robot。这款游戏在指令的条数上没有任何限制，也就是说你可以使用不限数量的指令来实现你的程序，但另一方面游戏非常鼓励你找到一种最优解，使得指令条数和运算次数都尽可能的少，这意味着程序所需的代码空间很少，同时运算速度又最快。所以你可以先按照你对这个题目的解题思路来实现这个程序，等程序完美运行没有出错后，再来考虑怎么优化程序。light robot 是一款通过组合指令来实现不同的点灯效果的游戏，但是这个游戏是限制指令数量的，因此你不能先实现再进行优化，你必须一来就找到最优解，这让我在后面的关卡无法继续。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/hrm/light-robot.jpg?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="light robot"></p>
<p>这款游戏还有一个特点就是支持单步调试，通过单步运行，可以很快看出运行出错的地方，结合指令，可以很快看出错误。在简单的测试没有出错之后，又可以全速运行程序，完成题目。因为所有的题目基本上都是需要通过跳转来实现循环结构的，这样可以实现不停的输入。而在你刚开始编写的程序中，很可能是没有考虑到所有情况的，可能这组输入运算正确，而到了下一组就不正确了。因此通过单步，中断运行，回退指令可以查看运算错误的原因，这和平常的开发也很像。</p>
<p>开头说了，这款游戏的解题过程其实就是一款简单 CPU 运行的过程。这款 CPU 最多支持11条指令，可以分为四类。第一类基本输入输出 input/output，第二类对内存的读写 copyfrom/copyto，第三类加减运算，包括加减一个数，和一个数自加一和自减一，第四类跳转指令，包括无条件跳转、值为零跳转、值为负跳转。第一类和第四类指令的运行不需要提供参数，指令的运行仅影响 CPU 寄存器或者仅受 CPU 寄存器的影响。而第二类和第三类的指令是需要提供一个参数的，刚开始这个参数是一个值，后面的关卡中加入了间接寻址，可以通过类似指针的操作来实现更多的功能，因此第二类和第三类指令的参数也支持地址参数。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/hrm/game.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="game"></p>
<p>根据关卡的不同，可以用的内存大小（地毯数量）是不同的，最多的时候有 24 字节，有时候地毯上是有值的，类似于C语言中带初值的全局变量。对内存的使用主要是读写，而且不允许对一个空的内存执行读操作，因为此时该值是未知的。内存用来暂存一些程序运行时的中间数据。很多关卡都会在内存中给一个 0 值，因为 CPU 不支持立即寻址，因此将 0 值通过内存的方式给定，0 值经常被用于计数，因此你可能需要在程序的开始将其复制到另一块内存中，以确保下一次的输入还是可以拷贝一个 0，并从 0 开始计数。</p>
<p>这款游戏的编程语言是汇编，从程序执行结构上来说就只有两种，一种是顺序结构，另一种是选择结构，而循环结构则是需要通过选择结构和跳转指令来实现的。但由于跳转指令只有三条，带条件的只有值为零和值为负两种，也就是说在做某些题是需要判断值为正的，则需要进行对应的转换。在后面的关卡中，出现的题目比较复杂，需要采用子程序的设计来实现，类似于函数的概念。有一关里面甚至给出了一小段程序。</p>
<p>这款游戏的关卡不是很多，通关也不会花费很长的时间，但是程序给出了一个最优解的标准，对指令数量和运行次数的最大值给以限制，想要每一关都可以实现最优解也是需要费一番功夫的。另外游戏本身是有一条故事线的，虽然关系并不大，但是聊胜于无。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PCM 转 WAV pcmToWav]]></title>
      <url>https://blog.cyang.tech/2018/06/07/pcmToWav/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>PCM 数据无法直接通过播放器打开，因为少了 44 字节的文件头，这里面最主要的信息是描述该 PCM 的采样频率，通道数，以及位数。</p>
<p>双击 pcmToWav.exe，拖入待转换的 PCM 数据，输入通道数和采样频率，默认使用 16-bit 表示一个采样点。等待程序运行结束，就会生成一个同名的 .wav 文件。</p>
<a id="more"></a>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180607194104253?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>python 源码</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>
<span class="token comment" spellcheck="true"># @Author: cyang</span>
<span class="token comment" spellcheck="true"># @Date:   2018-06-07 11:30:01</span>
<span class="token comment" spellcheck="true"># @Last Modified by:   cyang</span>
<span class="token comment" spellcheck="true"># @Last Modified time: 2018-06-07 14:43:23</span>

<span class="token keyword">import</span> os
<span class="token keyword">import</span> wave

<span class="token keyword">def</span> <span class="token function">pcmToWav</span><span class="token punctuation">(</span>in_file<span class="token punctuation">,</span> out_file<span class="token punctuation">)</span><span class="token punctuation">:</span>

    in_file <span class="token operator">=</span> open<span class="token punctuation">(</span>in_file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
    out_file <span class="token operator">=</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span>out_file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>

    out_file<span class="token punctuation">.</span>setnchannels<span class="token punctuation">(</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"plese input channels [1/2]: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    out_file<span class="token punctuation">.</span>setframerate<span class="token punctuation">(</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"plese input samplerate [32000]: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    out_file<span class="token punctuation">.</span>setsampwidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#16-bit</span>
    out_file<span class="token punctuation">.</span>writeframesraw<span class="token punctuation">(</span>in_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    in_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    out_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    IN_FILE <span class="token operator">=</span> input<span class="token punctuation">(</span>r<span class="token string">'input the file name: '</span><span class="token punctuation">)</span>
    OUT_FILE <span class="token operator">=</span> IN_FILE<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.wav'</span>

    pcmToWav<span class="token punctuation">(</span>IN_FILE<span class="token punctuation">,</span> OUT_FILE<span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pause'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文件转换为C数组 fileToC]]></title>
      <url>https://blog.cyang.tech/2018/05/18/%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAC%E6%95%B0%E7%BB%84%20fileToC/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="fileToC"><a href="#fileToC" class="headerlink" title="fileToC"></a>fileToC</h1><p><a href="https://github.com/cyang812/tools" target="_blank" rel="external">github项目地址</a></p>
<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>fileToC 是一款使用 python 编写的程序，可以将任意文件的二进制数据转换为 .C 文件的数组，以便程序编译。</p>
<p>双击 fileToC.exe 程序，将要转换的 test.any 文件拖入命令行，等待程序自动转换，结束后便可以得到一个和该文件同名的 .c 文件</p>
<a id="more"></a>
<p>结果如下：test.any 文件的二进制数据</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180518132336617?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180518132349534?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这款程序的使用场景是当我们编程时，需要使用文件里面的部分或全部数据，而由于开发环境限制，无法通过文件的方式来读取，这在嵌入式系统中比较常见。那么，就可以通过将文件数据变成一个C文件，编译为常量，链接到程序中。<br>例如，程序中需要使用图片或音频数据，而又无法通过文件方式获得数据时，就可以这样使用。</p>
<p>实际上程序在转换时并不一次性将文件读入内存，而是分块进行转换，因此速度不是最快，但这可以减少内存的消耗，以支持更大的文件。另一方面，很多情况下，并不需要转换很大的文件。</p>
<p>同时，转换后的文件大小会是之前文件的6倍以上。这是因为，</p>
<pre><code>raw file: 0x17;  #这只是一个字节
.c  file: 0x17;_ #_表示空格，&#39;0&#39; &#39;x&#39; &#39;1&#39; &#39;7&#39; &#39;;&#39; &#39;_&#39; 共6个字节
</code></pre><p>但这只是 .c 文件的大小，编译后的程序中数据量和原文件大小是一样的。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>文件名不支持中文, 因为文件名作为数组名。另外文件名支持’-‘，但C语言不支持。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSDN博客数据导出]]></title>
      <url>https://blog.cyang.tech/2018/04/28/CSDN%E5%8D%9A%E5%AE%A2%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h3 id="CSDN2HEXO-源码地址"><a href="#CSDN2HEXO-源码地址" class="headerlink" title="CSDN2HEXO 源码地址"></a><a href="https://github.com/cyang812/CSDN2HEXO" target="_blank" rel="external">CSDN2HEXO 源码地址</a></h3><h1 id="CSDN2HEXO"><a href="#CSDN2HEXO" class="headerlink" title="CSDN2HEXO"></a>CSDN2HEXO</h1><p>CSDN2HEXO 是一款基于<a href="http://open.csdn.net/" target="_blank" rel="external">CSDN开放平台</a> 的 csdn blog 内容下载器， 可以下载博客中的文章内容和图片，文章保存为 markdown 格式，图片可下载无水印图片，并根据文章标题生成文件夹存储相关数据。</p>
<a id="more"></a>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li><p>1、首先需要获得开发者认证，并创建应用，获取到 App_key 和 App_secret 以通过 OAuth2 认证，可<a href="http://open.csdn.net/apps/createapp" target="_blank" rel="external">在此获取</a></p>
</li>
<li><p>2、将 App_key，App_secret，CSDN_username，CSDN_secret 填入 <code>csdn_sdk.py</code> 文件开头处</p>
</li>
<li><p>3、运行 <code>csdn-spider.py</code></p>
</li>
</ul>
<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><ul>
<li><p>1、文章列表 </p>
<p>  <img src="http://p7tst3obo.bkt.clouddn.com/20180428144406106?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、文章内容<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20180428144425504?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li><p>1、下载 csdn 博客的部分文章时，可能会出现返回的 json 数据仅为 <code>{&#39;status&#39;: True}</code>，此时文章内容无法获取。会将出错的文章id 和文章标题写到本地 <code>download_err.json</code> 文件。</p>
</li>
<li><p>2、如果是分析本地的 hexo 博客 markdown 文件，则运行 <code>md_parse.py</code>。可下载其中的无水印图片，并可替换图床，加入图片样式。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言中，隐藏结构体的细节]]></title>
      <url>https://blog.cyang.tech/2018/04/18/C%E8%AF%AD%E8%A8%80%E4%B8%AD%EF%BC%8C%E9%9A%90%E8%97%8F%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>本文转载自 <a href="https://www.cnblogs.com/qingergege/p/6882107.html" target="_blank" rel="external">博客园</a></p>
<p>我们都知道，在C语言中，结构体中的字段都是可以访问的。或者说，在C++ 中，类和结构体的主要区别就是<strong>类中成员变量默认为private，而结构体中默认为public</strong>。结构体的这一个特性，导致结构体中封装的数据，实际上并没有封装，外界都可以访问结构体中的字段。</p>
<a id="more"></a>
<p>C++中我们尚可用类来替代结构体，但是，C语言中是没有类的，只能用结构体，但很多时候，我们需要隐藏结构体的字段，<strong>不让外界直接访问，而是通过我们写的函数进行间接访问</strong>，这样就提高了程序的封装性。 </p>
<p>实现方法，简单来说，就是，结构体定义时，要定义在.c文件中，然后我们自己定义一些访问结构体的函数，在.h文件中，只存放函数原型声明和对结构体的声明。</p>
<p>看个例子<br>.c文件中</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//stu.c</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">struct</span> stu<span class="token punctuation">{</span>
    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> stu <span class="token operator">*</span><span class="token function">new_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> stu <span class="token operator">*</span>s<span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">set_id</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token operator">-></span>id<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token operator">-></span>id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，在.c文件中，我定义了一个结构体，并且定义了一些用于操作这个结构体的函数。</p>
<p>在.h文件中</p>
<pre class="line-numbers language-c"><code class="language-c">stu<span class="token punctuation">.</span>h
<span class="token macro property">#<span class="token directive keyword">ifndef</span> STU_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> STU_H</span>

<span class="token keyword">struct</span> stu<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">set_id</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">extern</span> <span class="token keyword">struct</span> stu <span class="token operator">*</span><span class="token function">new_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在.h中我声明了一下结构体struct stu，并且写了函数的原型声明，供其他文件调用。</p>
<p>在main.c中我引用了stu.h</p>
<p>下面是main.c</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stu.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//struct stu s;</span>
    <span class="token comment" spellcheck="true">//s.score = 100;</span>
    <span class="token comment" spellcheck="true">//struct stu s = {{0}};</span>

    <span class="token keyword">struct</span> stu <span class="token operator">*</span>s<span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token function">new_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">set_id</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"950621"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>id <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    id <span class="token operator">=</span> <span class="token function">get_id</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设置的id为:%s\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，在main函数中，我先是定义了一个struct stu类型的指针，然后通过new_stu()给这个指针分配了空间，在通过另外两个函数对其进行了操作。</p>
<p>这里需要注意一下我注释掉的部分，说明一下：</p>
<p>这种情况下，<strong>不能定义struct stu类型的变量！！！</strong></p>
<p>因为：</p>
<p>.h文件中，<strong>只是对结构体进行了声明</strong>，并没有结构体具体细节的描述，也就是在main.c中只是声明了一下struct stu，这样编译器就知道有个结构体类型叫struct stu，<strong>但是它并不知道stu的内部细节</strong>。</p>
<p>我们都知道，定义一个变量，编译器是要给它<strong>分配内存空间的</strong>，但是，<strong>此时编译器并不知道stu的内部细节</strong>，也就不知道stu这个结构体的变量要占多少空间，自然无法分配内存。这样在编译时期就会报错。</p>
<p>但是定义一个指针变量就不一样啦，不管是什么类型的指针，占据的内存空间都是4个字节，编译器只需要确定有个叫struct stu 的类型存在就好了，而.h中那个声明，就是在告诉编译器，有这么一个类型。</p>
<p>同时，这种情况下也不能访问结构体的字段，比如，s-&gt;score=100;这条语句在编译时就会报错，原因和上面一样，<strong>编译器并不知道struct stu结构体的内部细节</strong>。</p>
<p>通过上面的方法，在除了stu.c文件之外的其他文件中，<strong>只能通过stu.c中定义的函数来间接操作结构体变量，而不能直接对结构体变量进行操作，</strong>包括不能创建一个结构体变量！</p>
<p>这样就很好地体现了程序的封装性，也提高了程序的安全性。但是就需要我们写很多操作函数啦，包括创建结构体指针变量分配空间的函数。</p>
<p>我们也可以在.h文件中用typedef声明一个结构体的指针类型，如  typedef struct sut * pStu;</p>
<p>这样在main.c中就可以用pStu声明结构体指针变量了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言 符号的不同意义]]></title>
      <url>https://blog.cyang.tech/2018/03/28/C%E8%AF%AD%E8%A8%80%20%E7%AC%A6%E5%8F%B7%E7%9A%84%E4%B8%8D%E5%90%8C%E6%84%8F%E4%B9%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>C语言的许多符号在不同的上下文环境里有不同的意义，相当于被“重载”了。如下展示了一些符号的不同意义。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul>
<li>在函数内部，表示该变量的值在各个调用间一直保持延续性。类似与全局变量，区别在于作用域不同。</li>
<li>在函数外部，表示该函数或者变量只对本文件可见。</li>
</ul>
<a id="more"></a>
<h2 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h2><ul>
<li>用于函数定义，表示全局可见（属于冗余，因为函数名在默认情况下具有外部的链接属性，如果函数没有在调用它的转换单元中定义，编译器就会把这个调用标记为外部，让链接程序处理它）</li>
<li>用于变量，表示它在其他地方定义(变量名和函数不同，当某个名称的定义对于当前转换单元来说是外部的。如果希望用一个名称访问当前装换单元外的变量，就必须用 extern 关键字来声明改变量，表示该名称在当前块的外部定义。之后编译器就把变量标记为具有外部链接属性，链接程序就会在名称和它的引用的变量之间建立链接。如果给定块中的一个名称有 extern 声明，就不能在同一个块中定义该名称)</li>
<li>一般而言，使用 extern 有2中方式：第一种是在 C 文件中直接声明某个其他文件中定义的函数或全局变量为 extern，从而告诉编译器这个函数或变量是在其他 C 文件中定义的；第二种是在头文件中声明某个函数或变量为 extern，然后在需要引用该函数或变量的 C 文件中包含这个头文件。第二种是比较好的方式，因为头文件只需要编写一次就可以在其他所有需要引用这些函数或变量的 C 文件中被包含，相应地如果函数定义或者变量的定义发生了变化，也只需要修改头文件一个文件就可以了，否则必须修改所有引用这些外部函数或变量的 C 文件。</li>
</ul>
<h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><ul>
<li>作为函数的返回类型，表示不允许返回任何值</li>
<li>在指针声明中，表示通用指针的类型</li>
<li>位于参数列表中，表示没有参数</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="*"></a>*</h2><ul>
<li>乘法运算符</li>
<li>用于指针，间接引用</li>
<li>在声明中，表示指针</li>
</ul>
<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><ul>
<li>位的 AND 操作符</li>
<li>取地址符号</li>
</ul>
<h2 id="-1"><a href="#-1" class="headerlink" title="()"></a>()</h2><ul>
<li>在函数定义中，包围形式参数表</li>
<li>调用一个函数</li>
<li>改变表达式的运算次序</li>
<li>将值转换为其他类型（强制类型转换）</li>
<li>定义带参数的宏</li>
<li>包围 sizeof 操作符的操作数</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>&lt;= 小于等于运算符</li>
<li>&lt;&lt;= 左移复合赋值运算符</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IAR 和 Keil 使用外部 SDRAM 的区别]]></title>
      <url>https://blog.cyang.tech/2018/03/26/IAR%20%E5%92%8C%20keil%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%20SDRAM%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>当芯片内部的 SRAM 不够用时，就需要在外部扩展 SDRAM，然后在写程序时将一些比较大的 buffer 定义在外部内存中。在进行正确的配置之后，对外部 SDRAM 的使用，和芯片内部的 SRAM 是一样的，可以直接对 SDRAM 的地址进行读写访问。</p>
<a id="more"></a>
<p>因此，最简单的方法就是，如下所示的代码，直接使用指针指到外部 SDRAM 的地址，之后对指针进行移动，便可以对全部 SDRAM 进行读写。使用这种方法需要特别小心，要确保指针指向的地址在 SDRAM 的地址空间。</p>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token operator">*</span>sdram_buf <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>SDRAM_ADDR<span class="token punctuation">;</span>
uint8_t <span class="token operator">*</span>sdram_ptr <span class="token operator">=</span> sdram_buf<span class="token punctuation">;</span>
uint32_t sdram_useSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
uint8_t sdram_full <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外的一种方法就是，将 buffer 数组定义在外部 SDRAM 中，这样可将指针操作改为对数组的操作。也就是在定义数组时，不是由编译器自动分配地址，而是手动指定数组的地址。不同的 IDE 语法不一样，在 IAR 下，需要使用如下的语句，</p>
<pre class="line-numbers language-c"><code class="language-c">IAR 在外部SDRAM定义数组的方法
<span class="token macro property">#<span class="token directive keyword">pragma</span> location = SDRAM_ADDR</span>
uint8_t sdram_buffer<span class="token punctuation">[</span><span class="token number">0x700000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>编译后生成的 map 文件可以看出，有 7MB 的空间是使用绝对地址定义的。<br><img src="http://p7tst3obo.bkt.clouddn.com/20180326193029821?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>keil 下使用如下语句：</p>
<pre class="line-numbers language-c"><code class="language-c">keil 在外部SDRAM定义数组的方法
uint8_t sdram_buffer<span class="token punctuation">[</span><span class="token number">0x700000</span><span class="token punctuation">]</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">at</span><span class="token punctuation">(</span>SDRAM_ADDR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言 ringBuffer]]></title>
      <url>https://blog.cyang.tech/2018/03/22/C%E8%AF%AD%E8%A8%80%20ringBuffer/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、-ringBuffer-介绍"><a href="#一、-ringBuffer-介绍" class="headerlink" title="一、 ringBuffer 介绍"></a>一、 ringBuffer 介绍</h1><p>ringBuffer 称作环形缓冲，也有叫 circleBuffer 的。就是取内存中一块连续的区域用作环形缓冲区的数据存储区。这块连续的存储会被反复使用，向 ringBuffer 写入数据总是从写指针的位置开始，如写到实际存储区的末尾还没有写完，则将剩余的数据从存储区的头开始写；从该 ringBuffer 读出数据也是从读指针的位置开始，如读到实际存储区的末尾还没有读完，则从存储区的头开始读剩下的数据。</p>
<a id="more"></a>
<p>为了保证写入的数据不会覆盖 ringBuffer 里还没有被读出的数据，以及读出的数据不是已经读出过的旧数据，需要使用一个变量 btoRead 表示该 ringBuffer 中有效的数据。使用变量 length 表示该环形缓冲区中真实的缓冲大小。使用指针 source 指向实际的缓存地址。</p>
<p>使用 ringBuffer 读写数据，要确保读写数据的速率和实际缓冲区大小的匹配。如果不匹配，可能会导致溢出，比如读数据太慢，而写数据很快，实际的缓存区又太小，导致整个缓冲区都是还没有被读出的数据，此时新的数据就无法写入。正确使用 ringBuffer 可以保证数据的连续，降低读模块和写模块之间的耦合性。更多关于生产者-消费者模型的知识可以看这篇<a href="https://blog.csdn.net/lenyusun/article/details/6609786" target="_blank" rel="external">博客</a>。</p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><p>ringBuffer 的结构体</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    uint8_t <span class="token operator">*</span>source<span class="token punctuation">;</span>
    uint32_t br<span class="token punctuation">;</span>
    uint32_t bw<span class="token punctuation">;</span>
    uint32_t btoRead<span class="token punctuation">;</span>
    uint32_t length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>ringbuffer_t<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建 ringBuffer 函数</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">create_ringBuffer</span><span class="token punctuation">(</span>ringbuffer_t <span class="token operator">*</span>ringBuf<span class="token punctuation">,</span> uint8_t <span class="token operator">*</span>buf<span class="token punctuation">,</span> uint32_t buf_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ringBuf<span class="token operator">-></span>br         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>bw         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>btoRead    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>source     <span class="token operator">=</span> buf<span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>length     <span class="token operator">=</span> buf_len<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create ringBuffer->length = %d\n"</span><span class="token punctuation">,</span> ringBuf<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>清空 ringBuffer 函数</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear_ringBuffer</span><span class="token punctuation">(</span>ringbuffer_t <span class="token operator">*</span>ringBuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ringBuf<span class="token operator">-></span>br         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>bw         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>btoRead    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//no need do this casue r_ptr and w_prt has change</span>
<span class="token comment" spellcheck="true">//    memset((uint8_t *)ringBuf->source, 0, ringBuf->length); </span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>读数据函数</p>
<pre class="line-numbers language-c"><code class="language-c">uint32_t <span class="token function">write_ringBuffer</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span>buffer<span class="token punctuation">,</span> uint32_t size<span class="token punctuation">,</span> ringbuffer_t <span class="token operator">*</span>ringBuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint32_t len            <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uint32_t ringBuf_bw     <span class="token operator">=</span> ringBuf<span class="token operator">-></span>bw<span class="token punctuation">;</span>
    uint32_t ringBuf_len    <span class="token operator">=</span> ringBuf<span class="token operator">-></span>length<span class="token punctuation">;</span>
    uint8_t <span class="token operator">*</span>ringBuf_source <span class="token operator">=</span> ringBuf<span class="token operator">-></span>source<span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ringBuf_bw <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> ringBuf_len  <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>ringBuf_source <span class="token operator">+</span> ringBuf_bw<span class="token punctuation">,</span> bufff<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        len <span class="token operator">=</span> ringBuf_len <span class="token operator">-</span> ringBuf_bw<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>ringBuf_source <span class="token operator">+</span> ringBuf_bw<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>ringBuf_source<span class="token punctuation">,</span> buffer <span class="token operator">+</span> ringBuf_bw<span class="token punctuation">,</span> size <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ringBuf<span class="token operator">-></span>bw <span class="token operator">=</span> <span class="token punctuation">(</span>ringBuf<span class="token operator">-></span>bw <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token operator">%</span> ringBuf_len<span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>btoRead <span class="token operator">+</span><span class="token operator">=</span> size<span class="token punctuation">;</span>

    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>写数据函数</p>
<pre class="line-numbers language-c"><code class="language-c">uint32_t <span class="token function">read_ringBuffer</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span>buffer<span class="token punctuation">,</span> uint32_t size<span class="token punctuation">,</span> ringbuffer_t <span class="token operator">*</span>ringBuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint32_t len            <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uint32_t ringBuf_br     <span class="token operator">=</span> ringBuf<span class="token operator">-></span>br<span class="token punctuation">;</span>
    uint32_t ringBuf_len    <span class="token operator">=</span> ringBuf<span class="token operator">-></span>length<span class="token punctuation">;</span>
    uint8_t <span class="token operator">*</span>ringBuf_source <span class="token operator">=</span> ringBug<span class="token operator">-></span>source<span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ringBuf_br <span class="token operator">+</span> size <span class="token punctuation">)</span> <span class="token operator">&lt;=</span> ringBuf_len <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> ringBuf_source <span class="token operator">+</span> ringBuf_br<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        len <span class="token operator">=</span> ringBuf_len <span class="token operator">-</span> ringBuf_br<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>bufff<span class="token punctuation">,</span> ringBuf_source <span class="token operator">+</span> ringBuf_br<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> len<span class="token punctuation">,</span> ringBuf_source<span class="token punctuation">,</span> size <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ringBuf<span class="token operator">-></span>br <span class="token operator">=</span> <span class="token punctuation">(</span>ringBuf<span class="token operator">-></span>br <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token operator">%</span> ringBuf_len<span class="token punctuation">;</span>
    ringBuf<span class="token operator">-></span>btoRead <span class="token operator">-</span><span class="token operator">=</span> size<span class="token punctuation">;</span>

    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取 ringBuffer 中的有效数据</p>
<pre class="line-numbers language-c"><code class="language-c">uint32_t <span class="token function">get_ringBuffer_btoRead</span><span class="token punctuation">(</span>ringbuffer_t <span class="token operator">*</span>ringBuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> ringBuf<span class="token operator">-></span>btoRead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取 ringBuffer 的长度</p>
<pre class="line-numbers language-c"><code class="language-c">uint32_t <span class="token function">get_ringBuffer_length</span><span class="token punctuation">(</span>ringbuffer_t <span class="token operator">*</span>ringBuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> ringBuf<span class="token operator">-></span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h1><p>对 ringBuffer 的使用，首先需要又一块真实并且连续的数据存储区。可以使用 malloc 从堆区分配，也可以使用一个数组。</p>
<p>在写数据之前，需要对此时 ringBuffer 的剩余空间和要写入数据的大小进行比较。剩余空间使用长度 length 减去待读出数据量 btoRead 得到。</p>
<p>在读出数据之前，则需要对此时 ringBuffer 可读出的有效数据 btoRead 进行判断。</p>
<p>读出的数据不够，或者没有足够的空间写如数据，可以在调用读写函数之前进行判断，假如情况不满足，就不调用相应的读写函数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言 Malloc 内存泄漏]]></title>
      <url>https://blog.cyang.tech/2018/03/18/C%E8%AF%AD%E8%A8%80%20malloc%20%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>错误代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Init_layer2_Decoder</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Stream <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> mad_stream<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mad_stream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Frame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> mad_frame<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mad_frame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Synth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> mad_synth<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mad_synth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>Stream<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> Frame<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> Synth<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"init mp2Dec fail!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">mad_stream_init</span><span class="token punctuation">(</span>Stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mad_frame_init</span><span class="token punctuation">(</span>Frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mad_synth_init</span><span class="token punctuation">(</span>Synth<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<p>这个函数先为三个结构体变量申请内存空间，其中一个申请失败就返回失败。如果全都申请成功的话，就对结构体变量进行初始化工作。逻辑上似乎没有什么问题，但是这里隐藏了一个内存泄漏的错误。</p>
<p>假如 <code>Stream</code> 申请成功，<code>Frame</code> 申请失败，满足 if 语句的条件，函数不再继续执行，返回-1。可是 <code>Stream</code> 所指向的空间并不会被释放到堆区。这就造成了内存泄漏。类似的情况还有，<code>Stream</code> 和 <code>Frame</code> 均申请成功，但是 <code>Synth</code> 申请失败，此时直接返回，必定会造成内存没有被释放。因此，代码应该做如下修改：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Init_layer2_Decoder</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Stream <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> mad_stream<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mad_stream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Stream <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    Frame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> mad_frame<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mad_frame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Frame <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>Stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Synth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> mad_synth<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> mad_synth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Synth <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>Stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>Frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        Frame <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    

    <span class="token function">mad_stream_init</span><span class="token punctuation">(</span>Stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mad_frame_init</span><span class="token punctuation">(</span>Frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mad_synth_init</span><span class="token punctuation">(</span>Synth<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里假设 Frame 大小为100k，整个堆区为75k，因此 Steam 可以申请成功，但 Frame 显然会申请失败。如果不对 Frame 进行释放就直接返回的话，就会造成内存泄漏。如下串口打印可看。</p>
<pre><code>**********************
SystemCoreClock = 180000000
sizeof(Stream) = 56
Stream = 0x20003b30
malloc Frame fail!
//free(Stream)
Stream = 0x20003b30
init mp2 dec fail!
---------------------------
total free space = 76736, 74 k
max system bytes =      76800
system bytes     =      76800
in use bytes     =         64
</code></pre><p>从上面的结果可以看到，Stream 的结构大小为56字节，加上必要的用于维护的数据，在堆区占用了64字节， Frame 申请失败后，可看到这64字节并没有被释放。</p>
<p>另外，在对 Stream 进行释放之后，还要将该指针指向 NULL。因为释放只是将该指针指向的内存还给堆区，Stream 指针还是指向堆区，但此时对该指针的指向的区域进行访问是不被允许的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 硬件CRC和软件CRC速度比较]]></title>
      <url>https://blog.cyang.tech/2018/03/12/STM32%20%E7%A1%AC%E4%BB%B6CRC%E5%92%8C%E8%BD%AF%E4%BB%B6CRC%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、测试条件"><a href="#一、测试条件" class="headerlink" title="一、测试条件"></a>一、测试条件</h1><p>硬件： STM32L432KC<br>主频： 80MHz<br>编译器： IAR 8.20.1<br>编译选项： High Speed no size constraints<br>CRC 生成多项式： 0x782f</p>
<h1 id="二、测试方法"><a href="#二、测试方法" class="headerlink" title="二、测试方法"></a>二、测试方法</h1><p>软件提前生成CRC表，用于查询。分别使用软件CRC算法和硬件CRC外设对一个缓存进行计算，目的是从该缓存中找到同步头。同步头共11字节，前两个字节为后九个字节的CRC校验值。通过迭代算法依次对11字节进行计算和比较，当找到同步头后返回同步头偏移量。通过时间比较两者之间的速度。</p>
<h1 id="三、测试结果"><a href="#三、测试结果" class="headerlink" title="三、测试结果"></a>三、测试结果</h1><p>迭代24464次后，从缓存中找到同步头。<br>不开启编译时间优化时，软件算法用时238ms，硬件CRC用时220ms。<br><img src="http://p7tst3obo.bkt.clouddn.com/20180312224132752?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<p>开启编译时间优化后，软件算法用时159ms，硬件CRC用时186ms。<br><img src="http://p7tst3obo.bkt.clouddn.com/20180312224305220?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="四、附测试代码"><a href="#四、附测试代码" class="headerlink" title="四、附测试代码"></a>四、附测试代码</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"user_crc.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32l4xx_hal.h"</span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> SOFT_CRC  1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> HARD_CRC  2</span>

CRC_HandleTypeDef   CrcHandle<span class="token punctuation">;</span>
uint16_t crc_tab<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">crc_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/*##-1- Configure the CRC peripheral #######################################*/</span>
    CrcHandle<span class="token punctuation">.</span>Instance <span class="token operator">=</span> CRC<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* The default polynomial is not used. It is required to defined it in CrcHandle.Init.GeneratingPolynomial*/</span>    
    CrcHandle<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>DefaultPolynomialUse      <span class="token operator">=</span> DEFAULT_POLYNOMIAL_DISABLE<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* Set the value of the polynomial */</span>
    CrcHandle<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>GeneratingPolynomial      <span class="token operator">=</span> CRC_POLYNOMIAL_16B<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* The user-defined generating polynomial generates a
         16-bit long CRC */</span>
    CrcHandle<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>CRCLength                 <span class="token operator">=</span> CRC_POLYLENGTH_16B<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* The default init value is used */</span>
    CrcHandle<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>DefaultInitValueUse         <span class="token operator">=</span> DEFAULT_INIT_VALUE_DISABLE<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* The input data are not inverted */</span>
    CrcHandle<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>InputDataInversionMode    <span class="token operator">=</span> CRC_INPUTDATA_INVERSION_NONE<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* The output data are not inverted */</span>
    CrcHandle<span class="token punctuation">.</span>Init<span class="token punctuation">.</span>OutputDataInversionMode   <span class="token operator">=</span> CRC_OUTPUTDATA_INVERSION_DISABLE<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* The input data are 8-bit long */</span>
    CrcHandle<span class="token punctuation">.</span>InputDataFormat                  <span class="token operator">=</span> CRC_INPUTDATA_FORMAT_BYTES<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_CRC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CrcHandle<span class="token punctuation">)</span> <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/* Initialization Error */</span>
        <span class="token function">Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">crc_buildTab</span><span class="token punctuation">(</span>uint16_t gen_polynom<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> value <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> value<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        uint16_t crc <span class="token operator">=</span> value <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>crc <span class="token operator">&amp;</span> <span class="token number">0x8000</span><span class="token punctuation">)</span>
                crc <span class="token operator">=</span> <span class="token punctuation">(</span>crc <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> gen_polynom<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                crc <span class="token operator">=</span> crc <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        crc_tab<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> crc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

uint16_t <span class="token function">soft_crc_calc</span><span class="token punctuation">(</span><span class="token keyword">const</span> uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span> uint16_t len<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    uint16_t crc <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>uint16_t offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> offset<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        crc <span class="token operator">=</span> <span class="token punctuation">(</span>crc <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> crc_tab<span class="token punctuation">[</span><span class="token punctuation">(</span>crc <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> data<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> crc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

uint16_t <span class="token function">hard_crc_calc</span><span class="token punctuation">(</span><span class="token keyword">const</span> uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span> uint16_t len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint16_t crc <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>

    crc <span class="token operator">=</span> <span class="token function">HAL_CRC_Calculate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>CrcHandle<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint32_t <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> crc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

uint16_t <span class="token function">find_sync_word</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span>data<span class="token punctuation">,</span> uint32_t data_len<span class="token punctuation">,</span> uint8_t crc_type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    uint16_t crc_stored<span class="token punctuation">,</span>crc_calced<span class="token punctuation">;</span>

    ptr <span class="token operator">=</span> data<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>uint32_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>data_len<span class="token number">-9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        crc_stored <span class="token operator">=</span> ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>crc_type <span class="token operator">==</span> SOFT_CRC<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            crc_calced <span class="token operator">=</span> <span class="token function">soft_crc_calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>crc_type <span class="token operator">==</span> HARD_CRC<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            crc_calced <span class="token operator">=</span> <span class="token function">hard_crc_calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>crc_stored <span class="token operator">!=</span> <span class="token number">0x0000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>crc_stored <span class="token operator">==</span> crc_calced<span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"crc check ok! crc1 = 0x%04x,crc2 = 0x%04x\n"</span><span class="token punctuation">,</span> crc_stored<span class="token punctuation">,</span>crc_calced<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ptr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">crc_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint32_t tick1<span class="token punctuation">,</span>tick2<span class="token punctuation">;</span>
    uint32_t find_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uint16_t gen_polynom <span class="token operator">=</span> <span class="token number">0x782f</span><span class="token punctuation">;</span>

    <span class="token function">crc_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">crc_buildTab</span><span class="token punctuation">(</span>gen_polynom<span class="token punctuation">)</span><span class="token punctuation">;</span>

    tick1 <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    find_cnt <span class="token operator">=</span> <span class="token function">find_sync_word</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>superFrameBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>superFrameBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> SOFT_CRC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tick2 <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"use soft_crc find sync word after %d iteration, use time %d\n"</span><span class="token punctuation">,</span> find_cnt<span class="token punctuation">,</span> tick2 <span class="token operator">-</span> tick1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    tick1 <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    find_cnt <span class="token operator">=</span> <span class="token function">find_sync_word</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>superFrameBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>superFrameBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> HARD_CRC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tick2 <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"use hard_crc find sync word after %d iteration, use time %d\n"</span><span class="token punctuation">,</span> find_cnt<span class="token punctuation">,</span> tick2 <span class="token operator">-</span> tick1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[下载 Tumblr 标记为喜欢的内容]]></title>
      <url>https://blog.cyang.tech/2018/03/03/%E4%B8%8B%E8%BD%BD%20tumblr%20%E6%A0%87%E8%AE%B0%E4%B8%BA%E5%96%9C%E6%AC%A2%E7%9A%84%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>源代码发布在github : <a href="https://github.com/cyang812/get_tumblr_likes" target="_blank" rel="external">get_tumblr_likes</a></p>
<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>本项目使用 python 编写，分析 tumblr 账户中喜欢的内容，给出资源链接，并下载。<br>其中 <code>test.json</code> 是一份 tumblr 返回的喜欢数据的 json 示例，提取里面图片和视频的资源地址后下载，下载的内容如下图。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180303164838919?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<h1 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h1><ul>
<li><p>首先，你需要通过 tumblr API 来获取账户喜欢内容。这个过程是需要通过 OAuth 认证的，具体可参看<a href="https://www.tumblr.com/docs/en/api/v2#auth" target="_blank" rel="external">这个网页</a></p>
</li>
<li><p>得到认证后可以通过脚本来获取资源内容，也可以通过<a href="https://api.tumblr.com/console/calls/user/likes#" target="_blank" rel="external">这个网页</a>来查询，结果会通过 json 的形式返回</p>
</li>
<li><p>保存你得到的 json 数据，命名为<code>test.json</code>，执行命令 <code>python json_parse.py</code>，这可以从 json 文件中提取出资源的真正链接，并存为 <code>url_list.txt</code> 文件<br><img src="http://p7tst3obo.bkt.clouddn.com/20180303164909831?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>执行 <code>python download.py</code>，之后资源文件就会挨个下载到 download 文件夹下<br><img src="http://p7tst3obo.bkt.clouddn.com/20180303164920621?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h1><ul>
<li><p>由于众所周知的原因，tumblr 的资源地址是不能直接下载的，因此需要设置代理。测试时使用 ssr 代理本地连接，因此 <code>download.py</code> 中有 <code>PROXIES = { &quot;http&quot;: &quot;http://127.0.0.1:1080&quot;, &quot;https&quot;: &quot;https://127.0.0.1:1080&quot; }</code>，如果是在可直接访问 tumblr 的 VPS 上运行，可对代码做如下修改。</p>
<pre class="line-numbers language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># r = requests.get(url,proxies=PROXIES) # use proxy</span>
  r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># directly access</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>这个项目下载的是账户中的喜欢内容，因此需要进行认证。如果是下载某个账户发布的内容，可使用<a href="https://github.com/dixudx/tumblr-crawler" target="_blank" rel="external">tumblr-crawler</a>，再次感谢 tumblr-crawler 项目</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 无法通过 百分号F 打印浮点数]]></title>
      <url>https://blog.cyang.tech/2018/03/03/STM32%20%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%20%E7%99%BE%E5%88%86%E5%8F%B7f%20%E6%89%93%E5%8D%B0%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>使用 IAR 开发 STM32，发现无法通过 printf 重定向到串口打印出浮点数。代码如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20180302144541975?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<p>输出结果如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20180302144722631?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>可见，浮点数部分无法正常显示。</p>
<h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><p>这是由于 IAR 默认选择的 printf 库不支持浮点数的的输出。可在设置选项中修改。如下：默认使用 small，改为 auto 即可。<br><img src="http://p7tst3obo.bkt.clouddn.com/20180302144931419?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="三、备注"><a href="#三、备注" class="headerlink" title="三、备注"></a>三、备注</h1><p>在不修改设置的情况下，尝试过如下两种代码解决。一种是通过 sprintf 将浮点数转换成字符串输出，另一种是分解整数和小数部分，分别输出。第一种方法也是不可行的，只有分解可以。</p>
<p>代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*
* cyang 2018/2/27
* mcu printf float value
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printf_float</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"%f"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PrintFloat</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp<span class="token punctuation">,</span>tmp1<span class="token punctuation">,</span>tmp2<span class="token punctuation">,</span>tmp3<span class="token punctuation">,</span>tmp4<span class="token punctuation">,</span>tmp5<span class="token punctuation">,</span>tmp6<span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span>
    tmp1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    tmp2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    tmp3<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    tmp4<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    tmp5<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    tmp6<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f-value=%d.%d%d%d%d%d%d\r\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>tmp1<span class="token punctuation">,</span>tmp2<span class="token punctuation">,</span>tmp3<span class="token punctuation">,</span>tmp4<span class="token punctuation">,</span>tmp5<span class="token punctuation">,</span>tmp6<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* code */</span>
    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">2.354954</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf_float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintFloat</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32L432 CoreMark跑分测试]]></title>
      <url>https://blog.cyang.tech/2018/03/01/STM32L432%20CoreMark%E8%B7%91%E5%88%86%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>测试环境： IAR for ARM 7.80.4</p>
<p>测试得分：277<br>官方给出的分数为：273.55<br>如下图：<br><img src="http://p7tst3obo.bkt.clouddn.com/20180228125429924?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32F469 CoreMark跑分测试]]></title>
      <url>https://blog.cyang.tech/2018/02/27/STM32F469%20CoreMark%E8%B7%91%E5%88%86%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、CoreMark-介绍"><a href="#一、CoreMark-介绍" class="headerlink" title="一、CoreMark 介绍"></a>一、CoreMark 介绍</h1><p>CoreMark 是一项测试处理器性能的基准测试。代码使用 C 语言写出，包含：列表，数学矩阵操作和状态及 CRC 等运算法则。目前 CoreMark 已迅速成为测量与比较处理器性能的业界基准测试。CoreMark 的得分越高，意味着性能更高。</p>
<a id="more"></a>
<h1 id="二、代码移植"><a href="#二、代码移植" class="headerlink" title="二、代码移植"></a>二、代码移植</h1><p>移植 CoreMark 的测试代码到 STM32 平台非常简单。ST 官方资料文档就有移植步骤的详细说明，<a href="http://www.stmcu.org/document/detail/index/id-217064" target="_blank" rel="external">文档地址</a>。</p>
<p>文档中使用 STM32Cube MX 生成测试工程。由于本次测试平台为 STM32F469I-DISCOVERY，可直接在固件库\en.stm32cubef4\STM32Cube_FW_F4_V1.14.0\Projects\STM32469I-Discovery\Templates的基础上移植代码。</p>
<p>移植代码需要改动的地方在 core_portme.c 中。修改方法在文档中均有详细说明。</p>
<p>在 IAR 环境下，为了正确编译代码，可能需要添加部分函数的函数原型，当然，也可以修改编译选项为不需要函数原型。同时应合理设置栈大小，可通过单步调试查看栈是否溢出，若溢出，IAR 状态栏会有警告。</p>
<h1 id="三、测试结果"><a href="#三、测试结果" class="headerlink" title="三、测试结果"></a>三、测试结果</h1><p>主频为 180 Mhz 时，测试几种不同的迭代次数，CoreMark 最高跑分为636，最低跑分为612。<br>官方给出的测试结果为608。<br>串口结果如下图：</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180227195105586?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>主频 120Mhz 时，跑分为 411， 主频为 60Mhz 时，跑分为 205。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[掌控堆栈确保系统稳定 IAR技术手册翻译]]></title>
      <url>https://blog.cyang.tech/2018/01/06/%E6%8E%8C%E6%8E%A7%E5%A0%86%E6%A0%88%E4%BB%A5%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>翻译自 <a href="https://www.iar.com/kr/support/resources/articles/mastering-stack-and-heap-for-system-reliability/" target="_blank" rel="external">IAR 技术手册</a></p>
<p><strong>堆和栈在嵌入式系统中是非常基础的概念。正确设置堆和栈的大小对于系统的稳定可靠非常重要。不正确设置时，系统可能会以某种非常奇怪的方式崩溃而造成灾难性的后果。</strong></p>
<p>堆和栈的大小必须被程序员设置。通常情况下计算栈使用量都是非常困难的，但是在小型嵌入式系统中却比较容易，并且理解栈的使用也可以解决一些很难发现的运行时错误。另一方面，给栈分配过多的空间也意味着对内存资源的浪费。对于大多数嵌入式项目来说，最坏情况下栈的最大使用量是一个非常重要的信息，因为这是一种非常简单的估计应用程序所需栈大小的方法。堆的溢出通常不会导致严重的错误，但是这并不能带来什么安慰，因为很少有应用程序可以在溢出的情况下恢复。</p>
<a id="more"></a>
<h1 id="一、一份简短的堆和栈介绍"><a href="#一、一份简短的堆和栈介绍" class="headerlink" title="一、一份简短的堆和栈介绍"></a>一、一份简短的堆和栈介绍</h1><h2 id="1-1-概要"><a href="#1-1-概要" class="headerlink" title="1.1 概要"></a>1.1 概要</h2><p>这篇文章主要介绍了如何合理地设计堆和栈，并且怎样在安全的情况下尽可能的减少堆和栈的大小。</p>
<p>桌面系统和嵌入式系统在堆和栈的设计上有一些相同的错误和注意事项，但在一些方面却完全不同。一个两者之间不同的例子就是可用的内存大小。Windows 和 Linux 中默认设置 1~8 Mbytes 作为栈空间，并且可以再增加。而堆的大小仅仅受限于实际物理内存大小或者是分页文件大小。相反，在嵌入式系统中，堆和栈的大小非常的受限，尤其是在使用RAM来分配时。因此，在这样受限的环境下，尽可能减少堆和栈的大小是非常必要的。一般来说，小型嵌入式系统中都不使用虚拟内存机制，堆和栈，全局变量的分配都是静态的，并且在程序生成时就已经被分配了。</p>
<p>下面我们会给出一些在嵌入式系统中出现的特殊问题，但我们并不会讲解如何保护堆栈来对抗攻击。这在桌面和移动设备中是一个非常火热的话题，如果说现在嵌入式系统还没有这个问题的话，在未来也有可能会出现。</p>
<h2 id="1-2-突破限制"><a href="#1-2-突破限制" class="headerlink" title="1.2 突破限制"></a>1.2 突破限制</h2><p>在你每天的生活中不断地突破限制是值得的，尽管有时也会让你处于困境。而在分配数据时突破限制则一定会让你处于麻烦之中。幸运的是，这种情况可能会很直观的出现，比如出现在系统测试期间，但也有可能出现的很晚，以至于产品已经分发到很多用户手中或者部署在远程环境中。</p>
<p>分配数据溢出可能发生在如下三个区域：全局变量区，栈区，堆区。写数组或者指针引用时也可能会越界访问。一些数组访问可以被静态地验证，例如使用编译器和 MISRA C 检查，如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但当数组下标是一个变量时，静态分析可能无法找出所有的错误。另外，指针的引用也很难通过静态分析来追踪：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>运行时检测对象溢出的方法在桌面系统中已经出现很久了，例如 Purify，Insure++，Valgrind，等。这些工具通过在应用程序运行时插入验证内存引用的代码来实现。这明显降低了程序的运行速度并且增加了程序的大小，因此这种方法并不适合于小型嵌入式系统。</p>
<h2 id="1-3-栈"><a href="#1-3-栈" class="headerlink" title="1.3 栈"></a>1.3 栈</h2><p>栈是一块用于存储程序数据的内存区域，例如下述数据：</p>
<ul>
<li>局部变量</li>
<li>返回地址</li>
<li>函数参数</li>
<li>编译器临时变量</li>
<li>中断时的上下文</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180106162911664?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="Figure 1: Stack overflow situation这里写图片描述"></p>
<p>栈中变量的生存时间依赖于函数的执行时间。函数返回后，其所使用的栈区随后就会被释放。<br>栈区大小必须被程序员静态设置。栈一般都是向下生长的，如果分配给栈区的大小不够，程序执行时的数据地址就会小于栈区，也就是发生了栈溢出。溢出会覆盖小于栈区地址的数据，这些数据通常都是全局变量和静态变量。因此，理解如何正确使用栈区可以解决部分程序运行时错误，例如变量被覆写，野指针和返回地址错误。上面这些错误都是很难发现的。但如果设置太大的栈区，则无疑浪费了内存空间。<br>我们将重点介绍一些统计程序运行所需栈区大小和检测栈区相关错误的方法。</p>
<h2 id="1-4-堆"><a href="#1-4-堆" class="headerlink" title="1.4 堆"></a>1.4 堆</h2><p>堆区被用于系统动态分配使用。在一些小型嵌入式系统中，动态内存和堆区通常都是可选的。动态内存区可在程序的不同阶段被复用。当一个模块不再需要一些内存时，它可以将其返还给分配器，以便别的模块可以使用这块内存。</p>
<p>存储在堆区的部分内容如下：</p>
<ul>
<li>临时数据对象</li>
<li>C++ new/delete</li>
<li>C++ STL containers</li>
<li>C++ exceptions</li>
</ul>
<p>在大型系统中，统计堆区的使用量是非常困难的，甚至是不可能的，因为程序的执行是动态的。此外，在嵌入式系统中并没有太多工具可以被用于测量堆区使用量，但是我们将会探讨一些方法。</p>
<p>保证堆区完整是非常重要的。分配的数据区通常都是和分配器自用数据穿插在一起的。错误使用分配的数据区不仅可能使别的数据区被修改，也有可能修改了内存分配器自用数据，这通常会导致应用程序的崩溃。我们将会探讨一些可以检查堆区是否完整的方法。</p>
<p>另一个需要考虑的是堆区的实时性能是不确定的。内存分配的时间取决于已经被分配了的堆的大小和所请求的空间大小。开发嵌入式项目的程序员是极其不愿意见到这种情况的，因为嵌入式程序通常都是周期循环驱动。</p>
<p>尽管在本文中堆是一个核心的话题，但能提供的指南也只是如何在小型嵌入式系统中减少堆区的大小。</p>
<h1 id="二、可靠的栈区设计"><a href="#二、可靠的栈区设计" class="headerlink" title="二、可靠的栈区设计"></a>二、可靠的栈区设计</h1><h2 id="2-1-为什么计算栈区非常困难？"><a href="#2-1-为什么计算栈区非常困难？" class="headerlink" title="2.1 为什么计算栈区非常困难？"></a>2.1 为什么计算栈区非常困难？</h2><p>有很多因素造成了统计栈区使用量非常困难。很多应用程序都非常复杂并且由事件驱动，通常会由数以百计的函数和很多的中断来组成。如果允许中断嵌套，则在任何时候都有可能发生中断，这种情况变得难以掌握。这意味着程序的执行顺序变得难以追踪。另外通过函数指针间接的调用不同的函数以及递归和注释的汇编程序也会给统计栈区使用量带来错误。</p>
<p>很多微控制器支持多重栈，例如一个系统栈，一个用户栈。当你使用嵌入式系统，诸如 µC/OS，ThreadX等时，多重栈是必须的，因为每个任务都拥有自己的栈区域。运行时库和第三方软件同样会使计算变得复杂，因为它们的源代码通常都是不开放的。修改代码或是应用程序的调度顺序也可能会影响栈的使用量。不同的编译器和编译等级会产生不同的代码，这同样影响栈的使用量。总之，持续追踪栈的最大使用量是非常有必要的。</p>
<h2 id="2-2-如何设置栈的大小"><a href="#2-2-如何设置栈的大小" class="headerlink" title="2.2 如何设置栈的大小"></a>2.2 如何设置栈的大小</h2><p>设计应用程序时，栈的大小是一个需要考虑的因素，因此你需要一种方法来判断所需的栈大小。就算你将 RAM 全部的剩余空间都分配给栈使用，也未必是足够的。一个可行的办法是测试系统在最坏情况下所需的栈大小。在这样的测试中，你只需检测到底有多少栈空间被使用。简单来说有两种方法，一是通过打印输出当前的栈消耗，二是在测试结束输出追踪到的栈最大的消耗。但正如上面提到的，在很多复杂的系统里这种最坏情况是很难被捕获的。根本原因在于当测试某些带有中断的事件驱动系统时，部分程序执行路径可能根本没有被测试到。</p>
<p>另一种方法可以从理论上计算栈的需求量。显然，人为计算一个复杂系统的需求量是不可能的。因此需要一个可以分析复杂系统的工具。这个工具可以分析二进制文件或者源代码文件。如果是分析二进制文件，则需要工作在机器指令级别，找出所有程序指针（PC）的变化，从而找到最坏情况下的执行路径。如果是分析源代码，则需要读取所有包含的汇编单元。在所有情况下，分析工具都必须通过汇编单元中的指针找出直接调用函数和间接调用函数，并通过调用路径计算出一个保守的栈使用量。源代码分析工具需要知道编译器对栈的一些设置，例如对齐方式和编译器临时变量。</p>
<p>你自己独立编写一个这样的工具无疑是非常困难的，因此也有一些经济的替换方案。例如独立的静态栈计算工具，或是由解决方案提供商提供的工具，像是用于 Express Logic ThreadX RTOS 的分析工具。编译器和链接器也可以被用于计算栈需求量信息。这个功能可以在诸如 IAR Embedded Workbench 之类的工具上获得。现在我们来看一些可以被用于预估栈使用量的方法。</p>
<h3 id="2-2-1-其他设置栈大小的方法"><a href="#2-2-1-其他设置栈大小的方法" class="headerlink" title="2.2.1 其他设置栈大小的方法"></a>2.2.1 其他设置栈大小的方法</h3><p>一种计算栈深度的方法是检测栈指针的地址。栈指针的地址可以从一个函数的参数的地址或是局部变量的地址来得到。如果在分别主程序起始处和你认为的可能占用最多栈空间的函数中获取到栈指针的地址，你就可以计算出栈的最大需求量。下面是一个例子，这里假设栈从高地址向低地址生长：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>highStack<span class="token punctuation">,</span> <span class="token operator">*</span>lowStack<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  highStack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// ...</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Current stack usage: %d\n"</span><span class="token punctuation">,</span>highStack <span class="token operator">-</span> lowStack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">deepest_stack_path_function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  lowStack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种方法在小型确定的系统里可以得到很好的结果，但是在很多系统里你很难判断嵌套函数调用所需的栈深度，并且你也很难触发出程序的最坏情况。</p>
<p>注意，这种方法获取到的栈使用量并不将中断函数所需的栈空间考虑在内。</p>
<p>这个方法的一个变种可以解决这个问题。这个方法通过一个高频的中断进行周期采样栈指针。这个中断频率应该尽可能设置到最高以避免影响应用程序的执行性能。通常设置在 10~250 KHz之间。这种方法的好处在于你不需要手动去寻找栈的最深使用情况。另外，当采样中断可以抢占别的中断时，这种方法也可以统计出中断函数所需的栈空间。然而，由于中断函数通常都非常快速的执行完，因此可能会错过周期的采样中断。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sampling_timer_interrupt_handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> currentStack<span class="token punctuation">;</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  currentStack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>currentStack <span class="token operator">&lt;</span> lowStack<span class="token punctuation">)</span>
    lowStack <span class="token operator">=</span> currentStack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-2-2-栈保护区"><a href="#2-2-2-栈保护区" class="headerlink" title="2.2.2 栈保护区"></a>2.2.2 栈保护区</h3><p>栈保护区就在栈分配的地址空间下方，被用来检测栈是否溢出。桌面系统通常都具有这种方法，因此当栈发生溢出时，操作系统可以很容易的检测到这种情况。对于不具备 MMU 的小型嵌入式系统，栈保护区也可以被加入并且发挥作用。为了实现栈保护区的作用，它必须被设置成合理的大小，用以存储写入到里面的数据。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180106162940709?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="Figure 2: Stack with gard zone  "></p>
<p>可以通过软件周期校验栈保护区的数据来持续监测栈保护区。</p>
<p>如果一个 MCU 具有内存保护单元，那么对栈保护区的写入会触发内存保护单元，产生一个异常，异常的处理机制可以记录下上次发生了什么。</p>
<h3 id="2-2-3-使用特定值填充栈"><a href="#2-2-3-使用特定值填充栈" class="headerlink" title="2.2.3 使用特定值填充栈"></a>2.2.3 使用特定值填充栈</h3><p>另一个被用于检测栈溢出的方法是，在应用程序执行前，使用一个特定的值填充完整个分配的栈空间，例如 0xCD。不论程序在什么位置停下，都可从栈的低地址向上查找，直到找到一个不等于 0xCD 的位置，通过这个位置可以算出栈的使用量。如果根本找不到这个值，那说明栈发生了溢出。</p>
<p>尽管这是一个检测栈使用量的可靠方法，但这并不能保证一定能检测到栈溢出。例如，当栈发生溢出，改变了栈以外的数据，但是栈以内的数据没有被修改。同样地，你的程序也有可能错误的修改了栈的数据，从而发生误判。</p>
<p>通常可以使用调试器检测栈的使用量。调试器可以展示一个如图3一样的界面用于表示栈使用量。调试器通常并不能检测到栈溢出，它只能检测到溢出发生后的信号。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180106162958135?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="Figure 3: Stack window in IAR Embedded Workbench"></p>
<h3 id="2-2-4-链接器计算栈需求量"><a href="#2-2-4-链接器计算栈需求量" class="headerlink" title="2.2.4 链接器计算栈需求量"></a>2.2.4 链接器计算栈需求量</h3><p>我们现在来看一看生成工具例如编译器和调试器是如何计算栈的最大需求量的。我们将使用 IAR编译器和链接器来进行说明。编译器可以产生重要的信息，链接器在正确的情况下可以精确计算出每一个根函数（不被别的函数调用，例如主函数）所需的最大栈空间。只有在应用程序中每个函数的栈使用信息都是精确时，最终的结果才是精确的。</p>
<p>通常来说，编译器可以为每一个 C函数生成栈使用信息，但在一些特殊情况下，你必须提供与栈有关的信息给它。例如，当应用程序中存在间接调用函数（使用函数指针）时，你必须为调用者提供一个可能被调用的函数列表。你可以通过在源码中添加预编译指令实现，如下述代码，也可以在链接时使用一个分离的栈使用控制文件实现。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">pragma</span> calls = fun1, fun2, fun3</span>
 func_arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当你使用栈使用控制文件时，你也可以为模块中没有栈使用量信息的函数添加栈使用量信息。当某些重要信息被遗漏时，链接器同样会产生警告，例如出现下面这些情况：</p>
<ul>
<li>有至少一个函数没有栈使用量信息</li>
<li>有至少一个间接调用没有提供可能被调用的函数列表</li>
<li>出现未知的间接调用，但至少有一个没有被调用的函数不能生成一个根函数。</li>
<li>应用程序中出现递归</li>
<li>出现调用的函数被声明为不可被调用</li>
</ul>
<p>当栈分析开启之后，栈使用情况说明将被添加进链接器的 map 文件，上面列出了每一个根函数通常的调用链，这会影响栈的最大使用量。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180106163022629?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="Figure 4"></p>
<p>将每一个根函数的栈使用量加在一起就是整个系统的栈最大使用量。在上面这个分析中，栈所需的最大使用量可能是 500+24+24+12+92+8+1144+8+24+32+152 = 2020 bytes。</p>
<p>需要记住的是，这种方法产生的是最坏情况下的结果。应用程序所需的栈实际上不可能需要这么多，不管是刻意执行或者巧合发生。</p>
<h1 id="三、可靠的堆区设计"><a href="#三、可靠的堆区设计" class="headerlink" title="三、可靠的堆区设计"></a>三、可靠的堆区设计</h1><h2 id="3-1-会出现什么错误"><a href="#3-1-会出现什么错误" class="headerlink" title="3.1 会出现什么错误"></a>3.1 会出现什么错误</h2><p>理解堆区的使用可以解决使用 malloc() 造成的内存错误。可以很容易的通过 malloc() 的返回值来检查状态，但是这样有些太迟了。这是一种严重的情况，因为很多系统没办法从中恢复，只能重新启动程序。由于堆区的动态性，高估堆区的使用量是很有必要的，但是分配太多则又导致内存资源的浪费。</p>
<p>在使用堆区时，可能会出现两种错误：</p>
<ul>
<li>堆区数据（变量和指针）被覆写</li>
<li>堆内部结构变量被修改</li>
</ul>
<p>在继续下文之前，让我们重新看一看动态内存分配的几个函数：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>申请 size 字节</li>
<li>返回一个申请好的内存块起始地址</li>
<li>不清除这个内存块中的内容</li>
<li>分配失败返回NULL</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">free</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>释放 p 指向的内存块</li>
<li>p 必须指向已经通过 <code>malloc()</code>，<code>calloc()</code>，<code>realloc()</code>申请成功的内存块</li>
<li>不能多次释放同一块内存</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">calloc</span><span class="token punctuation">(</span>size_t nelem<span class="token punctuation">,</span> size_t elsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>与 malloc() 的功能类似，申请 nelem 个 长度为 elsize 的连续空间</li>
<li>并清除申请成功的空间内容</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>和 malloc() 的功能类似</li>
<li>增加或减小一个已经申请成功的空间大小</li>
<li>返回的指针可能是一个新的地址</li>
</ul>
<p>C++ 中，也有类似的函数，如下：</p>
<ul>
<li>new operator - similar to malloc()</li>
<li>new[]</li>
<li>delete operator - similar to free()</li>
<li>delete[]</li>
</ul>
<p>有很多的方法可以实现动态内存分配。在今天使用最多的是 Dlmalloc(Doug Lea’s Memory Allocator)。Dlmalloc 被用于 Linux 和很多嵌入式开发工具之中。Dlmalloc 可以免费获取并且是开源的。</p>
<p>堆区的内部结构变量和申请的数据区通过应用程序穿插在一起。如果应用程序超出分配的数据区写数据，很有可能会修改堆的内部结构变量。</p>
<p>图5是一个堆区内部结构变量和分配的数据区交错分布的一个示意图。从图中可以明显看出，若应用程序写的数据超出分配的数据区，则堆区内部变量一定会被错误的修改。</p>
<p>计算堆区需要的内存空间是一个值得重视的问题。计算的方法令人生厌，因此很多设计者都采用试错的方法，即找到一个能使系统正常运行所需的做小堆空间，之后在这个基础上多分配50%空间。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180106163057723?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="Figure 5"></p>
<h2 id="3-2-预防堆区错误"><a href="#3-2-预防堆区错误" class="headerlink" title="3.2 预防堆区错误"></a>3.2 预防堆区错误</h2><p>这有一些程序员和代码审阅者都需要知道的常见错误，这可以尽量避免发布的产品中出现堆区错误。</p>
<ul>
<li><p>初始化错误</p>
<p>未初始化的全局变量始终都被初始化为0。这个众所周知的事实会让我们很容易假定在堆区也一样。Malloc()，realloc() 和 C++ new 都不对分配的空间初始化的。有一个 malloc() 的变种函数 calloc() 是对分配空间的数据进行清 0 操作的。在 C++ 中使用 new，会调用对应的构造函数，所以请确保对每个元素执行了初始化操作。</p>
</li>
<li><p>错误地区分实例和数组实例</p>
<p>C++ 对实例和实例数组有不同的操作符，new 和 delete 用于实例，new[] 和 delete[] 用于数组。</p>
</li>
<li><p>向已被释放的空间写入数据</p>
<p>这可能会导致堆区内部结构变量被修改，或是写入的数据之后被合理分配的数据空间内容所覆盖。不论是哪一种情况，都很难被捕获。</p>
</li>
<li><p>检查返回值错误</p>
<p>malloc()，realloc()，calloc()在空间不足时都会返回 NULL。出现这种情况时，桌面系统会产生一个内存空间不足的错误，因此在开发时可以很容易的检测到。嵌入式系统可能会从0地址开始编码，并且有一些特殊的情况。如果你的 MCU 具有内存保护单元，你可以将其设置为当程序试图向只读区域写入数据是产生一个存储保护错误。</p>
</li>
<li><p>多次释放同一块内存区域</p>
<p>这将损坏堆区内部结构变量，并且这很难被检测到。</p>
</li>
<li><p>写入的数据超出了分配的空间</p>
<p>这将损坏堆区内部结构变量，并且这很难被检测到。</p>
</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20180106163116174?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="Figure 6"></p>
<p>后面的三种错误也可以容易检测到，前提是你将标准 malloc()，free()或相关函数操作的数据空间做一个封装。封装意味着你需要申请一些额外的数据空间来存储用于校验的信息。关于封装的结构图如图6所示。顶部的特殊数值区域被用于检错，并且在释放数据空间时用于校验。在数据区域下方的 size 区域，用于释放封装区时找到特殊数值。这样的封装会对每一次分配的数据区增加8字节空间，这对于大部分的应用程序来说都是可以接受的。下面有一个例子展示了如何修改 C++ 中全局的 new 和 delete 操作符。这个例子可以处理申请的数据空间没有及时释放的错误。在一些应用程序中，这可能不是什么问题。在这种情况下，封装必须保持一个分配数据区的列表，并且周期性地检查其是否正确。这种实现所带来的开销并不如其听上去的那么多，因为大部分的嵌入式系统仅使用少量的动态内存，并且限制分配列表在一个合理的范围。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> MAGIC_NUMBER 0xefdcba98</span>
uint32_t myMallocMaxMem<span class="token punctuation">;</span>


<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">MyMalloc</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint8_t <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>p_end<span class="token punctuation">;</span>
  <span class="token keyword">static</span> uint8_t<span class="token operator">*</span> mLow <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xffffffff</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* lowest address 
returned by
                                                  malloc() */</span>
  <span class="token keyword">static</span> uint8_t<span class="token operator">*</span> mHigh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* highest address + data returned by 
malloc() */</span>
  bytes <span class="token operator">=</span> <span class="token punctuation">(</span>bytes <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ensure alignment for magic number */</span>
  p <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>bytes <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* add 2x32-bit for size and magic 
number */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* out of memory */</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> bytes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* remember size */</span>
  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> MAGIC_NUMBER<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* write magic number 
after
                                                   user allocation */</span>
  <span class="token comment" spellcheck="true">/* crude method of estimating maximum used size since application 
start */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> mLow<span class="token punctuation">)</span> mLow <span class="token operator">=</span> p<span class="token punctuation">;</span>
  p_end <span class="token operator">=</span> p <span class="token operator">+</span> bytes <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p_end <span class="token operator">></span> mHigh<span class="token punctuation">)</span> mHigh <span class="token operator">=</span> p_end<span class="token punctuation">;</span>
  myMallocMaxMem <span class="token operator">=</span> mHigh <span class="token operator">-</span> mLow<span class="token punctuation">;</span>
  <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* allocated area starts after size */</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">MyFree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> vp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint8_t<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>vp <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> bytes <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">/* check that magic number is not corrupted */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> MAGIC_NUMBER<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* error: data overflow or freeing already freed memory */</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* remove magic number to be 
able to
                                        detect freeing already freed memory */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span>
<span class="token comment" spellcheck="true">// global override of operator new, delete, new[] and delete[]</span>
<span class="token keyword">void</span><span class="token operator">*</span> operator <span class="token function">new</span> <span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">MyMalloc</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token keyword">void</span> operator <span class="token function">delete</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">MyFree</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-3-如何设置堆的大小"><a href="#3-3-如何设置堆的大小" class="headerlink" title="3.3 如何设置堆的大小"></a>3.3 如何设置堆的大小</h2><p>我们如何确定程序所需的堆空间的最小值？由于程序动态运行并且可能出现碎片，因此这个问题的答案是非常重要的。在这里我们推荐的方法是在程序动态分配内存尽可能多的占满堆空间的情况下去测试应用程序。从一个小内存反复测试可能出现的碎片带来的影响是非常有必要的。测试完成后，出现的堆的最大使用量可以考虑为实际的堆大小。依据具体的应用程序特点，应考虑留出 25%~100% 的余量。</p>
<p>桌面系统中，通过实现 sbrk() ，堆的最大使用量可以从 malloc_max_footprint() 得到。嵌入式系统并不实现 sbrk()，内存分配器通常只在一块内存上进行分配。因此 malloc_max_footprint() 函数是没用的，它仅仅返回整个 heap 的大小。一个解决方案就是在每次调用 malloc() 后，调用 mallinfo()，例如之前提到的封装的例子，或者是计算分配空间的总大小。Mallinfo()的计算非常密集，可能会对性能产生影响。一个更好的方法是记录分配区域距离的最大值。这很容易完成，并且如封装示例中展示的那样；最大值记录在变量 myMallocMaxMem 中。这种方法仅在堆区是一块连续的内存空间时有用。</p>
<h1 id="四、结论"><a href="#四、结论" class="headerlink" title="四、结论"></a>四、结论</h1><p>设置合理的堆栈大小对于一个安全稳定的嵌入式系统来说是非常重要的。虽然计算堆栈所需的内存空间大小是非常复杂和困难的，但是有大量有用的工具和方法可以被使用。为了在发布的产品中不出现堆栈溢出情况，在开发阶段付出再多的时间和金钱用于计算都是值得的。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><ul>
<li>1、Nigel Jones, blog posts at embeddedgurus.com, 2007 and 2009</li>
<li>2、John Regehr ,“Say no to stack overflow”, EE Times Design, 2004</li>
<li>3、Carnegie Mellon University , “Secure Coding in C and C++, Module 4, Dynamic Memory Management”, 2010</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nexus5 安装 Gapps]]></title>
      <url>https://blog.cyang.tech/2018/01/05/Nexus5%20%E5%AE%89%E8%A3%85Gapps/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Nexus5的第三方ROM非常多，这些第三方ROM一般都不带有某种服务（你懂就好）。一般可通过刷入OpenGapps项目提供的插件包来实现。</p>
<p>目前使用的魔趣ROM，刷机完成后，system分区已经被使用了93%，Nexus5的 system分区约为1G，这就导致了连体积最小的 OpenGapps pico包都无法安装。返回错误70，表示没有足够的空间安装文件。</p>
<a id="more"></a>
<h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><p>查看log文件，这个文件在sdcard分区根目录。可看见如下内容，说明了要安装这个项目至少还需要多少的空间。我这里是还需要大约50M。</p>
<pre class="line-numbers language-c"><code class="language-c">         Total System <span class="token function">Size</span> <span class="token punctuation">(</span>KB<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1033516</span>
         Used System <span class="token function">Space</span> <span class="token punctuation">(</span>KB<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">961276</span>
        Current Free <span class="token function">Space</span> <span class="token punctuation">(</span>KB<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">72240</span>
 Additional Space <span class="token function">Required</span> <span class="token punctuation">(</span>KB<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">50744</span>   <span class="token operator">&lt;&lt;</span> See Calculations Below
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>了解了这一点后，下一步就是精简系统了。主要的方法是删除一些预装但是又不怎么用的软件。魔趣本身已经是非常精简的系统了，没有什么第三方应用，可以优化减小的空间不大，但是50M找一找也还是可以的。</p>
<p>根据<a href="https://bbs.mokeedev.com/t/topic/151" target="_blank" rel="external">魔趣论坛</a>给出的可以删除的系统软件来看，我删除了谷歌国际输入法（33M）,宙斯盾，AudioFX，Email等几个软件。安装所需的50M空间马上就富余出来了。</p>
<p>删除系统软件的方法就是获取ROOT权限以后，使用类似RE管理器之类的软件，进入system分区，找到程序的路径，将整个文件夹删除，重启就好。一般系统预装程序在如下两个路径可以找到：</p>
<pre><code>/system/priv-app/Aegis
/system/app
</code></pre><p>如果是后装的软件，一般是在<code>/data/app</code>路径下。</p>
<p>使用这个方法精简系统，能够满足OpenGapps 最轻量的pico包成功刷入某种服务就好。这个轻量包是非常精简的，除了基础的组件外只有一个play商店。其他的全家桶应用都可以从这个商店下载后安装，并不影响。其实，这个轻量包中，有个20几M的TTL文本转语音是不常用的，可以在安装后删除，以节省system分区的空间。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IAR DLIB Library Heap Usage Statistics IAR Heap 分析]]></title>
      <url>https://blog.cyang.tech/2018/01/03/IAR%20heap%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>翻译自 <a href="https://www.iar.com/support/tech-notes/general/iar-dlib-library-heap-usage-statistics/" target="_blank" rel="external">IAR Technical Note 28545 《IAR DLIB Library heap usage statistics》</a> update 2017/9/22</p>
</blockquote>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>关于堆的描述在《IAR C/C++ Development Guide for ARM》的 Dynamic memory on the heap 一章中。本技术手册仅描述在应用程序中如何统计堆的使用量。通过跟踪 malloc 或类似函数使用的内存总量来实现。</p>
<a id="more"></a>
<h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>在 IAR Embedded Workbench for ARM 6.60 及其以后的版本中，你可以使用如下函数来收集 heap 的使用量：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">__iar_dlmallinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果想要一个简单的输出示例，调用如下函数：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">__iar_dlmalloc_stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个函数的输出示例如下：</p>
<pre class="line-numbers language-c"><code class="language-c">max system bytes <span class="token operator">=</span>     <span class="token number">2048</span>
system bytes     <span class="token operator">=</span>     <span class="token number">2048</span>
in use bytes     <span class="token operator">=</span>       <span class="token number">16</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>你可以在IAR安装目录下的  <code>arm\src\lib\dlib\heap\dlmalloc.c</code> 和 <code>arm\src\lib\dlib\heap\dlmalloc_stat.c</code> 文件中找到上述函数的声明和定义。如果是IAR for ARM 8.10 以前的版本，这两个文件应该在 arm\src\lib 目录下。</p>
<p>为了能够调用这些函数，你需要包含头文件  mallocstats.h 。你可以在<a href="https://www.iar.com/contentassets/680ee3f178b14736acaadc62549b2977/mallocstats_test.zip" target="_blank" rel="external">这里</a>下载一个 zip 文件，里面有这个头文件和一个 main_test.c 文件，用于演示如何调用上述函数。</p>
<h1 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h1><p>对于IAR Embedded Workbench for ARM 6.60 以前的版本中，你必须将 arm\src\dlmalloc.c 加入到工程中，并且设置宏 NO_MALLINFO 和 NO_MALLOC_STATS 为 0 。注意，你需要将这个文件拷贝到你的项目目录下进行修改。并且，如果是在 C++ 工程中，你需要使用 C编译器 来编译这个文件。</p>
<h1 id="堆最大使用量"><a href="#堆最大使用量" class="headerlink" title="堆最大使用量"></a>堆最大使用量</h1><p>以下内容摘自文章《Mastering stack and heap for system reliability》的如何设置堆大小一节。</p>
<blockquote>
<p>桌面系统中，通过实现 sbrk() ，堆的最大使用量可以从 malloc_max_footprint() 得到。嵌入式系统并不实现 sbrk()，内存分配器通常只在一块内存上进行分配。因此 malloc_max_footprint() 函数是没用的，它仅仅返回整个 heap 的大小。</p>
</blockquote>
<p>IAR Embedded Workbench 并不实现 sbrk()。</p>
<p>在这篇文章中提到了一些关于如何计算程序使用的 heap 大小的方法和技巧。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>本技术手册介绍了如何在应用程序中统计 heap 的使用量。</p>
<p>所有产品名称均为其各自所有者的商标或注册商标。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>如下是一个简单的函数，调用这个函数可以显示当前的 heap 消耗：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">heap_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> mallinfo m<span class="token punctuation">;</span>
    m <span class="token operator">=</span> <span class="token function">__iar_dlmallinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"total free space = %u, %u k\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>fordblks<span class="token punctuation">,</span> m<span class="token punctuation">.</span>fordblks<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__iar_dlmalloc_stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果如下：共分配 112k heap 空间，应用程序不断申请，最终仅剩余 15k 左右。之后应用程序结束，开始一步步释放申请的空间，可用的 heap 空间也随着释放开始增加。最终全部释放，112k heap 均可被重新使用。</p>
<pre><code>·some code·
---------------------------
total free space      = 16104 15 k
max system bytes      =     114688
system bytes          =     114688
in use bytes          =      98584
1- total free space   = 16104 15 k
2- total free space   = 16168 15 k
3- total free space   = 58640 57 k
4- total free space   = 62040 60 k
5.0- total free space = 74792 73 k
5.0- total free space = 74792 73 k
5.1- total free space = 74792 73 k
5.2- total free space = 83064 81 k
5.3- total free space = 91272 89 k
5.4- total free space = 114688 112 k
5- total free space   = 114688 112 k
---------------------------
total free space = 114688 112 k
max system bytes =     114688
system bytes     =     114688
in use bytes     =          0
decode end!
0:0:0
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 USB无法连接电脑]]></title>
      <url>https://blog.cyang.tech/2017/12/06/STM32%20USB%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/20171213122640655?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h1><p>在调试 STM32 USB device MSC 功能时，使用官方提供的库和示例项目，电脑可以正确识别设备，也可以正常操作。但是将 USB 部分的代码移植到自己的工程后，发现电脑无法正确识别设备，有时会在右下角显示无法识别设备。</p>
<a id="more"></a>
<h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><p>在main.c中添加 hal_delay() 函数的实现方式。</p>
<p>在默认的模板工程里，一般使用如下的方式实现延迟函数。</p>
<pre class="line-numbers language-c"><code class="language-c">
__weak uint32_t <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> uwTick<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__weak <span class="token keyword">void</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span>__IO uint32_t Delay<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint32_t tickstart <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>
  tickstart <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Delay<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而在 USB 项目中，需要使用如下的方式实现延时函数。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span>__IO uint32_t Delay<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>Delay<span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span> SysTick_CTRL_COUNTFLAG_Msk<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
      Delay<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两种方式都可以实现基本的延时功能，都是使用的 SysTick 定时器来实现，也都是使用 <code>while()</code> 来进行条件判断，条件不满足，即计时到了指定的延时后退出 <code>while()</code> 。区别在于，第一种方式，进行条件判断的变量 <code>uwTick</code> 在 SysTick 的中断函数中进行加一操作，即如下代码：</p>
<pre class="line-numbers language-c"><code class="language-c">__weak <span class="token keyword">void</span> <span class="token function">HAL_IncTick</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uwTick<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">HAL_IncTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而第二种方式，进行 <code>while()</code> 条件判断的变量 <code>Delay</code> 是不依赖于 SysTick 中断函数进行改变的，而是直接在这个函数中进行判断，等待寄存器数值改变，延时 1ms 后，对 <code>Delay</code> 进行减一操作。</p>
<p>默认的实现方式依赖于 <code>SysTick</code> 中断函数<code>void SysTick_Handler(void)</code>，而在使用 USB 功能时，USB的操作本身就是需要在中断函数 <code>void OTG_FS_IRQHandler(void)</code> 中进行的。可能由于对不同中断函数的处理，导致了时间上的错误，从而电脑无法正确进行枚举操作。</p>
<p>USB 部分是在 <code>usbd_conf.c</code> 文件中的 <code>void USBD_LL_Delay(uint32_t Delay)</code> 函数中进行延时函数的调用的，如下所示：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">USBD_LL_Delay</span><span class="token punctuation">(</span>uint32_t Delay<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">HAL_Delay</span><span class="token punctuation">(</span>Delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而且在底层的 USB 库中，也有直接调用到<code>hal_delay</code>的，如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20171213122640655?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="2018-1-3修改"><a href="#2018-1-3修改" class="headerlink" title="2018.1.3修改"></a>2018.1.3修改</h1><p>后来发现好像不是这个问题，不这样修改也可以连接。讲道理 SysTick 的中断优先等级比 USB 的高，因此应该是不会受影响的。可是当时对比了两个工程的代码，好像也就这点区别。不过在官方库中，都是使用第二种方式的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派内核升级的三种方式]]></title>
      <url>https://blog.cyang.tech/2017/10/28/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/20171022222728275?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>树莓派使用的镜像比较旧了，可以通过三种方式进行升级。一种是本地下载编译升级，即Local build，还有一种采用交叉编译，第三种最简单，输入一条命令就可以升级。<br>下面主要讲第一种方式。</p>
<a id="more"></a>
<h1 id="二、升级过程"><a href="#二、升级过程" class="headerlink" title="二、升级过程"></a>二、升级过程</h1><ul>
<li>1、目前的内核版本，使用 <code>uname -a</code> 查看<br><img src="http://p7tst3obo.bkt.clouddn.com/20171022222513419?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>2、使用 <code>sudo apt-get install git bc</code> 安装必备软件</li>
<li>3、使用 <code>git clone --depth=1 https://github.com/raspberrypi/linux</code> 下载最新内核</li>
<li><p>4、使用如下命令进行编译前配置</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> linux
KERNEL<span class="token operator">=</span>kernel7
<span class="token function">make</span> bcm2709_defconfig
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20171022222728275?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>5、make，共有三个东西需要make,这个过程会花费很少时间，同时为了避免出错，可以分别make.</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j4 zImage
<span class="token function">make</span> -j4 modules
<span class="token function">make</span> -j4 dtbs
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20171022222811500?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li>6、执行 <code>sudo make modules_install</code> 进行安装</li>
<li><p>7、依次使用如下命令拷贝</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm/boot/dts/*.dtb /boot/
<span class="token function">sudo</span> <span class="token function">cp</span> arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
<span class="token function">sudo</span> <span class="token function">cp</span> arch/arm/boot/dts/overlays/README /boot/overlays/
<span class="token function">sudo</span> <span class="token function">cp</span> arch/arm/boot/zImage /boot/<span class="token variable">$KERNEL</span>.img
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20171022222845178?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>8、执行完上述步骤，不出错的话，重启后，内核应该就升级成功了。</p>
</li>
</ul>
<h1 id="三、升级情况"><a href="#三、升级情况" class="headerlink" title="三、升级情况"></a>三、升级情况</h1><p>make的过程非常旧，如果不加参数 <code>-j4</code> 的话，编译需要好几个小时，加上参数使用 4核同时编译，编译速度明显加快。时间如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j4 zImage      34min
<span class="token function">make</span> -j4 modules     66min 
<span class="token function">make</span> -j4 dtbs        <span class="token operator">&lt;</span>1min
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>除去两个编译过程特别耗时外，其他的指令都很快完成。</p>
<h1 id="四、错误及解决方法"><a href="#四、错误及解决方法" class="headerlink" title="四、错误及解决方法"></a>四、错误及解决方法</h1><h2 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h2><p>如上执行完了所有步骤，并没有那一步出现错误。执行完步骤后查看版本号是没有变化的，重启后就无法网卡灯不闪烁，路由器看不到树莓派连接，SSH自然登陆不上。没有显示器，因此看不出系统是否启动，感觉应该是没有。</p>
<p>目前不知道是什么原因导致的。升级完成后，/boot目录下多了几个.dts文件，删除后试了不行。最新版的树莓派官方系统默认不开启SSH，需要在/boot目录下手动添加一个名为<code>ssh</code>的空白文件，添加了也不行。</p>
<p>拷贝升级前的/boot文件夹内容进行替换后，可以连上树莓派，查看版本号并没有更新。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>出现上面这个情况的原因是树莓派无法boot，bootbin和升级后的内核并不兼容，也就是说原有的旧的bootbin不能boot新的内核。</p>
<p>可以使用新版本的固件文件替换。代码在树莓派github仓库的firmware项目下。具体的替换有三个，如下：</p>
<pre><code>bootcode.bin
fixup.dat
start.elf
</code></pre><p>将新版本的这三个文件拷贝到/boot目录下替换掉原有的文件，便可以启动了。</p>
<h1 id="五、第二种方式"><a href="#五、第二种方式" class="headerlink" title="五、第二种方式"></a>五、第二种方式</h1><p>第二种方式是使用的交叉编译，宿主机是搭建在VM虚拟机里的一个ubuntu。具体的步骤可以看官网的文档，交叉编译的工具在树莓派github仓库tools项目中。</p>
<p>编译的原理都差不多，也可以使用menuconfig来自定义编译的内核。由于虚拟机的ubuntu也仅仅只分配了一个CPU核，实际的编译效果和树莓派四核编译时间虽有减少，但也不是很多。</p>
<p>编译完成之后见内存卡插入电脑，挂载进ubuntu里，拷贝新编译好的内核和模块进去，便可。若出现不开机的情况，和上面提到的错误类型是一致的。也就是固件和内核不兼容，比如说我这里使用内核4.1，升级到最新的内核4.9之后就出现这个问题，同时升级固件就不会。</p>
<h1 id="六、第三种方式"><a href="#六、第三种方式" class="headerlink" title="六、第三种方式"></a>六、第三种方式</h1><p>使用命令升级，最简单也不会出错。</p>
<pre><code>sudo apt-get install --reinstall raspberrypi-bootloader raspberrypi-kernel
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[电脑使用模拟器玩手机游戏]]></title>
      <url>https://blog.cyang.tech/2017/10/16/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%8E%A9%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/township.png" alt=""></p>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>我玩过的游戏并不少，坚持玩下来的只有一个养成类游戏《梦想小镇》，英文名township。虽说玩了也有好几年了，但基本上是玩一段时间就卸载，过很久又重新下载开始玩。好在这个游戏可以使用脸书账号备份，因此进度没丢。手机屏幕小，玩起来视野比较小，在电脑上鼠标玩起来也会比较爽。</p>
<a id="more"></a>
<h1 id="二、模拟器"><a href="#二、模拟器" class="headerlink" title="二、模拟器"></a>二、模拟器</h1><p>模拟器使用的是<a href="http://mumu.163.com/fab/win2.html" target="_blank" rel="external">MuMu模拟器</a>。也没用过别的模拟器，因此没有对比，不过感觉这个模拟器还是挺不错的，可以安装谷歌play。不过，如果要登陆Google账号，打开Google play的话，你需要知道怎么科学上网才行。</p>
<p>下面是一些截图：</p>
<ul>
<li><p>1、模拟器启动<br><img src="http://p7tst3obo.bkt.clouddn.com/20171016213837037?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2 、安装谷歌市场<br><img src="http://p7tst3obo.bkt.clouddn.com/20171016213934464?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、模拟器桌面<br><img src="http://p7tst3obo.bkt.clouddn.com/20171016214009211?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、township游戏<br><img src="http://p7tst3obo.bkt.clouddn.com/20171016214055920?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>5、游戏界面<br><img src="http://p7tst3obo.bkt.clouddn.com/20171016214123405?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h1><ul>
<li><p>1、科学上网使用的<a href="https://www.sockscap64.com/sstap/" target="_blank" rel="external">软件</a><br><img src="http://p7tst3obo.bkt.clouddn.com/20171016214319094?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、可以通过<a href="https://apkpure.com/cn/" target="_blank" rel="external">apkpure</a>下载谷歌市场的软件<br><img src="http://p7tst3obo.bkt.clouddn.com/20171016214338352?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 定时器输入捕获实现红外遥控数据接收]]></title>
      <url>https://blog.cyang.tech/2017/09/11/IR_Timer_capture/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/IR_Tim_Capture.png" alt="这里写图片描述"></p>
<blockquote>
<p>之前已经写过了一个使用定时器普通计时功能来识别红外遥控数据的<a href="http://cyang.tech/2017/08/09/IR_Timer/" target="_blank" rel="external">文章</a>。本次是使用定时器输入捕获来实现，这种方法比起定时器普通计数来说要更加复杂一些，不过效果会更好。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h1><h2 id="1、红外发射协议"><a href="#1、红外发射协议" class="headerlink" title="1、红外发射协议"></a>1、红外发射协议</h2><ul>
<li>红外发射协议已经在之前的<a href="http://cyang.tech/2017/08/09/IR_Timer/" target="_blank" rel="external">文章</a>中写过，在此就不赘述。</li>
</ul>
<h2 id="2、定时器计数和输入捕获"><a href="#2、定时器计数和输入捕获" class="headerlink" title="2、定时器计数和输入捕获"></a>2、定时器计数和输入捕获</h2><ul>
<li><p>定时器就是按照一个特定的频率对计数值进行加一或减一操作，当数值溢出时则产生一个标志或中断。</p>
</li>
<li><p>定时器的输入捕获就是可以测量输入信号的脉冲宽度。</p>
</li>
<li><p>本次就是通过普通计数和输入捕获的结合来实现的。</p>
</li>
</ul>
<h2 id="3、实现方法"><a href="#3、实现方法" class="headerlink" title="3、实现方法"></a>3、实现方法</h2><ul>
<li>利用定时器记录输入信号高脉冲的时间，通过该时间来判断数据是否是同步头信息、数据 1 或者数据 0。</li>
</ul>
<h1 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h1><h2 id="1、配置定时器2输入捕获通道"><a href="#1、配置定时器2输入捕获通道" class="headerlink" title="1、配置定时器2输入捕获通道"></a>1、配置定时器2输入捕获通道</h2><ul>
<li><p>示例代码中使用 PA1 管脚，配置为上拉输入模式，复用功能为定时器2的通道2。</p>
</li>
<li><p>定时器采用普通定时器，定时器2，该定时器具有输入捕获功能。</p>
</li>
<li><p>配置定时器的两种工作模式，一个是普通计数器<code>TIM_TimeBaseInit</code>，一个是输入捕获模式<code>TIM_ICInit</code>。</p>
</li>
<li><p>配置定时器2的中断源，有两个中断源，一个是更新中断<code>TIM_IT_Update</code>，一个是输入捕获中断<code>TIM_IT_CC2</code>。</p>
</li>
<li><p>配置代码如下:</p>
</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*
* Ir input pin
* mode:floating input
* pin: PA1
* GPIO_AF: TIM2_CH2
*/</span>
<span class="token keyword">void</span> <span class="token function">Ir_Pin_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>

    <span class="token function">GPIO_PinAFConfig</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_PinSource1<span class="token punctuation">,</span>GPIO_AF_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin  <span class="token operator">=</span>  GPIO_Pin_1<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//output 1</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//PA1 TIM2_CH2</span>
<span class="token comment" spellcheck="true">//使用GPIO输入捕获实现红外接收</span>
<span class="token keyword">void</span> <span class="token function">Remote_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    NVIC_InitTypeDef                NVIC_InitStructure<span class="token punctuation">;</span>
    TIM_TimeBaseInitTypeDef         TIM_TimeBaseStructure<span class="token punctuation">;</span>
    TIM_ICInitTypeDef               TIM_ICInitStructure<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*使能TIM1时钟,默认时钟源为PCLK1(PCLK1未分频时不倍频,否则由PCLK1倍频输出),可选其它时钟源*/</span>
    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">Ir_Pin_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token operator">|</span>TIM_IT_CC2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除中断和捕获标志位</span>

    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设定计数器自动重装值 最大10ms溢出</span>
    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> <span class="token number">480</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//预分频器,0.1M的计数频率,10us加1.</span>
    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>
    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>
    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据指定的参数初始化TIMx</span>

    TIM_ICInitStructure<span class="token punctuation">.</span>TIM_Channel <span class="token operator">=</span> TIM_Channel_2<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 选择输入端 IC2映射到TI2上</span>
    TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICPolarity <span class="token operator">=</span> TIM_ICPolarity_Rising<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//上升沿捕获</span>
    TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICSelection <span class="token operator">=</span> TIM_ICSelection_DirectTI<span class="token punctuation">;</span>
    TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICPrescaler <span class="token operator">=</span> TIM_ICPSC_DIV1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//配置输入分频,不分频</span>
    TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICFilter <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IC4F=0011 配置输入滤波器 8个定时器时钟周期滤波</span>
    <span class="token function">TIM_ICInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化定时器输入捕获通道</span>

    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM2_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM2中断</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//优先级0级</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>
    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>

    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token operator">|</span>TIM_IT_CC2<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//允许更新中断 ,允许CC2IE捕获中断</span>
    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能定时器2</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2、添加定时器2的中断服务函数"><a href="#2、添加定时器2的中断服务函数" class="headerlink" title="2、添加定时器2的中断服务函数"></a>2、添加定时器2的中断服务函数</h2><ul>
<li><p>使用了两种定时器中断源，分别为计数溢出中断和输入捕获中断。但是这两种方式触发中断的中断服务函数是同一个，即<code>void TIM2_IRQHandler(void)</code>。</p>
</li>
<li><p>定时器使用的是 TIM2 通用定时器，模式为向上计数。在该模式中，计数器从 0 计数到自动加载值 (TIMx_ARR计数器的内容) ，然后重新从 0 开始计数并且产生一个计数器溢出事件。定时器计数溢出的周期为10ms，该中断的产生说明在10ms内都没有输入捕获来清空计数值，也就是输入信号没有发生变化，说明 10ms 没有收到红外信号了，因此可判断为接收完成。</p>
</li>
<li><p>输入捕获是为了测量高电平的持续时间，因此采用上升沿触发中断，对计数值清零，切换下一次为下降沿触发；在下降沿触发中断时，记下计数值，切换下一次为上升沿触发。因此在下降沿记下的时间即为高电平的时序时间。记录高电平持续时间的原因，是因为红外信号在表示逻辑0、逻辑1时低电平的持续时间的相同的，而高电平的持续时间不同的。</p>
</li>
<li><p>示例代码如下：</p>
</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//遥控器接收状态</span>
<span class="token comment" spellcheck="true">//[7]:收到了引导码标志</span>
<span class="token comment" spellcheck="true">//[6]:得到了一个按键的所有信息</span>
<span class="token comment" spellcheck="true">//[5]:保留</span>
<span class="token comment" spellcheck="true">//[4]:标记上升沿是否已经被捕获</span>
<span class="token comment" spellcheck="true">//[3:0]:溢出计时器</span>
uint8_t  RmtSta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
uint16_t Dval<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//下降沿时计数器的值</span>
uint32_t RmtRec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//红外接收到的数据</span>
uint8_t  RmtCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//按键按下的次数</span>

<span class="token comment" spellcheck="true">//定时器2中断服务程序</span>
<span class="token keyword">void</span> <span class="token function">TIM2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//计数溢出中断</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//上次有数据被接收到了</span>
        <span class="token punctuation">{</span>
            RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//取消上升沿已经被捕获标记</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> RmtSta <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//电平没有变化后延时10ms，可标记已经完成一次按键的信息采集</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> RmtSta<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//若进入14，意味着定时器计数溢出了14次，即140ms</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清空引导标识</span>
                RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//清空计数器 ，意味着可以下一次的检测</span>

                <span class="token comment" spellcheck="true">//RmtCnt = 0;</span>
                <span class="token comment" spellcheck="true">//RmtSta &amp;= ~(1&lt;&lt;6);</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_CC2<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//输入捕获中断</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>RDATA<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">TIM_OC2PolarityConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_ICPolarity_Falling<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置下降沿触发捕获</span>
            <span class="token function">TIM_SetCounter</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清零计数值</span>
            RmtSta <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Dval <span class="token operator">=</span> <span class="token function">TIM_GetCapture2</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取计数值，该计数值代表高电平持续时间</span>
            <span class="token function">TIM_OC2PolarityConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_ICPolarity_Rising<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置上升沿触发</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Dval <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Dval <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        RmtRec <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        RmtRec <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Dval <span class="token operator">></span> <span class="token number">140</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Dval <span class="token operator">&lt;</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        RmtRec <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        RmtRec <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Dval <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Dval <span class="token operator">&lt;</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        RmtCnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重复码</span>
                        RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Dval <span class="token operator">></span> <span class="token number">420</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Dval <span class="token operator">&lt;</span> <span class="token number">470</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RmtSta <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示接收到同步头</span>
                    RmtCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清零按键次数</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token operator">|</span>TIM_IT_CC2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3、红外按键扫描函数"><a href="#3、红外按键扫描函数" class="headerlink" title="3、红外按键扫描函数"></a>3、红外按键扫描函数</h2><ul>
<li><p>该函数放在主循环中，轮训判断按键是否接收完成。如果接收完成则开始分析键值。</p>
</li>
<li><p>该函数返回一个16位的数值，其中低八位表示键值，高八位表示按下的次数，依次来分析长按键和短按键。这一点主要是通过红外协议中重复码的规定来实现的。</p>
</li>
<li><p>红外协议中规定，若按下一个键后没有放开，则会以 108ms 为一个周期发送重复码。重复码表现为2.25ms的高电平。</p>
</li>
<li><p>示例代码如下：</p>
</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*SystemKeybuf
*处理红外键盘
*返回值: keybuf
*   0xffff,没有任何按键按下
*   其他,按下的按键键值.
*   keybuf[15:8] : key cnt
*   keybuf[7:0]  : key code
*/</span>
uint16_t <span class="token function">Remote_Scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint16_t keybuf <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
    uint8_t sta <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    uint8_t t1<span class="token punctuation">,</span>t2<span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//得到一个按键的所有信息了</span>
    <span class="token punctuation">{</span>
        t1 <span class="token operator">=</span> RmtRec <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//得到地址码</span>
        t2 <span class="token operator">=</span> <span class="token punctuation">(</span>RmtRec <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到地址反码</span>
        <span class="token comment" spellcheck="true">//printf("rmtrec = %#x\n",RmtRec);</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token operator">~</span>t2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> REMOTE_ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检验遥控识别码(ID)及地址</span>
        <span class="token comment" spellcheck="true">//if(t1 == (uint8_t)~t2)//检验遥控识别码(ID)及地址</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//printf("t1 = %d\n",t1);</span>
            t1 <span class="token operator">=</span> RmtRec <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>
            t2 <span class="token operator">=</span> RmtRec<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token operator">~</span>t2<span class="token punctuation">)</span> sta <span class="token operator">=</span> t1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//键值正确</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sta <span class="token operator">!=</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按键数据正确</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>RmtCnt <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// short key</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// release</span>
                <span class="token punctuation">{</span>
                    keybuf <span class="token operator">=</span> RmtCnt<span class="token punctuation">;</span>
                    keybuf <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
                    keybuf <span class="token operator">|</span><span class="token operator">=</span> sta<span class="token punctuation">;</span>

                    RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除接收到有效按键标识</span>
                    RmtCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//清除按键次数计数器</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>RmtCnt <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// &amp;&amp; RmtCnt &lt; 15)  // long key</span>
            <span class="token punctuation">{</span>
                keybuf <span class="token operator">=</span> RmtCnt<span class="token punctuation">;</span>
                keybuf <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
                keybuf <span class="token operator">|</span><span class="token operator">=</span> sta<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>RmtCnt <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RmtCnt <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//每5次重复码处理一次按键 </span>
                <span class="token punctuation">{</span>
                    keybuf <span class="token operator">=</span> RmtCnt<span class="token punctuation">;</span>
                    keybuf <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
                    keybuf <span class="token operator">|</span><span class="token operator">=</span> sta<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token macro property">#<span class="token directive keyword">else</span></span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sta <span class="token operator">==</span> KEY_NEXT<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sta <span class="token operator">==</span> KEY_PREV<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sta <span class="token operator">==</span> KEY_MENU<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sta <span class="token operator">==</span> KEY_SELECT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//仅这四个按键支持连续键功能</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RmtCnt <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//每2次重复码处理一次按键</span>
                <span class="token punctuation">{</span>
                    keybuf <span class="token operator">=</span> RmtCnt<span class="token punctuation">;</span>
                    keybuf <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
                    keybuf <span class="token operator">|</span><span class="token operator">=</span> sta<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RmtSta <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// release</span>
                <span class="token punctuation">{</span>
                    RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除接收到有效按键标识</span>
                    RmtCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//清除按键次数计数器</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//长按键</span>
            <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//if((RmtSta &amp; 0x80) == 0)  //release ，并非等到按键释放才处理</span>
                <span class="token punctuation">{</span>
                    keybuf <span class="token operator">=</span> RmtCnt<span class="token punctuation">;</span>
                    keybuf <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
                    keybuf <span class="token operator">|</span><span class="token operator">=</span> sta<span class="token punctuation">;</span>

                    RmtSta <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除接收到有效按键标识</span>
                    RmtCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//清除按键次数计数器</span>

                    RmtRec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//清除接收值</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token macro property">#<span class="token directive keyword">endif</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> keybuf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4、主函数"><a href="#4、主函数" class="headerlink" title="4、主函数"></a>4、主函数</h2><ul>
<li><p>在 main 函数中，对 IO 口和 定时器进行初始化。</p>
</li>
<li><p>主循环中，通过判断接收完成标志位，对接收完成的按键控制码进行打印。</p>
</li>
<li><p><code>SystemKeyHandle()</code>函数处理每一个按键的操作逻辑。</p>
</li>
<li><p>示例代码如下：</p>
</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint16_t SystemKeybuf<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment" spellcheck="true">//Ir Remote</span>
    <span class="token function">Remote_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        SystemKeybuf <span class="token operator">=</span> <span class="token function">Remote_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//红外按键扫描</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>SystemKeybuf <span class="token operator">!=</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果有按键未处理</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//main_printf("SystemKeyBuf = %#x\n",SystemKeybuf);</span>
            <span class="token function">SystemKeyHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            SystemKeybuf <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="三、演示"><a href="#三、演示" class="headerlink" title="三、演示"></a>三、演示</h1><p>如下图为串口打印出接收的红外按键值信息：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170911164650633?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>说明1：这篇文章所使用的方法主要参考自<a href="http://blog.csdn.net/qq_16255321/article/details/43602535" target="_blank" rel="external">这篇文章</a>，代码仅做了部分修改，并在源代码基础上添加了部分代码，用于实现连续键。</p>
<blockquote>
<p>本文档基于 STM32 F1 系列 MCU，固件库版本 3.5。其他 MCU 及固件库仅需要对库函数略作修改。</p>
<p><a href="http://blog.csdn.net/qq_16255321/article/details/43602535" target="_blank" rel="external">参考链接1：cortex_m3_stm32嵌入式学习笔记（二十三）：红外遥控实验（输入捕捉+解码）</a></p>
<p><a href="http://cyang.tech/2016/07/19/STM32%20%E7%BA%A2%E5%A4%96%E7%BA%BF%E5%AE%9E%E9%AA%8C/" target="_blank" rel="external">参考链接2：STM32 红外线实验</a></p>
<p><a href="http://cyang.tech/2017/08/09/IR_Timer/" target="_blank" rel="external">参考链接3：STM32 红外线实验</a></p>
<p><a href="http://cyang.tech/tags/STM32/" target="_blank" rel="external">更多关于 STM32 的文章</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Arduino 按键实验]]></title>
      <url>https://blog.cyang.tech/2017/08/19/Arduino%20Button/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、功能"><a href="#一、功能" class="headerlink" title="一、功能"></a>一、功能</h1><p>实现按键控制LED亮灭。按下点亮，再次按下熄灭。</p>
<h1 id="二、原理图"><a href="#二、原理图" class="headerlink" title="二、原理图"></a>二、原理图</h1><p><img src="http://p7tst3obo.bkt.clouddn.com/20170819195808163?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> ButtonState<span class="token punctuation">;</span>
<span class="token keyword">int</span> ButtonLastState<span class="token punctuation">;</span>
<span class="token keyword">int</span> ButtonCounter<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// put your setup code here, to run once:</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>INPUT_PULLUP<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// put your main code here, to run repeatedly:</span>
  ButtonState <span class="token operator">=</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>ButtonState <span class="token operator">!=</span> ButtonLastState<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ButtonState<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ButtonCounter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  ButtonLastState <span class="token operator">=</span> ButtonState<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ButtonCounter<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//Serial.println(ButtonCounter);</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="四、解析"><a href="#四、解析" class="headerlink" title="四、解析"></a>四、解析</h1><ul>
<li>1、开关通过一个数字接口连接到 arduino，端口配置为上拉输入。在默认情况下，端口电平为高，按键按下时，端口被拉低。</li>
<li>2、理想情况下，一次按键对应着一个下降沿，一段低电平，一个上升沿。程序通过<code>ButtonState</code>和<code>ButtonLastState</code>两个标志位来判断电平情况，通过这两个标志位实现了下降沿和上升沿进入第一个判断语句，即<code>if(ButtonLastState != ButtonState)</code>，只不过下降沿和上升沿所处理的操作不同，下降沿不做处理，仅打印一条语句，上升沿时候则代表按键被按下并且已经放开了，则对按键次数进行加一。</li>
<li>3、要实现，按下点亮，再次按下熄灭，只需要对按键次数进行模2操作。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 定时器实现红外遥控数据接收]]></title>
      <url>https://blog.cyang.tech/2017/08/09/IR_Timer/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/20170808231029615?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<h1 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h1><h2 id="1、红外发射协议"><a href="#1、红外发射协议" class="headerlink" title="1、红外发射协议"></a>1、红外发射协议</h2><ul>
<li><p>红外通信的协议有很多种。这个实验使用的是NEC协议。这个协议采用PWM的方法进行调制，利用脉冲宽度来表示 0 和 1 。</p>
</li>
<li><p>NEC 遥控指令的数据格式为：同步码头、地址码、地址反码、控制码、控制反码。同步码由一个 9ms 的低电平和一个 4.5ms 的高电平组成，地址码、地址反码、控制码、控制反码均是 8 位数据格式。按照低位在前，高位在后的顺序发送。采用反码是为了增加传输的可靠性。因此，每帧的数据为 32 位，包括地址码，地址反码，控制码，控制反码。反码可用于解码时进行校验比对。</p>
</li>
<li><p>NEC码的位定义：一个脉冲对应 560us 的连续载波，一个逻辑 1 传输需要 2.25ms（560us 脉冲+1680us 低电平），一个逻辑 0 的传输需要 1.125ms（560us 脉冲+560us 低电平）。而遥控接收头在收到脉冲的时候为低电平，在没有脉冲的时候为高电平，这样，<strong>在接收头端收到的信号为：逻辑 1 应该是 560us 低+1680us 高，逻辑 0 应该是 560us 低+560us 高。</strong></p>
<p> ​</p>
</li>
<li><p>红外数据的波形如下图：包括一个同步头和 32 帧数据。<br> <img src="http://p7tst3obo.bkt.clouddn.com/20170808230617825?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>下图可看出，同步头为 9ms 低电平加上 4.5ms 高电平，控制码为 8 个 0，控制反码为 8 个 1。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170808231029615?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h2 id="2、定时器计数"><a href="#2、定时器计数" class="headerlink" title="2、定时器计数"></a>2、定时器计数</h2><ul>
<li>定时器就是按照一个特定的频率对计数值进行加一或减一操作，当数值溢出时则产生一个标志或中断。这里是用定时器计数产生一个周期性的中断。</li>
</ul>
<h2 id="3、实现方法"><a href="#3、实现方法" class="headerlink" title="3、实现方法"></a>3、实现方法</h2><ul>
<li>利用定时器记录两个下降沿之间的时间，通过该时间判断是否是同步头信息、数据 1 或者数据 0。当检测到同步头，开始记录 32 个数据的时间值。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170808225212279?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h1><h2 id="1、配置-GPIO-口下降沿触发中断"><a href="#1、配置-GPIO-口下降沿触发中断" class="headerlink" title="1、配置 GPIO 口下降沿触发中断"></a>1、配置 GPIO 口下降沿触发中断</h2><ul>
<li><p>示例代码中使用 PA7 管脚，配置为上拉输入模式。</p>
</li>
<li><p>选择下降沿触发，是因为红外接收管默认情况下保持高电平，接收到数据时从高电平转变为低电平。</p>
</li>
<li><p>中断源选择为 <code>EXTI_Line7</code> ，在库函数中对该中断源定义的服务函数为 <code>EXTI9_5_IRQHandler()</code>，也就是说外部中断 5 到 9 是 共用一个中断服务函数的。</p>
</li>
<li><p>配置代码如下:</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">IR_Pin_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>
    EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span>
    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token operator">|</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>GPIO_Pin_7<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_IPU<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>GPIO_PortSourceGPIOA<span class="token punctuation">,</span> GPIO_PinSource7<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line<span class="token operator">=</span>EXTI_Line7<span class="token punctuation">;</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode<span class="token operator">=</span>EXTI_Mode_Interrupt<span class="token punctuation">;</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger<span class="token operator">=</span>EXTI_Trigger_Falling<span class="token punctuation">;</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd<span class="token operator">=</span>ENABLE<span class="token punctuation">;</span>
    <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> EXTI9_5_IRQn<span class="token punctuation">;</span> 
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  
    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="2、配置定时器计数值"><a href="#2、配置定时器计数值" class="headerlink" title="2、配置定时器计数值"></a>2、配置定时器计数值</h2><ul>
<li><p>定时器使用的是 TIM2 通用定时器，模式为向上计数。在该模式中，计数器从 0 计数到自动加载值 (TIMx_ARR计数器的内容) ，然后重新从 0 开始计数并且产生一个计数器溢出事件。 </p>
</li>
<li><p>示例函数接收两个参数，分别为预分频器的值和自动加载值。通过调整这两个参数，可以灵活地改变定时器的计数周期。例如在 TIM2 的默认时钟源 PCLK1 为96MHz时，使用语句 <code>Tim2_UPCount_Init(SystemCoreClock/1000000-1,100-1);  //0.1ms</code> 进行初始化，可以每 0.1ms 产生一次中断。</p>
</li>
<li><p>示例代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Tim2_UPCount_Init</span><span class="token punctuation">(</span>u16 Prescaler<span class="token punctuation">,</span>u16 Period<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TIM_TimeBaseInitTypeDef TIM_StructInit<span class="token punctuation">;</span>
    NVIC_InitTypeDef NVIC_StructInit<span class="token punctuation">;</span>

    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    TIM_StructInit<span class="token punctuation">.</span>TIM_Period<span class="token operator">=</span>Period<span class="token punctuation">;</span>
    TIM_StructInit<span class="token punctuation">.</span>TIM_Prescaler<span class="token operator">=</span>Prescaler<span class="token punctuation">;</span>
    TIM_StructInit<span class="token punctuation">.</span>TIM_ClockDivision<span class="token operator">=</span>TIM_CKD_DIV1<span class="token punctuation">;</span>
    TIM_StructInit<span class="token punctuation">.</span>TIM_CounterMode<span class="token operator">=</span>TIM_CounterMode_Up<span class="token punctuation">;</span>
    TIM_StructInit<span class="token punctuation">.</span>TIM_RepetitionCounter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_StructInit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>

    NVIC_StructInit<span class="token punctuation">.</span>NVIC_IRQChannel<span class="token operator">=</span>TIM2_IRQn<span class="token punctuation">;</span>
    NVIC_StructInit<span class="token punctuation">.</span>NVIC_IRQChannelCmd<span class="token operator">=</span>ENABLE<span class="token punctuation">;</span>
    NVIC_StructInit<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    NVIC_StructInit<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_StructInit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="3、定时器中断函数统计时间"><a href="#3、定时器中断函数统计时间" class="headerlink" title="3、定时器中断函数统计时间"></a>3、定时器中断函数统计时间</h2><ul>
<li><p>如上所说，定时器每 0.1ms 计数完成，产生中断，在中断函数中对标志位 <code>ucTim2Flag</code> 加 1，意味着时间过去了 0.1ms。</p>
</li>
<li><p>时间标志位原型为 <code>uint16_t ucTim2Flag;</code> 。</p>
</li>
<li><p>示例代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">TIM2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ucTim2Flag<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="4、GPIO-中断函数中接收-32-位数据"><a href="#4、GPIO-中断函数中接收-32-位数据" class="headerlink" title="4、GPIO 中断函数中接收 32 位数据"></a>4、GPIO 中断函数中接收 32 位数据</h2><ul>
<li><p>在下降沿触发的 IO 口中断函数中，需要实现统计两个下降沿之间的时间，并将其记录在数组中。</p>
</li>
<li><p>下降沿第一次触发时，清除当前定时器中的计数值，以便统计时间。之后每一次下降沿触发就记录下当前计数值，然后再对其清零。如果该时间在同步头的时间区间内，对索引进行清零，表示重新开始接收数据。</p>
</li>
<li><p>完整接收同步头和 32 个数据之后，表示接收完成。</p>
</li>
<li><p>示例代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c">uint8_t irdata<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//用于记录两个下降沿之间的时间</span>
bool receiveComplete<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收完成标志位</span>
uint8_t idx<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//用于索引接收到的数值</span>
bool startflag<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//表示开始接收</span>

<span class="token keyword">void</span> <span class="token function">EXTI9_5_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint16_t ir_time<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>startflag<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ir_time <span class="token operator">=</span> ucTim2Flag<span class="token punctuation">;</span>    
        <span class="token keyword">if</span><span class="token punctuation">(</span>ucTim2Flag <span class="token operator">&lt;</span> <span class="token number">150</span> <span class="token operator">&amp;&amp;</span> ucTim2Flag <span class="token operator">>=</span> <span class="token number">50</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 接收到同步头</span>
        <span class="token punctuation">{</span>
            idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组下标清零</span>
        <span class="token punctuation">}</span>

        irdata<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> ucTim2Flag<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取计数时间</span>
        ucTim2Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 清零计数时间，以便下次统计</span>
        idx<span class="token operator">++</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 接收到一个数据，索引加1</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">==</span><span class="token number">33</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 如果接收到33个数据，包括32位数和以一个同步头</span>
        <span class="token punctuation">{</span>
            idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            ucTim2Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            receiveComplete <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">// 下降沿第一次触发</span>
    <span class="token punctuation">{</span>
        idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        ucTim2Flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        startflag <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 清除中断标志</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h2 id="5、判断控制码值"><a href="#5、判断控制码值" class="headerlink" title="5、判断控制码值"></a>5、判断控制码值</h2><ul>
<li><p>由于中断函数中接收并记录下的数据是两个下降沿之间的时间，并不是红外所发送的数据。因此需要根据红外协议，对 32 个时间进行判断，从而获得红外真正发送的数据。</p>
</li>
<li><p>下面这个函数需要在红外完整接收数据后执行，可通过判断接收完成标志位 <code>receiveComplete</code>  来实现。</p>
</li>
<li><p>示例代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token function">Ir_Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//idx 从1 开始表示对同步头的时间不处理</span>
    uint8_t temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>irdata<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">>=</span><span class="token number">8</span> <span class="token operator">&amp;&amp;</span> irdata<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//表示 0</span>
            <span class="token punctuation">{</span>
                temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>irdata<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">>=</span><span class="token number">18</span> <span class="token operator">&amp;&amp;</span> irdata<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//表示 1</span>
            <span class="token punctuation">{</span>
                temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            remote_code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            remote_code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>
            idx<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> remote_code<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该数组中记录的是控制码，每个按键不一样</span>
    <span class="token comment" spellcheck="true">//for(idx=0; idx&lt;4; idx++)</span>
    <span class="token comment" spellcheck="true">//{</span>
    <span class="token comment" spellcheck="true">//    printf("remote_code[%d] = %#x\n",idx,remote_code[idx]);</span>
    <span class="token comment" spellcheck="true">//}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h2 id="6、主函数"><a href="#6、主函数" class="headerlink" title="6、主函数"></a>6、主函数</h2><ul>
<li><p>在 main 函数中，对 IO 口和 定时器进行初始化。</p>
</li>
<li><p>主循环中，通过判断接收完成标志位，对接收完成的按键控制码进行打印。</p>
</li>
<li><p>示例代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">IR_Pin_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Tim2_UPCount_Init</span><span class="token punctuation">(</span>SystemCoreClock<span class="token operator">/</span><span class="token number">1000000</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>repeatEnable<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            repeatEnable <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
            <span class="token function">Ir_Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"key_code = %#x\n"</span><span class="token punctuation">,</span>remote_code<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​</p>
</li>
</ul>
<h1 id="三、演示"><a href="#三、演示" class="headerlink" title="三、演示"></a>三、演示</h1><p>如下图为串口打印出接收的红外按键值信息：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170808225232539?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>说明1：这只是实现红外接收的其中一种方法，网上还有一种比较常见的方法是利用下降沿触发，在中断中进行延迟，判断高电平持续时间以此来判断信号类别。个人感觉这不是一种很好的方法，因为在中断中进行延时会导致主函数得不到及时的处理。</p>
<p>说明2：在调试时，不要在中断处理中加入过多无关语句，例如打印语句，这会导致结果出错。</p>
<blockquote>
<p>本文档基于 STM32 F1 系列 MCU，固件库版本 3.5。其他 MCU 及固件库仅需要对库函数略作修改。</p>
<p><a href="http://cyang.tech/2016/07/19/STM32%20%E7%BA%A2%E5%A4%96%E7%BA%BF%E5%AE%9E%E9%AA%8C/" target="_blank" rel="external">参考链接：STM32 红外线实验</a></p>
<p><a href="http://cyang.tech/tags/STM32/" target="_blank" rel="external">更多关于 STM32 的文章</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode Power of Three]]></title>
      <url>https://blog.cyang.tech/2017/08/01/leetcode%20power%20of%20three/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h1><p>leetcode 上有这么一道题,<a href="https://leetcode.com/problems/power-of-three/description/" target="_blank" rel="external">power of three.</a></p>
<p>题目如下：</p>
<blockquote>
<p>Given an integer, write a function to determine if it is a power of three.</p>
</blockquote>
<p>要求：</p>
<blockquote>
<p>Could you do it without using any loop / recursion?</p>
</blockquote>
<p>就是说给出一个数，判断该数是否是 3 的 n 次方。且最好不要使用循环或者迭代来实现。</p>
<a id="more"></a>
<h1 id="二、解法："><a href="#二、解法：" class="headerlink" title="二、解法："></a>二、解法：</h1><h2 id="1、方法一、"><a href="#1、方法一、" class="headerlink" title="1、方法一、"></a>1、方法一、</h2><p>使用最基本的循环判断，通过循环判断目标值是否可以对 3 进行整除。代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> false<span class="token punctuation">;</span>
      n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> true<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2、方法二、"><a href="#2、方法二、" class="headerlink" title="2、方法二、"></a>2、方法二、</h2><p>由于在 int（4字节）的范围内，3 最大的一个次方数为 3^19，即 1162261467，可用该数值对目标值进行取余操作，如果余数为 0，则说明目标值是一个 3 的某次方数。代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1162261467</span><span class="token operator">%</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token keyword">else</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3、方法三"><a href="#3、方法三" class="headerlink" title="3、方法三"></a>3、方法三</h2><p>通过对目标值取 3 的对数，判断该值是否为整数来判断。利用换底公式，<code>log3(n) = log10(n) / log10(3)</code>。利用<code>a-(int)a == 0</code> 来判断 a 是否为整数。代码如下：</p>
<pre><code>double res;
res = log10(n)/log10(3);
if(res- (int)res == 0)
    return true;
else
    return false;
</code></pre><p>三种解法的代码在 leetcode 网站的运行时间如下图：</p>
<ul>
<li>1、方法一<br><img src="http://p7tst3obo.bkt.clouddn.com/20170801215151913?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>2、方法二<br><img src="http://p7tst3obo.bkt.clouddn.com/20170801215159841?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>3、方法三<br><img src="http://p7tst3obo.bkt.clouddn.com/20170801215207349?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<p>可见，第二种最好，第一种次之，第三种最差。<br>类似的题目还有 power of two, power of four，使用上述三种方法略加修改即可。</p>
<h1 id="三、附录"><a href="#三、附录" class="headerlink" title="三、附录"></a>三、附录</h1><p>全部代码:</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*
*326. Power of Three
* three ways to solution this problem
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> solution 3</span>

bool <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token macro property">#<span class="token directive keyword">if</span> solution==1</span>
  <span class="token comment" spellcheck="true">//循环迭代</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  <span class="token macro property">#<span class="token directive keyword">elif</span> solution==2</span>
  <span class="token comment" spellcheck="true">//32位数中最大的3次方数</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1162261467</span><span class="token operator">%</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  <span class="token macro property">#<span class="token directive keyword">elif</span> solution==3</span>
  <span class="token comment" spellcheck="true">//对数换底公式</span>
  <span class="token comment" spellcheck="true">//使用 a-(int)a == 0; 来判断a是否为整数</span>
    <span class="token keyword">double</span> res<span class="token punctuation">;</span>
    res <span class="token operator">=</span> <span class="token function">log10</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  <span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4782968</span><span class="token punctuation">;</span>
    bool res <span class="token operator">=</span> false<span class="token punctuation">;</span>

    res <span class="token operator">=</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"res = %d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 BSRR BRR ODR 寄存器]]></title>
      <url>https://blog.cyang.tech/2017/08/01/STM32_BRSS_BSS/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h1><p>经常会看到类似如下的宏定义语句，用于对已经初始化后的 IO 口输出高、低电平。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SET_BL_HIGH()           GPIOA->BSRR=GPIO_Pin_0 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> SET_BL_LOW()            GPIOA->BRR=GPIO_Pin_0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其作用类似于如下两个库函数，</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIO_Typedef<span class="token operator">*</span> GPIOx， uint16_t GPIO_Pin<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIO_Typedef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> uint16_t GPIO_Pin<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<a id="more"></a>
<p>而且实际上这两个库函数就是通过修改BSRR，BRR寄存器的值来实现对 IO 口设置的。如下便是输出高电平的函数体：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> uint16_t GPIO_Pin<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* Check the parameters */</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_GPIO_ALL_PERIPH</span><span class="token punctuation">(</span>GPIOx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_GPIO_PIN</span><span class="token punctuation">(</span>GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  GPIOx<span class="token operator">-></span>BSRR <span class="token operator">=</span> GPIO_Pin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 因此，使用宏或者库函数本质上都是一样的。区别在于使用宏更快，而使用函数更灵活。</p>
<h1 id="二、解释"><a href="#二、解释" class="headerlink" title="二、解释"></a>二、解释</h1><p>BSRR 和 BRR 都是 STM32 系列 MCU 中 GPIO 的寄存器。 BSRR 称为端口位设置/清楚寄存器，BRR称为端口位清除寄存器。</p>
<p>BSRR 低 16 位用于设置 GPIO 口对应位输出高电平，高 16 位用于设置 GPIO 口对应位输出低电平。</p>
<p>BRR 低 16 位用于设置 GPIO 口对应位输出低电平。高 16 位为保留地址，读写无效。</p>
<p>所以理论上来讲，BRR 寄存器的功能和 BSRR 寄存器高 16 位的功能是一样的。也就是说，输出低电平的宏语句，可以有如下两种写法。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SET_BL_LOW()            GPIOA->BRR=GPIO_Pin_0</span>
等价于
<span class="token macro property">#<span class="token directive keyword">define</span> SET_BL_LOW()            GPIOA->BSRR=GPIO_Pin_0 &lt;&lt; 16</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这么来看的话，其实 BRR 寄存器是比较多余的。而实际上，在最新的 STM32F4 系列 MCU 的 GPIO 寄存器中，已经找不到 BRR 寄存器了，仅保留了 BSRR 寄存器用于实现端口输出高低电平。因此，在 STM32F4 系列 MCU 的库函数中，对 GPIO 口输出高低电平的函数为如下形式：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> uint16_t GPIO_Pin<span class="token punctuation">,</span> GPIO_PinState PinState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* Check the parameters */</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_GPIO_PIN</span><span class="token punctuation">(</span>GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_GPIO_PIN_ACTION</span><span class="token punctuation">(</span>PinState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>PinState <span class="token operator">!=</span> GPIO_PIN_RESET<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    GPIOx<span class="token operator">-></span>BSRR <span class="token operator">=</span> GPIO_Pin<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    GPIOx<span class="token operator">-></span>BSRR <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>GPIO_Pin <span class="token operator">&lt;&lt;</span> <span class="token number">16U</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可见，不管是输出高还是输出低，都是对 BSRR 寄存器的操作。</p>
<h1 id="三、BSRR、BRR、-ODR-之间的关系"><a href="#三、BSRR、BRR、-ODR-之间的关系" class="headerlink" title="三、BSRR、BRR、 ODR 之间的关系"></a>三、BSRR、BRR、 ODR 之间的关系</h1><p>配置 BSRR , BRR 是为了对端口输出进行配置，而 ODR 寄存器也是用于输出数据的寄存器，一个 ODR 寄存器控制了一组（16位）的 GPIO 输出。因此，对 ODR 进行修改也可以到达对 IO 口输出进行配置。</p>
<p>但是，由于对 ODR 寄存器的读写操作必须以 16 位的形式进行。因此，如果使用 ODR 改写数据以控制输出时，须采用“读-改-写”的形式进行。</p>
<p>假设需要对 GPIOA_Pin_6 输出高电平。采用改写 ODR 寄存器的方式时，使用“读-改-写”操作，代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c">uint32_t temp<span class="token punctuation">;</span>
temp <span class="token operator">=</span> GPIOA<span class="token operator">-></span>ODR<span class="token punctuation">;</span>
temp <span class="token operator">=</span> temp <span class="token operator">|</span> GPIO_Pin_6<span class="token punctuation">;</span>
GPIOA<span class="token operator">-></span>ODR <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而使用改写 BSRR 寄存器时，仅需要使用如下语句：</p>
<pre class="line-numbers language-c"><code class="language-c">GPIOA<span class="token operator">-></span>BSRR <span class="token operator">=</span> GPIO_Pin_6<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这是因为在修改 ODR 时，为了确保对端口 6 的修改不会影响到其他端口的输出，需要对端口的原始数据进行保存，之后再对端口 6 的值进行修改，最后再写入寄存器。而对 BSRR 的操作，是写 1 有效，写 0 不改变原状态，因此可以对端口 6 置 1，其他位保持为 0。BSRR 为 1 的位，会修改相应的 ODR 位，从而控制输出电平。</p>
<p>对 BSRR 的操作可以实现原子操作。因此在设置单个 IO 口输出时，使用 BSRR 进行操作会更加方便。</p>
<p>但也有例外的时候，在需要对单个IO口进行 Toggle 操作时（即对当前输出取反输出，当前输出为高则输出低，当前输出低则输出高），官方的库函数就是直接对 ODR 寄存器进行操作的。代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_GPIO_TogglePin</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> uint16_t GPIO_Pin<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* Check the parameters */</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_GPIO_PIN</span><span class="token punctuation">(</span>GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  GPIOx<span class="token operator">-></span>ODR <span class="token operator">^</span><span class="token operator">=</span> GPIO_Pin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为，0 和 1 与 1 进行异或操作被取反，0 和 1 与 0 进行异或操作保持原值。如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>

<span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客更新主题记录]]></title>
      <url>https://blog.cyang.tech/2017/05/29/hexo%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%8D%A2%E8%AF%84%E8%AE%BA%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="1、更换评论"><a href="#1、更换评论" class="headerlink" title="1、更换评论"></a>1、更换评论</h1><p>多说将于6月1号关闭，因此将评论系统从多说转到Disqus。更新的方法很简单，升级next主题，最新版的主题中自带了Disqus的评论，只需填入用户名即可。</p>
<a id="more"></a>
<h1 id="2、添加运行时间"><a href="#2、添加运行时间" class="headerlink" title="2、添加运行时间"></a>2、添加运行时间</h1><ul>
<li>1、添加运行时间，如本站已运行 402 天 7 小时 23 分 11 秒。<br>添加方法：在<code>themes\next\layout\_partials</code>目录的<code>footer.swig</code>文件中添加如下代码：<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> time <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"show-time"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"span_dt_dt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    function <span class="token function">show_date_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"show_date_time()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      BirthDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"4/21/2016 15:30:01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//总时间</span>
      timeold <span class="token operator">=</span> <span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> BirthDay<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      sectimeold <span class="token operator">=</span> timeold <span class="token operator">/</span> <span class="token number">1000</span>
      secondsold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sectimeold<span class="token punctuation">)</span><span class="token punctuation">;</span>
      msPerDay <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span>
      e_daysold <span class="token operator">=</span> timeold <span class="token operator">/</span> msPerDay
      daysold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e_daysold<span class="token punctuation">)</span><span class="token punctuation">;</span>
      e_hrsold <span class="token operator">=</span> <span class="token punctuation">(</span>e_daysold <span class="token operator">-</span> daysold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>
      hrsold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e_hrsold<span class="token punctuation">)</span><span class="token punctuation">;</span>
      e_minsold <span class="token operator">=</span> <span class="token punctuation">(</span>e_hrsold <span class="token operator">-</span> hrsold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
      minsold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e_hrsold <span class="token operator">-</span> hrsold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      seconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e_minsold <span class="token operator">-</span> minsold<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      span_dt_dt<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span> daysold <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> hrsold <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> minsold <span class="token operator">+</span> <span class="token string">" 分 "</span> <span class="token operator">+</span> seconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token function">show_date_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>
<span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Utf-8 to Unicode]]></title>
      <url>https://blog.cyang.tech/2017/05/17/utf-8%20%E8%BD%AC%20unicode/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、utf-8-unicode-utf-16"><a href="#一、utf-8-unicode-utf-16" class="headerlink" title="一、utf-8 unicode utf-16"></a>一、utf-8 unicode utf-16</h1><ul>
<li>1、unicode 使用两字节表示字符。</li>
<li>2、utf-8 和 utf-16均为变长编码，使用1~4个字节来表示字符。</li>
<li>3、utf-8 和 utf-16是不一样的，汉子使用 unicode 表示是两个字节，utf-8 是三个字节，utf-16 是两个字节。</li>
<li>4、utf-8 只是 unicode的一种实现方式，类似的方式还有 utf-16 和 utf-32。</li>
<li>5、Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。目前的Unicode字符分为17组编排，0x0000 至 0xFFFF，每组称为平面（Plane），而每平面拥有65536个码位，共1114112个。然而目前只用了少数平面。UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。</li>
<li>6、UCS-2用两个字节编码，UCS-4用4个字节编码。</li>
</ul>
<a id="more"></a>
<h1 id="二、utf-8-和-unicode-的对应关系"><a href="#二、utf-8-和-unicode-的对应关系" class="headerlink" title="二、utf-8 和 unicode 的对应关系"></a>二、utf-8 和 unicode 的对应关系</h1><p><span xmlns="http://www.w3.org/1999/xhtml" style="">// #txt—<br>   |  Unicode符号范围      |  UTF-8编码方式<br> n |  (十六进制)           | (二进制)<br>—+———————–+——————————————————<br> 1 | 0000 0000 - 0000 007F |                                              0xxxxxxx<br> 2 | 0000 0080 - 0000 07FF |                                     110xxxxx 10xxxxxx<br> 3 | 0000 0800 - 0000 FFFF |                            1110xxxx 10xxxxxx 10xxxxxx<br> 4 | 0001 0000 - 0010 FFFF |                   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br> 5 | 0020 0000 - 03FF FFFF |          111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx<br> 6 | 0400 0000 - 7FFF FFFF | 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx  </span></p>
<p>// #txt—end<br>  </p>
<h1 id="三、C语言实现-utf-8-to-unicode"><a href="#三、C语言实现-utf-8-to-unicode" class="headerlink" title="三、C语言实现 utf-8 to unicode"></a>三、C语言实现 utf-8 to unicode</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdint.h"</span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> DLS_LEN        (uint8_t)129</span>
<span class="token macro property">#<span class="token directive keyword">define</span> DWBYTE(b3, b2, b1, b0) (((uint32_t)((uint8_t)(b3) &lt;&lt; 24)) | ((uint8_t)(b2) &lt;&lt; 16) | ((uint8_t)(b1) &lt;&lt; 8) | ((uint8_t)(b0)))</span>

<span class="token keyword">void</span> <span class="token function">UTF8ToUnicode</span><span class="token punctuation">(</span>uint8_t <span class="token operator">*</span>UTF8<span class="token punctuation">,</span>uint16_t <span class="token operator">*</span>Unicode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint16_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    uint8_t buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x00</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span><span class="token function">DWBYTE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xe0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0xc0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x1c</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span><span class="token function">DWBYTE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0xe0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x3c</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span><span class="token function">DWBYTE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0xf0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x3c</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>UTF8<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span><span class="token function">DWBYTE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>UTF8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0x20</span><span class="token punctuation">)</span>
            Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token punctuation">(</span>DLS_LEN<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token punctuation">(</span>DLS_LEN<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        Unicode<span class="token punctuation">[</span>DLS_LEN<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        Unicode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t xx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    uint8_t utf8<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xE6</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0xE9</span><span class="token punctuation">,</span><span class="token number">0x9D</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0xB9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    uint16_t unicode<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">UTF8ToUnicode</span><span class="token punctuation">(</span>utf8<span class="token punctuation">,</span>unicode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>xx<span class="token punctuation">;</span> xx<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span> xx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unicode[%d]:0x%x\n"</span><span class="token punctuation">,</span>xx<span class="token punctuation">,</span>unicode<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WIN10版OneDrive不能登录，显示正在同步其他账户]]></title>
      <url>https://blog.cyang.tech/2017/05/14/WIN10%E7%89%88OneDrive%E4%B8%8D%E8%83%BD%E7%99%BB%E5%BD%95%EF%BC%8C%E6%98%BE%E7%A4%BA%E6%AD%A3%E5%9C%A8%E5%90%8C%E6%AD%A5%E5%85%B6%E4%BB%96%E8%B4%A6%E6%88%B7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、错误现象"><a href="#一、错误现象" class="headerlink" title="一、错误现象"></a>一、错误现象</h1><p>前几天通过Win10系统的推送进行了小版本的更新，更新之后需要重写登陆OneDrive，但是登陆却出现错误，提示正在同步其他账户，根据系统的指示在设置中更改账号并不能解决。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514103312808?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514103323818?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><h2 id="1、控制面板卸载OndDrive"><a href="#1、控制面板卸载OndDrive" class="headerlink" title="1、控制面板卸载OndDrive"></a>1、控制面板卸载OndDrive</h2><p>不过一般在控制面板是找不到OneDrive的，因此需要先执行安装包安装程序。安装包的路劲为<code>C:\Windows\SysWOW64</code><br><img src="http://p7tst3obo.bkt.clouddn.com/20170514103735970?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514103746586?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>之后便可以在控制面板卸载程序中找到OneDrive，如下图：</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514103844931?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="2、重装OneDrive"><a href="#2、重装OneDrive" class="headerlink" title="2、重装OneDrive"></a>2、重装OneDrive</h2><p>重新执行OneDrive的安装包，安装包路径还是<code>C:\Windows\SysWOW64</code></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514104010239?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514104028458?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514104040135?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514104020432?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="3、正常使用"><a href="#3、正常使用" class="headerlink" title="3、正常使用"></a>3、正常使用</h2><p>之后OneDrive便可以正常使用了。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170514104250025?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="三、参考链接："><a href="#三、参考链接：" class="headerlink" title="三、参考链接："></a>三、参考链接：</h1><p><a href="https://zhidao.baidu.com/question/564899353262025404.html" target="_blank" rel="external">百度知道</a></p>
<p><a href="https://answers.microsoft.com/zh-hans/onedrive/forum/odstart-odsignin/win10%E7%89%88onedrive%E4%B8%8D%E8%83%BD%E7%99%BB/97bf330c-2f19-4a39-8fcc-159922fd1ece" target="_blank" rel="external">微软社区解答</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WIN10 更新系统后，串口无法连接]]></title>
      <url>https://blog.cyang.tech/2017/04/26/WIN10%20%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E5%90%8E%EF%BC%8C%E4%B8%B2%E5%8F%A3%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><ul>
<li>1、WIN10 更新系统后，无法连接 ST 开发板上 USB 转串口，但可以正常的下载程序。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170426093429829?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<a id="more"></a>
<h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><ul>
<li>1、尝试更改 COM 口，例如从 COM3 转为 COM4。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170426094024912?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>2、尝试更新 ST-LINK 的固件版本，如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170426093638831?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<p>之后便可正常使用了：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170426094105647?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C 语言 查找字符串子串]]></title>
      <url>https://blog.cyang.tech/2017/04/12/C%20%E8%AF%AD%E8%A8%80%20%E6%9F%A5%E6%89%BE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%90%E4%B8%B2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/vc++%20%E6%9F%A5%E6%89%BE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%90%E4%B8%B2.png" alt=""></p>
<a id="more"></a>
<p>主要的思路就是，不断的从母串 str1 中取出和子串长度相等的临时子串 temp_str，与子串 str2 进行比较。没有找到子串，返回 -1；成功找到子串，返回子串首字母在母串中的位置，该位置从 0 开始。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">char</span> temp_str<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 临时子串</span>

<span class="token keyword">void</span> <span class="token function">ReadStrUnit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>temp_str<span class="token punctuation">,</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 从母串中获取与子串长度相等的临时子串</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>index<span class="token punctuation">;</span> index <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp_str<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>idx<span class="token operator">+</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    temp_str<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">GetSubStrPos</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> len1 <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error 1 \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子串比母串长</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">ReadStrUnit</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>temp_str<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不断获取的从 母串的 idx 位置处更新临时子串</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>temp_str<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 若临时子串和子串一致，结束循环</span>
        idx<span class="token operator">++</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 改变从母串中取临时子串的位置</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">>=</span>len1<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 若 idx 已经超出母串长度，说明母串不包含该子串</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> idx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回子串第一个字符在母串中的位置</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token string">"abcdefghijk"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> <span class="token function">GetSubStrPos</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not found\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[制作字库（Bin文件合并 C2BIN）]]></title>
      <url>https://blog.cyang.tech/2017/04/06/%E5%88%B6%E4%BD%9C%E5%AD%97%E5%BA%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/20170406200057751?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="一、点阵文件生成"><a href="#一、点阵文件生成" class="headerlink" title="一、点阵文件生成"></a>一、点阵文件生成</h2><a id="more"></a>
<ul>
<li>1、使用点阵字库生成器生成文字的点阵信息，采用 UNICODE 编码批量生成。</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170406200021005?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>2、如果具有 C 文件的字库，例如 STM32 开发板的库函数 <code>x:\en.stm32cubef4\STM32Cube_FW_F4_V1.14.0\Utilities\Fonts</code> 中的字库 C 文件，可以使用 C2B转换助手，这个软件可以将 C 文件中的字符数组信息转换成 bin 文件。结果如下图所示：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170406200057751?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>使用时，尽量将开头无关的注释删除，但不要多删，保证 C 语言数组的正确。</li>
</ul>
<h2 id="二、BIN-文件合并"><a href="#二、BIN-文件合并" class="headerlink" title="二、BIN 文件合并"></a>二、BIN 文件合并</h2><ul>
<li><p>1、由于使用点阵字库生成器时，只用 UNICODE 编码才可以批量生成，在只需要显示英文，中文和常见的符号时，一般只需取 UNICODE 中的如下范围即可，</p>
<pre><code>  0x0000~0x007F  向下兼容ASCII，取得英文和常见符号

  0x4E00~0x9FFF  中文常见字
</code></pre></li>
<li><p>2、因此，生成的字库文件一般有两个文件，此时，需要使用二进制文件合并工具 UBIN 来就将两个文件合并成一个文件，便于烧录。关于这个软件的使用，可看<a href="http://jingyan.baidu.com/article/e2284b2b5b23e5e2e6118db8.html" target="_blank" rel="external">百度教程</a>。</p>
</li>
<li><p>3、在合并文件时，两个文件中见可以有一定的空余间隙，这只需要修改偏移量。勾选插入，设置一个大于第一个文件大小的绝对地址。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170406200306752?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h2 id="三、检验字库信息"><a href="#三、检验字库信息" class="headerlink" title="三、检验字库信息"></a>三、检验字库信息</h2><ul>
<li><p>1、若使用 C2BIN 软件，需要首先确认这个步骤生成的字库信息是正确的。一般看前后的数据是否正确，还有文件生成的大小。例如，C 文件中，一个字符使用 3x24 共 72 个字节来表示，共有 95 个字符，则生成后的 bin 文件的末地址应为 95*72-1 = 6839 = 1AB7h。使用 UltraEdit 打开 bin 文件，看下文件大小是否符合。</p>
</li>
<li><p>2、合并两个字库的 bin 文件后，一般先查看下由于偏移而产生的地址上的数据是否为 0x00，之后再将两个文件的大小相加后与合并文件的大小比较，看是否一致。之后再简单比较下文件开头和结束的数据是否一致就可以确认数据的正确性了。注意，这里的文件大小并不是系统显示的文件占用空间或大小，而是使用 UltraEdit 之类的软件打开文件后查看文件的末尾地址。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ci 测试]]></title>
      <url>https://blog.cyang.tech/2017/03/21/ci%20%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>ci ceshi </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[I2C Bit-Bang 程序分析]]></title>
      <url>https://blog.cyang.tech/2017/03/20/I2C%20Bit-Bang%20%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、Bit-Bang"><a href="#一、Bit-Bang" class="headerlink" title="一、Bit Bang"></a>一、Bit Bang</h1><p>关于 Bit Bang 的解释:Use software to control serial communication at general-purpose I/O pins,简单来讲就是使用软件通过 IO 脚去实现 I2C 的时序从而使用 I2C 协议进行通信。</p>
<p>这样做的好处是可以突破硬件上的限制，例如芯片不具有硬件 I2C 模块，或者硬件 I2C 模块损坏，又或者使用硬件 I2C 模块时布线非常麻烦。坏处是需要写代码模拟时序，根据不同的硬件平台和不同的时钟频率，代码中的部分参数是不一样的。</p>
<h1 id="二、代码分析"><a href="#二、代码分析" class="headerlink" title="二、代码分析"></a>二、代码分析</h1><p>以下代码基于 STM32 系列 MCU</p>
<p>使用软件模拟 I2C 的步骤如下：</p>
<ul>
<li>1、设置 GPIO 管脚<br>设置两个管脚作为 SCL 和 SDA，例如 GPIOA1 和 GPIOA2</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SCL_PORT            GPIOA</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SCL_PIN             GPIO_Pin_1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SCL_HIGH             GPIOA->BSRR=(uint32_t)GPIO_Pin_1    </span>
<span class="token macro property">#<span class="token directive keyword">define</span> SCL_LOW             GPIOA->BRR=(uint32_t)GPIO_Pin_1</span>

<span class="token macro property">#<span class="token directive keyword">define</span> SDA_PORT            GPIOA</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_PIN             GPIO_Pin_2</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_HIGH             GPIOA->BSRR=(uint32_t)GPIO_Pin_2</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_LOW             GPIOA->BRR=(uint32_t)GPIO_Pin_2</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_READ             (uint16_t)(GPIOA->IDR&amp;GPIO_Pin_2)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_OUT             GPIOA->MODER|=(((uint32_t)GPIO_Mode_OUT) &lt;&lt; (2 * 2))</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_IN                 GPIOA->MODER&amp;=~(GPIO_MODER_MODER0&lt;&lt;(2 * 2))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、SCL时钟周期</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t i <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据具体的硬件平台和主频调整</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>3、附加设置<br>这里主要是使用宏定义模拟函数</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SCL_OUTH()         SCL_HIGH</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SCL_OUTL()         SCL_LOW</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_OUTH()         SDA_HIGH</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_OUTL()         SDA_LOW</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_SETIN()     SDA_IN</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SDA_READ()         SDA_READ</span>

<span class="token keyword">void</span> <span class="token function">SDA_SETOUT</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>     
<span class="token punctuation">{</span>
    SDA_IN<span class="token punctuation">;</span>
    SDA_OUT<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//确保 IO 为输出模式</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>4、I2C 启动<br><img src="http://p7tst3obo.bkt.clouddn.com/20170316182930507?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>               
<span class="token punctuation">{</span> 
  <span class="token function">SCL_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SDA_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SDA_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>5、I2C停止<br><img src="http://p7tst3obo.bkt.clouddn.com/20170316183008820?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>              
<span class="token punctuation">{</span>
  <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SDA_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token function">SCL_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
  <span class="token function">SDA_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Delay</span><span class="token punctuation">(</span>Delay5ms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Delay() 为系统延时，用于确保数据传输正确</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>6、发送 8 位数据，返回值为从响应 ACK 标志</p>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>uint8_t Data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint8_t i<span class="token punctuation">,</span>bAck<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//循环加移位，不断地将数据通过 SDA 管脚的高低电平发送出去</span>
  <span class="token punctuation">{</span>
      <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Data <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>    
          <span class="token function">SDA_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>                
          <span class="token function">SDA_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">SCL_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
      <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SCL_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
  <span class="token function">SDA_SETIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//设置 SDA 管脚为输入模式</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//判断从机响应</span>
      bAck <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
      bAck <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
  <span class="token function">SDA_SETOUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SDA_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">!</span>bAck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>7、接收 8 位数据</p>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span>uint8_t bLSByte<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint8_t i<span class="token punctuation">,</span>Data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">SDA_SETIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环加移位接收 8 位数据</span>
  <span class="token punctuation">{</span>
      <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
      Data <span class="token operator">=</span> Data <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">SCL_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
      <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          Data <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
          Data <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>    

  <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
  <span class="token function">SDA_SETOUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token keyword">if</span><span class="token punctuation">(</span>bLSByte<span class="token punctuation">)</span>
      <span class="token function">SDA_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// for Nack</span>
  <span class="token keyword">else</span>
      <span class="token function">SDA_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// for ACK</span>
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
  <span class="token function">SCL_OUTH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
    <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

  <span class="token function">SCL_OUTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
  <span class="token function">I2C_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token keyword">return</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="三、操作实例"><a href="#三、操作实例" class="headerlink" title="三、操作实例"></a>三、操作实例</h1><p>以下代码为通过调用上面的基本代码来实现 I2C 通信</p>
<ul>
<li><p>1、设置 DAC 寄存器的值</p>
<p>  三个参数分比为从机地址，寄存器地址，8 位数据</p>
</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token function">DAC_Write_1byte</span><span class="token punctuation">(</span>uint8_t Slave<span class="token punctuation">,</span>uint8_t Regis_Addr<span class="token punctuation">,</span>uint8_t Data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t succ<span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Slave<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>succ<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>time<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从机没有响应，重试三次</span>
    <span class="token punctuation">{</span>
        <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Slave<span class="token punctuation">)</span><span class="token punctuation">;</span>      
        time<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Regis_Addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发送寄存器地址</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送数据</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span> succ<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>2、读取 DAC 寄存器的值</p>
<p>  两个参数分别为从机地址，寄存器地址，返回数据为 16 位。这是由于某些器件的硬件设计，采用 7 位表示寄存器地址，而每个寄存器包含 9 位数据。更常见的方式为 8 位寄存器地址，一个寄存器 8 位数据，这种方式的代码仅返回 8 位数据，见代码 2。 </p>
</li>
</ul>
<p>代码 1，返回 16 位数据，不常见</p>
<pre class="line-numbers language-c"><code class="language-c">uint16_t <span class="token function">DAC_Read_1byte</span><span class="token punctuation">(</span>uint8_t Slave<span class="token punctuation">,</span>uint8_t Regis_Addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    uint8_t Data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    uint8_t succ<span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    uint16_t retData<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Slave<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>succ<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>time<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Slave<span class="token punctuation">)</span><span class="token punctuation">;</span>
        time<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Regis_Addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Slave<span class="token operator">|</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    retData <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>
    retData <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码 2，返回 8 位数据</p>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token function">DAC_Read_1byte</span><span class="token punctuation">(</span>uint8_t Slave<span class="token punctuation">,</span>uint8_t Regis_Addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t succ<span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    uint8_t dat<span class="token punctuation">;</span>

    <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Slave<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加 1 代表读数据 </span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>succ<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>time<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从机没有响应，重试三次</span>
    <span class="token punctuation">{</span>
        <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Slave<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
        time<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    succ<span class="token operator">=</span><span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>Regis_Addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发送寄存器地址</span>
    dat<span class="token operator">=</span><span class="token function">I2C_ReadByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送数据</span>
    <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span> dat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Source Insight 更新4.0版本]]></title>
      <url>https://blog.cyang.tech/2017/03/19/Source%20Insight%20%E6%9B%B4%E6%96%B04.0%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、使用体验"><a href="#一、使用体验" class="headerlink" title="一、使用体验"></a>一、使用体验</h2><p><img src="http://p7tst3obo.bkt.clouddn.com/20170311100050765?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>source insight 终于大版本更新了。我开始使用 SI 是去年，那时候是 3.5 的版本，就觉得这是一款神器，搭配 Keil 和 IAR 等编译软件使用，可以提高单片机编程的效率。SI 有很多的特性是 keil 和 IAR 不具备的，作为一个代码编辑软件来说，很多功能确实很强大。只不过官方久久不更新，所以很多现在主流 IDE 或者代码编辑器的一些实用功能都不支持。</p>
<a id="more"></a>
<p>这次更新，整合了一些新功能，界面也有所改进。之前的版本有的设置界面很小，字都不能完全显示完，这次更新修复了这些问题。而且，可以很方便的将旧版本的配置文件导出，并导入进新版本，所以惯用的快捷键和代码配色都可以和之前保持一样，升级后也不需要做过多改动。值得一提的是，这次版本内置了多套主题，尽管都不是那么好看。</p>
<p>以下是一些新特性的展示：</p>
<ul>
<li><p>1、文件对比</p>
<p>  这个功能在-&gt;Tools 中，可以支持当前文件和备份文件对比，也支持两个文件对比。甚至支持文件夹内容对比。简单使用后发现效果好不错，这是替代 UltraCompare 的节奏啊，不过应该不支持文件信息的二进制版本对比。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095522944?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、代码 Reformat</p>
<p>  这个功能也在-&gt;Tools 中，可以支持几种常见的代码风格，例如：ANSI、GNU、K&amp;R，也支持自定义，这和Eclipse 中的一样。代码风格是非常个人化的东西，看着舒服就好。这个功能在拷贝粘贴代码的时候很实用，设置好自己的代码风格，拷贝代码后 reformat 一下，大括号缩进什么的就可以轻松搞定。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095742213?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、自动补全</p>
<p>  自动补全这个功能本来就有，这也是使用 SI 写代码比直接在 keil IAR 中写代码效率高的一个很重要的原因。但是这次自动补全又增加了新的功能，支持一些关键字的自动补全。例如如下的 for 循环，if else 结构。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095618672?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、代码折叠</p>
<p>  这个功能在阅读非常长的代码时还是很好用的。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095819439?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<p>还有更多的功能例如主题配色，查找等就不演示了，反正都比 3.5 版本更好了。但是好也不是完全的，在使用新版本是出现过一次程序奔溃，再次打开后当前文件就部分出现了乱码。</p>
<h2 id="二、修改设置"><a href="#二、修改设置" class="headerlink" title="二、修改设置"></a>二、修改设置</h2><p>虽然从 3.5 版本更新到 4.0 可以导入之前的配置文件，很多键盘设置和配色方案都可以很好的过渡，但还是有一些东西会有不同，需要重新设置。不过这也是因人而异的，更多的还是风格的问题。以下是我在使用时做的一些设置修改。</p>
<ul>
<li><p>1、编码方式</p>
<p>  3.5版本时，默认的编码方式为系统默认的编码方式，即 Windows ANSI，4.0版本的默认编码方式则为 UTF-8，这就导致了在 3.5 版本中可以正常显示的中文注释，在 4.0 版本中变成乱码。修改方式如下：<br>  在 Options-&gt;Preferences-&gt;Files 中的最下面，Default enconding 从 UTF-8 修改为 ANSI。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095850887?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、部分快捷键<br>  这些快捷键可以从 3.5 导入配置文件导过来，不过如果有些和默认中重复，则需要手动修改下。修改方式如下： 在 Options-&gt;Key Assignments 中，根据自己的需要进行修改，我一般会改这几个地方。</p>
<pre class="line-numbers language-c"><code class="language-c">  Symbol<span class="token punctuation">:</span> Jump To Definition <span class="token operator">-></span> Alt<span class="token operator">+</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">//跳转到定义</span>
  Navigation<span class="token punctuation">:</span> Go Back <span class="token operator">-></span> Alt<span class="token operator">+</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//返回</span>
  Symbol<span class="token punctuation">:</span> Jump To Caller <span class="token operator">-></span> Alt<span class="token operator">+</span><span class="token number">3</span> <span class="token comment" spellcheck="true">//查看调用</span>
  File<span class="token punctuation">:</span> Open <span class="token operator">-></span> Alt<span class="token operator">+</span>Q <span class="token comment" spellcheck="true">//打开，其实就是切换下文件，如果已经在标签页中，使用 Ctrl+Tab 也行</span>
  View<span class="token punctuation">:</span> Project Window <span class="token operator">-></span> Alt<span class="token operator">+</span><span class="token number">0</span> <span class="token comment" spellcheck="true">//关闭或打开项目文件列表</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>3、自动补全</p>
<p>  自动补全功能是因为在新版本中默认不使用 Tab 键补全，只能使用回车键，习惯了旧版本可能会有点不适应这一点，不过好在这是可以修改的，在 Options-&gt;Typing 中间那栏 Auto Completion 中，勾选 Tab key selects item 即可。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095924669?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、TAB键宽度</p>
<p>  由于 SI 只是用来编写代码的，编译还是在 IDE 中，所以 Tab 键的宽度应该和 IDE 中保持一致，这样在 IDE 中查看代码的时候格式才不会错位，我一般习惯的 Tab 键宽度为 2 ，4.0 版本默认为4，所以需要做如下修改：Options-&gt;File Type Options 右下一栏中的 Tab Width。</p>
</li>
</ul>
<ul>
<li><p>5、大括号位置</p>
<p>  这还是一个代码风格的问题，就是大括号的位置是在 if 后面，下面，下面后两格的问题。我习惯于大括号在正下面，但是 SI 有一个智能缩进，会将大括号自动缩进在下面后两格。这一个可在 Options-&gt;File Type Options 右边一栏 Auto Indent 中修改，从 Smart 改为 Simple 即可。<br>  <img src="http://p7tst3obo.bkt.clouddn.com/20170311095942466?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[F_open()使用错误记录]]></title>
      <url>https://blog.cyang.tech/2017/03/10/f_open()%E4%BD%BF%E7%94%A8%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、现象"><a href="#一、现象" class="headerlink" title="一、现象"></a>一、现象</h2><p>调用函数 <code>f_open()</code> 后，程序崩溃，调试后发现，单片机产生硬件中断，即软件跳入如下部分：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HardFault_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* Go to infinite loop when Hard Fault exception occurs */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token function">BSP_LED_Toggle</span><span class="token punctuation">(</span>LED3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<h2 id="二、错误代码"><a href="#二、错误代码" class="headerlink" title="二、错误代码"></a>二、错误代码</h2><p>代码错误处如下，就是简单的使用 <code>f_read()</code> 函数打开一个文件，并将这个文件的前 32 个字节打印出来。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">show_file</span><span class="token punctuation">(</span>uint8_t idx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FIL fil<span class="token punctuation">;</span>
    uint8_t data<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    uint8_t bytecounts<span class="token punctuation">;</span>
    uint8_t ret<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"show file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">f_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fil<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> TCHAR <span class="token operator">*</span><span class="token punctuation">)</span>File_path<span class="token punctuation">,</span>FA_READ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> FR_OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret : %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">SD_Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fil<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UINT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>bytecounts<span class="token punctuation">)</span> <span class="token operator">!=</span> FR_OK<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">SD_Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %02x "</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">f_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fil<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><p>看了网上的资料，在使用该函数时出现了硬件中断，一般都是单片机内存访问出现了错误。<br>也就是说在 <code>f_read(&amp;fil,(const TCHAR *)File_path,FA_READ)</code> 的参数中，无法找到 <code>fil</code> 的地址。将 <code>FIL fil;</code> 从函数外拿出，定义为全局变量，即可解决。</p>
<p>这是因为函数内的变量是定义在栈里面的，而 <code>FIL</code> 是 fatfs 中对文件定义的结构体变量，这个变量的内容如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* File object structure (FIL) */</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">if</span> !_FS_TINY</span>
  <span class="token keyword">union</span><span class="token punctuation">{</span>  
    UINT    d32<span class="token punctuation">[</span>_MAX_SS<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Force 32bits alignement */</span>     
    BYTE    d8<span class="token punctuation">[</span>_MAX_SS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* File data read/write buffer */</span>
  <span class="token punctuation">}</span>buf<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    FATFS<span class="token operator">*</span>    fs<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* Pointer to the related file system object (**do not change order**) */</span>
    WORD    id<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* Owner file system mount ID (**do not change order**) */</span>
    BYTE    flag<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Status flags */</span>
    BYTE    err<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Abort flag (error code) */</span>
    DWORD    fptr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* File read/write pointer (Zeroed on file open) */</span>
    DWORD    fsize<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* File size */</span>
    DWORD    sclust<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* File start cluster (0:no cluster chain, always 0 when fsize is 0) */</span>
    DWORD    clust<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Current cluster of fpter (not valid when fprt is 0) */</span>
    DWORD    dsect<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Sector number appearing in buf[] (0:invalid) */</span>
<span class="token macro property">#<span class="token directive keyword">if</span> !_FS_READONLY</span>
    DWORD    dir_sect<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Sector number containing the directory entry */</span>
    BYTE<span class="token operator">*</span>    dir_ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Pointer to the directory entry in the win[] */</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token macro property">#<span class="token directive keyword">if</span> _USE_FASTSEEK</span>
    DWORD<span class="token operator">*</span>    cltbl<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Pointer to the cluster link map table (Nulled on file open) */</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token macro property">#<span class="token directive keyword">if</span> _FS_LOCK</span>
    UINT    lockid<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* File lock ID origin from 1 (index of file semaphore table Files[]) */</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token punctuation">}</span> FIL<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可见在最前面有一个共用体，用作读写数据的缓冲，这个其中 <code>_MAX_SS</code> 定义为4096。整个结构体的大小，可使用 <code>sizeof(fil)</code> 查看，肯定多余4096。可是一般栈都不会有这么大，所以这个问题是由于栈溢出造成的。在函数内部一般不设置大数组，但是保不齐结构体内部有数组。</p>
<p><a href="http://www.openedv.com/posts/list/3161.htm" target="_blank" rel="external">参考链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 SysTick定时器]]></title>
      <url>https://blog.cyang.tech/2017/03/02/STM32%20SysTick%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/STM32%20SysTick.png" alt=""></p>
<a id="more"></a>
<h1 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h1><p>SysTick 定时器是实时操作系统专用的，但是也可以作为一个标准的递减计数器使用。它具有以下特点：</p>
<ul>
<li>1、24位递减计数器（16777216）</li>
<li>2、自动装填能力</li>
<li>3、计数器达到 0 时，有可屏蔽的系统中断产生。</li>
<li>4、可编程时钟源 （HCLK 或者 HCLK/8）</li>
</ul>
<p>该定时器具有四个寄存器，如下表所示：</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190239935?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190300373?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>一般，该定时器的计数周期为一毫秒，则寄存器<code>LOAD</code>中的值根据 MCU 主频的不同而不同。例如，主频为 16MHz,则填入该寄存器的值为16 000。也就是，每一秒执行16 000 000 次，那么每毫秒执行 16 000 次。</p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><p>使用该定时器非常容易，官方的演示代码中几乎后使用了这个定时器。这是因为延时函数 <code>HAL_Delay()</code>底层就是调用的这个定时器。所以对这个定时器其实不用添加或修改任何代码的。以 <code>STM32Cube_FW_F4_V1.14.0</code>固件库为例，说明这个定时器的配置代码。</p>
<ul>
<li><p>1、芯片上电或者复位后，运行 <code>HAL_Init()</code>这个函数，用于一些初始化的设置，这 其中就包括对 SysTick 定时器的设置的<code>HAL_InitTick()</code>。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190605046?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="init"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190616640?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="inittick"></p>
</li>
<li><p>2、在<code>HAL_InitTick()</code>中，设置了定时器计数值，开启定时器，设置定时器的中断优先级。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190814373?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="hal_InitTick"></p>
</li>
</ul>
<ul>
<li><p>3、由于芯片默认使用的时钟为内部高速时钟，此时定时器的时钟源<code>HCLK</code>的大小，即<code>SystemCoreClock</code>的值，为内部高速时钟的频率。下一步就会去配置系统时钟，为了达到更高的主频，此时可能会使用外部高速时钟。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190850796?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="cube"></p>
</li>
<li><p>4、随着时钟的改变，主频会发生变化，相应的定时器的值也要根据主频做出调整，以保障定时器的计数周期始终保持不变，为 1ms。但是这个不必我们再次去设置，因为每次调用 <code>HAL_RCCC_ClockConfig()</code> 去配置时钟后，都会自动的重新计算<code>SystemCoreClock</code>的值，并调用 <code>HAL_InitTicK()</code> 设置定时器的计数值。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170302190906671?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="update"></p>
</li>
</ul>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><ul>
<li>1、SysTick 定时器是非常好用的定时器，而且几乎不用配置，因为演示代码里基本上都有。而且会自动根据主频重新设置计数值，保证计数周期为 1ms。</li>
<li>2、一开始走了一些弯路，觉得这个定时器在任何主频下都会定时 1ms ，和设置的主频没关系，其实是因为每次修改主频都都会重新设置计数值。注释里说的很明白。如下：<blockquote>
<p>@note This function is called  automatically at the beginning of program after reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 延迟函数高级用法]]></title>
      <url>https://blog.cyang.tech/2017/03/02/STM32%20%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/STM32%20%E5%BB%B6%E8%BF%9F%E5%87%BD%E6%95%B0.png" alt=""></p>
<a id="more"></a>
<h1 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h1><p>第一种情况，在使用普通 STM32 延迟函数，类似于 <code>HAL_Delay(time)</code>，由于该函数是使用循环去判断及延时的，所以在执行该函数时整个程序会在此处等待定时器的中断服务函数修改参量使得循环判决条件不成立，从而继续程序的执行，同时也达到延迟时间的效果。由于使用的是系统的定时器进行延迟，所以时间相对准确。</p>
<p>第二种情况，当需要周期性的执行一个任务时，将这个函数放在某个定时器的中断服务函数里，设置好定时器的时间，完成时产生中断，从而进入中断服务函数执行该函数。此时，MCU 执行中断程序，只有更高优先级的中断才能打断当前执行的中断服务函数，进入更高优先级的中断服务函数去执行。需要等所有中断服务函数都执行完成，才会退回到主函数。</p>
<p>第三钟情况，而结合定时器以及相应的标志位，直接在主函数中达到周期任务的效果。原理如下：</p>
<ul>
<li>1、设置一个全局的标志位<code>flag</code>，初值为 0。</li>
<li>2、在<code>SysTick</code>定时器的中断服务函数中，周期性地对改标志位置 1。</li>
<li>3、主函数  <code>while(1)</code>中,只要使用<code>if(flag){}</code>去判断条件是否满足，满足则执行，不满足则跳过。</li>
</ul>
<p>第三种情况和第二钟情况的主要区别在于，第三种情况的周期任务函数是在主函数中执行的，而第二种则是在中断服务函数里执行的。使用第二种方式去执行周期任务，程序上可能会更好理解一些；使用第三种方式，则在编写程序时更简便一点。</p>
<p>这三种情况的使用场景不一样，第一种是使用 CPU 空操作的方式来延迟固定时间，保证通信时序正确；第二种使用中断的方式适用于比较重要的周期任务，保证周期准确；第三种则适用于周期不那么重要，只要在 <code>while(1)</code>循环中，任务函数不断地进行 <code>if(flag)</code>的判断，满足就执行。</p>
<h1 id="二、代码演示"><a href="#二、代码演示" class="headerlink" title="二、代码演示"></a>二、代码演示</h1><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span> 
    <span class="token function">BSP_LED_On</span><span class="token punctuation">(</span>LED1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">#<span class="token directive keyword">if</span> 1 </span><span class="token comment" spellcheck="true">//演示1，普通延时函数 5s打印一次时间和follow on</span>
          <span class="token function">printf_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//延时1000ms</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"follow on \n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">//演示2，周期任务 1s打印一次时间，5s打印一次follow on</span>
        <span class="token function">printf_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Sys_Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"follow on \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
    <span class="token macro property">#<span class="token directive keyword">endif</span></span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>printf_time()</code>函数就是将 MCU RTC 中的时间通过串口打印出来，而<code>HAL_Delay()</code>就是普通的延时函数，<code>Sys_Delay()</code>是用于设置第三种方式中所提的定时任务的周期，代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Sys_Delay</span><span class="token punctuation">(</span>uint32_t time<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Cycle_Time <span class="token operator">=</span> time<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而中断服务函数的代码如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">HAL_IncTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  T1msCount<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>T1msCount<span class="token operator">></span>Cycle_Time<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    T1msCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该中断每 1ms 产生一次,对计数值<code>T1msCount</code>进行加 1，当大于周期时间时，清零，并对标志位赋 1，此后主函数中<code>if(flag)</code>成立，对标志位清零，并执行其中的周期任务。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170301203955373?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20170301204043655?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>图一对于主函数中演示 1，代表延迟一秒，打印时间及“follow on”，<br>图二对应主函数在 <code>#if 0</code> 时的演示2，代表延迟一秒打印一次时间，打印”follow on”的周期为5秒。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 延迟函数解析]]></title>
      <url>https://blog.cyang.tech/2017/02/28/STM32%20%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、函数原型"><a href="#一、函数原型" class="headerlink" title="一、函数原型"></a>一、函数原型</h1><p>STM32官方提供的函数库中，可以找到类似于 <code>HAL_Delay()</code> 这样的函数。这个函数的就是通过使用定时器，达到一个较为精确的时间延迟，提供给用户调用。</p>
<p>这个函数一般包含在类似于 <code>stm32f4xx_hal.c</code> 这样的函数中。函数原型如下：</p>
<pre class="line-numbers language-c"><code class="language-c">__weak <span class="token keyword">void</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span>__IO uint32_t Delay<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint32_t tickstart <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>
  tickstart <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Delay<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<p>输入参数为需要延时的时间，单位为毫秒（ms）。其中调用的 <code>HAL_GetTick()</code> 函数为获取计数值 <code>uwTick</code>,该计数值在中段服务函数中进行加一操作。</p>
<pre class="line-numbers language-c"><code class="language-c">__weak uint32_t <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> uwTick<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在中断服务函数如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uwTick<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>该中断服务函数为系统定时器SysTick的中断响应。而该定时器的初始化函数 <code>HAL_InitTick()</code> 是在 <code>stm32f4xx_hal.c</code>文件里定义,并在 <code>HAL_Init()</code> 函数中被调用。</p>
<p>查看其初始化函数  <code>HAl_InitTick()</code> ,内容如下：</p>
<pre class="line-numbers language-c"><code class="language-c">__weak HAL_StatusTypeDef <span class="token function">HAL_InitTick</span><span class="token punctuation">(</span>uint32_t TickPriority<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/*Configure the SysTick to have interrupt in 1ms time basis*/</span>
  <span class="token function">HAL_SYSTICK_Config</span><span class="token punctuation">(</span>SystemCoreClock<span class="token operator">/</span><span class="token number">1000U</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/*Configure the SysTick IRQ priority */</span>
  <span class="token function">HAL_NVIC_SetPriority</span><span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> TickPriority <span class="token punctuation">,</span><span class="token number">0U</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/* Return function status */</span>
  <span class="token keyword">return</span> HAL_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个函数首先是为该定时器设置中断产生的周期，例如当前情况下为1ms，也就是没一毫秒都要产生一次中断。其次是为该定时器设置中断优先级。</p>
<h1 id="二、函数说明"><a href="#二、函数说明" class="headerlink" title="二、函数说明"></a>二、函数说明</h1><p>用户在使用延时时，直接调用函数 <code>HAl_Delay(time)</code>,填入需要延时的时长，单位为毫秒，例如填入5000，则代表延迟5秒，这段时间MCU会产生5000次中断，进5000次中断服务函数对计数值进行加一操作。</p>
<p>延时函数的核心语句为 <code>while循环</code>，如下：</p>
<pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Delay<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个函数在条件满足时会一直循环，但是由于循环体为空，所以实际上循环是不产生任何操作的，直到循环不满足，也就是计数值在不断加一操作后的值减去开始延迟时值已经大于延时值时。此时条件不满足，循环结束，程序继续向下执行。</p>
<p>关于上面这个<code>while循环</code>，还可以用采用<code>for循环</code>写的版本，如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Delay<span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即仅使用<code>for</code>循环的一个条件，这段代码等同于如下代码：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">></span> Delay<span class="token punctuation">)</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="三、更多说明"><a href="#三、更多说明" class="headerlink" title="三、更多说明"></a>三、更多说明</h1><ul>
<li>1、关于 SysTick 定时器，数据手册的说明如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170228152910421?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>2、关于<code>for</code>和<code>while</code>循环的效率说明，可以看<a href="http://blog.csdn.net/coolbacon/article/details/7469044" target="_blank" rel="external">这篇文章</a>。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FatFs 使用中文长文件名]]></title>
      <url>https://blog.cyang.tech/2017/02/24/FatFs%20%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E9%95%BF%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p><img src="http://p7tst3obo.bkt.clouddn.com/20170224132232460?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<p>使用长文件名，一般会是在使用 <code>f_readdir()</code> 这个函数时碰到，这个函数的功能就是获取上一步使用 <code>f_opendir()</code> 打开的文件夹中的内容，并将文件信息保存到定义的结构体。</p>
<p>结构体内容如下，<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224133146238?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>里面包含有文件大小，上一次修改日期，文件属性，文件名等。可见，普通文件名是存在一个 <code>fname[13]</code> 的数组里的，这就使得长文件名无法正常显示。而长文件名是一个指针，这个指针指向的数组是需要自己定义的。</p>
<h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><p>在使用长文件名时，需要更改 ffconf.h 中的宏定义如下，<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224132258711?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>如果需要支持中文则还需要做如下更改，<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224132319663?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><strong>如下内容非常关键：</strong></p>
<h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p>使用长文件名时，需要自己添加存储长文件名的 buffer, 所以需要在用户程序中定义如下内容；<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224132405274?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>将文件信息中长文件名指针指向定义的 buffer<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224132431648?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><p>也可以直接使用这种方式：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224192936262?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>效果如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170224132524589?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="三、演示代码"><a href="#三、演示代码" class="headerlink" title="三、演示代码"></a>三、演示代码</h2><p>附一份示例代码：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">scan_files</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property">#<span class="token directive keyword">if</span> _USE_LFN</span>
  Fileinfo<span class="token punctuation">.</span>lfname <span class="token operator">=</span> lfn<span class="token punctuation">;</span>
  Fileinfo<span class="token punctuation">.</span>lfsize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lfn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    uint8_t ret<span class="token punctuation">;</span>
    uint8_t sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FATFS_LinkDriver</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SD_Driver<span class="token punctuation">,</span> SDPath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f_mount</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>SDFatFs<span class="token punctuation">,</span> <span class="token punctuation">(</span>TCHAR <span class="token keyword">const</span><span class="token operator">*</span><span class="token punctuation">)</span>SDPath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> FR_OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">SD_Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">f_opendir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dir<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> TCHAR <span class="token operator">*</span><span class="token punctuation">)</span>MUSIC_DIR_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> FR_OK<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret : %d "</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SD_Error_Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open music dir\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    ret <span class="token operator">=</span> <span class="token function">f_readdir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dir<span class="token punctuation">,</span><span class="token operator">&amp;</span>Fileinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> FR_OK <span class="token operator">||</span> Fileinfo<span class="token punctuation">.</span>fname<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Break on error or end of dir</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>Fileinfo<span class="token punctuation">.</span>lfname<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lfname : error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>Fileinfo<span class="token punctuation">.</span>lfname<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>Fileinfo<span class="token punctuation">.</span>fattrib <span class="token operator">&amp;</span> AM_ARC<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//is a file?</span>
                    <span class="token punctuation">{</span>
                            <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>filename<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Fileinfo<span class="token punctuation">.</span>lfname<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            sum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum : %d \n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_filename</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//show_file();</span>
    <span class="token function">FATFS_UnLinkDriver</span><span class="token punctuation">(</span>SDPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3 安装OSMC系统搭建媒体服务]]></title>
      <url>https://blog.cyang.tech/2017/02/07/%E6%A0%91%E8%8E%93%E6%B4%BE3%20%E5%AE%89%E8%A3%85OSMC%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/20170207125146892?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>OSMC是一款基于 Linux 免费开源的媒体播放系统。目前支持树莓派1、2、3、zero,vero,Apple TV这几款硬件平台。</p>
<a id="more"></a>
<h1 id="一、必备工具"><a href="#一、必备工具" class="headerlink" title="一、必备工具"></a>一、必备工具</h1><ul>
<li>1、树莓派3</li>
<li>2、OSMC OS</li>
<li>3、内存卡（推荐8G以上）</li>
<li>4、显示器（可通过hdmi转vga线连接到vga显示器）</li>
<li>5、2A的电源适配器</li>
</ul>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><p><strong>安装的方法有三种，如下。方法一比较简单，也是常用的为树莓派烧写系统的方式；方法二为树莓派官方推荐的新手入门安装系统的方式；方法三是 OSMC 官方推出的系统烧写器，也很简单。三种方式各有优劣，第一种比较常见，烧写系统的时间最短；第二种烧写时间适中，但是最简单；第三种可以根据硬件型号自动下载系统，也可以很方便地设置 WIFI 连接方式，在没有网线的情况下，使用第三种方式安装系统是最方便的。</strong></p>
<ul>
<li><p>方法一 下载安装镜像烧写<br>1、下载 <a href="https://osmc.tv/download/" target="_blank" rel="external">OSMC</a> 系统<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207125232290?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>2、使用 Etcher 烧录系统<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207125246837?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li><p>方法二 使用树莓派官方推荐的NOOBS安装<br>1、下载NOOBS,推荐下载左边完整版，这样在安装时不需要连接网络下载系统。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207125427800?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>2、解压后将全部文件放入内存卡根目录<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207125552972?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>方法三 使用OSMC官方安装器安装<br>1、下载OSMC官方安装器，根据你所使用的操作系统选择下载。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207125657317?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>2、根据提示进行操作<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207125737078?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170207125745207?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170207125751989?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、插入内存卡，开机初始化。第一次启动会配置时间地区语言等，切勿在初始化设置时更改语言为中文，将会出现中文字用框框显示的错误。<br>之后开机可以到设置中切换中文，先<code>system–&gt;settings–&gt;apparence–&gt;skin，把 fonts 改成 Arial based；</code>之后再<code>到 skin 下面的 international，把 language 改成 Chinese；</code><br><img src="http://p7tst3obo.bkt.clouddn.com/20170207131628247?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170207131642430?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170207131742603?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li>4、安装插件<br>系统可以安装的插件非常多，但大部分都是国外的媒体服务供应商，所以使用起来不是很方便。如果想要观看国内的视频，就需要安装插件。<br>推荐安装<a href="https://github.com/taxigps/xbmc-addons-chinese" target="_blank" rel="external">xbmc-addons-chinese</a>插件。<br>首先<a href="https://raw.githubusercontent.com/taxigps/xbmc-addons-chinese/master/repo/repository.xbmc-addons-chinese/repository.xbmc-addons-chinese-1.2.1.zip" target="_blank" rel="external">下载</a>，之后将文件拷贝如内存卡，选择从本地安装.zip文件。<br>或者安装<a href="https://superrepo.org/" target="_blank" rel="external">SuperRepo</a>，方法为：<blockquote>
<p>1、首先在系统-文件管理中添加源，源地址为 <a href="http://srp.nu，给源取名" target="_blank" rel="external">http://srp.nu，给源取名</a> SuperRepo。<br>2、完成后在系统-设置-插件中选择 从 zip 文件安装<br>3、根据自己的操作系统选择安装项，例如我选择 helix，然后选择 all</p>
</blockquote>
</li>
</ul>
<pre><code>关于从本地安装插件的方法，总结如下：
- 1、找到ZIP安装界面，主界面下Videos(视频)-&gt;Video Add-ons（视频插件）
- 2、点击Get more(获取更多) -&gt; 出现一个列表，点第一行
- 3、出来新的列表，选择点击第一行，显示多种导入方式，选择Install From zip file(从ZIP文件导入)
- 4、选择USB存储盘，选择对应的插件，点击即可安装
</code></pre><h1 id="三、使用体验"><a href="#三、使用体验" class="headerlink" title="三、使用体验"></a>三、使用体验</h1><ul>
<li>1、安装插件后可以完美观看国内主流的视频网站上的内容，使用PPTV插件还可以看电视内容，无广告，但是出错的机率比较大。</li>
<li>2、音频的输出可以使用耳机，也可以使用HDMI，这可以在系统中设置，但可能是我硬件的问题，使用耳机输出在不播放视频时底噪非常大。由于没有带音频输出的HDMI转接线，所以不知道HDMI输出音频时的效果。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170207131822728?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170207131833932?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li>1、<a href="http://www.ncnynl.com/archives/201607/241.html" target="_blank" rel="external">创客智造</a></li>
<li>2、<a href="https://blog.gtwang.org/iot/openelec-xbmc-kodi-chinese-addons/" target="_blank" rel="external">樹莓派 OpenELEC（XBMC/Kodi）加入中文節目套件，觀看土豆網與優酷等影片</a></li>
<li>3、<a href="http://www.cnblogs.com/ifantastic/p/5672039.html" target="_blank" rel="external">Raspberry Pi 3 Model B 安装 OSMC</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3 安装Flint OS]]></title>
      <url>https://blog.cyang.tech/2017/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE3%20%E5%AE%89%E8%A3%85Flint%20OS/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/Flint%20OS.png" alt=""></p>
<p>Flint OS 是基于最新的Linux长期支持版4.4内核版本和最新的稳定版Chromium OS r55开发的操作系统。更多的介绍可以上官网的<a href="https://flintos.com/" target="_blank" rel="external">视频介绍</a>。</p>
<a id="more"></a>
<h1 id="一、必备工具"><a href="#一、必备工具" class="headerlink" title="一、必备工具"></a>一、必备工具</h1><ul>
<li>1、树莓派3</li>
<li>2、Flint OS</li>
<li>3、内存卡（推荐8G以上）</li>
<li>4、显示器（可通过hdmi转vga线连接到vga显示器）</li>
</ul>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><ul>
<li><p>1、下载<a href="https://flintos.com/download/" target="_blank" rel="external">安装镜像</a><br><img src="http://p7tst3obo.bkt.clouddn.com/20170204132826407?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、烧写内存卡<br><a href="https://flintos.com/instructions/" target="_blank" rel="external">烧写的方法</a>可以看官网的介绍，写的非常详细，推荐直接使用极简方式。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170204133110474?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、连接显示器开机启动<br><img src="http://p7tst3obo.bkt.clouddn.com/20170204134232802?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li>4、初始化设置<br>包括语言，外设（鼠标，键盘），网络，账号的设置。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170204134335682?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170204134404822?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170204134416932?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170204134453979?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="三、使用体验"><a href="#三、使用体验" class="headerlink" title="三、使用体验"></a>三、使用体验</h1><ul>
<li>1、由于我自己没有USB或者蓝牙接口的键盘，所以用起来非常影响体验。虽然它系统本身具有无障碍功能，包括了屏幕键盘，但是实测点击无用。</li>
<li>2、需要登陆谷歌账号，或者使用游客身份登陆。所以这需要具备梯子，由于它基于Chromium OS，所以具有非常多的应用程序，或许可以用某些插件坐梯子，但是最好的方式还是在路由器中搭建梯子，例如SS的插件。</li>
<li><p>3、官网列出了三点不足，如下，使用时确实如此，希望以后越来月流畅。</p>
<blockquote>
<p>Chromium浏览器有时需要双击或右击Chromium图标才能打开<br>初次登录时的帐号同步需要花费较长的时间<br>打开5个以上标签页可能会导致系统卡顿</p>
</blockquote>
</li>
<li><p>4、以下是两张使用照片<br><img src="http://p7tst3obo.bkt.clouddn.com/20170204135353187?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170204135403952?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JRE运行环境出错导致无法安装STM32CubeMX解决方法]]></title>
      <url>https://blog.cyang.tech/2017/01/23/JRE%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%87%BA%E9%94%99%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85STM32CubeMX%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/%E5%AE%89%E8%A3%85.png" alt="STM32CubeMX"><br><a id="more"></a></p>
<h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>安装 STM32CubeMX 一直提示需要安装JAVA运行环境，提示界面如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170123144645074?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>但实际上已经正确安装了JRE，如下为JAVA版本。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170123144653163?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>问题原因：我的电脑上具有很多版本的JRE，并且有一个版本注册表信息出错，所以无法正常卸载。</p>
<h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><ul>
<li><p>1、先完整卸载目前已安装的JAVA版本，可利用<a href="https://www.java.com/zh_CN/download/faq/uninstaller_toolfaq.xml" target="_blank" rel="external">官方提供的卸载工具</a>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170123144945121?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>如上图所示，电脑里安装了4个版本的JRE，只需安装最新版的就好，其他直接卸载。</p>
</li>
<li><p>2、如果出现<a href="https://www.java.com/zh_CN/download/help/regkey_addremove.xml" target="_blank" rel="external">无法卸载的版本</a>，一般是注册表出错，此时可以使用<a href="https://support.microsoft.com/zh-cn/help/17588/fix-problems-that-block-programs-from-being-installed-or-removed" target="_blank" rel="external">微软系统修复工具</a>，也可以手动修改注册表，建议第一种。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170123145203374?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>修复之后使用之前的卸载工具可以看到，此时电脑里已经不存在任何版本的JRE。</p>
</li>
<li><p>3、再次安装JRE，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html" target="_blank" rel="external">根据系统版本下载对应的安装文件</a>，STM32CubeMX需要的最低版本为1.7.0_45，建议直接安装最新版。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170123145703985?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="三、STM32CubeMX的安装"><a href="#三、STM32CubeMX的安装" class="headerlink" title="三、STM32CubeMX的安装"></a>三、STM32CubeMX的安装</h1><p>在正确安装好JRE后，STM32CubeMX的安装非常简单，<a href="http://www.st.com/zh/development-tools/stm32cubemx.html?icmp=pf259242_prom_stm32cube-long-promo_feb2014" target="_blank" rel="external">官网下载</a>，解压，双击安装。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170123150001800?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20170123150043339?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20170123150101753?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20170123150332734?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建kindleEAR为kindle推送RSS订阅]]></title>
      <url>https://blog.cyang.tech/2017/01/16/%E6%90%AD%E5%BB%BAkindleEAR%E4%B8%BAkindle%E6%8E%A8%E9%80%81RSS%E8%AE%A2%E9%98%85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/kindleEAR.png" alt=""></p>
<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p><a href="https://github.com/cdhigh/KindleEar" target="_blank" rel="external">kindleEAR</a>是一个运行在Google App Engine(GAE)上的Kindle个人推送服务应用，生成排版精美的杂志模式mobi/epub格式自动每天推送至您的Kindle或其他邮箱。</p>
<a id="more"></a>
<p>此应用目前的主要功能有：</p>
<ul>
<li>支持类似Calibre的recipe格式的不限量RSS/ATOM或网页内容收集</li>
<li>不限量自定义RSS，直接输入RSS/ATOM链接和标题即可自动推送</li>
<li>多账号管理，支持多用户和多Kindle</li>
<li>生成带图的杂志格式mobi或带图的有目录epub</li>
<li>自动每天定时推送</li>
<li>强大而且方便的邮件中转服务和Evernote/Pocket/Instapaper等系统的集成</li>
</ul>
<h1 id="二、搭建过程"><a href="#二、搭建过程" class="headerlink" title="二、搭建过程"></a>二、搭建过程</h1><ul>
<li>1、 <a href="https://accounts.google.com/SignUp" target="_blank" rel="external">申请google账号</a> 并暂时 <a href="https://www.google.com/settings/security/lesssecureapps" target="_blank" rel="external">启用不够安全的应用的访问权限</a> 以便上传程序。</li>
<li>2、<a href="https://console.developers.google.com/iam-admin/projects" target="_blank" rel="external">创建一个Application</a>，注意不用申请GCE，那个是60天试用的，而GAE是限额范围内永久免费的。</li>
<li>3、open cloud shell<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116161614670?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li><p>4、Clone and cd then sh upload.sh</p>
<pre><code>  git clone https://github.com/miaowm5/KeUploader.git
  cd KeUploader
  sh upload.sh
</code></pre></li>
<li><p>5、Set information of your app<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116161824371?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>6、Open yourappid.appspot.com and enjoy. :-)<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116161934455?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h1><ul>
<li>1、使用默认订阅源<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116162512359?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>2、添加自定义订阅源<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116162743485?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>3、设置推送邮箱及时间<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116162803187?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>4、同步到pocket,evernote等第三方应用<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116162829984?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><h1 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h1></li>
<li>1、需要将你的邮箱添加到亚马逊的<a href="https://www.amazon.cn/mn/dcw/myx.html/ref=kinw_myk_redirect#/home/settings/payment" target="_blank" rel="external">信任列表</a>。</li>
<li>2、一开始如果发件列表出错，推送可能会出错。类似于<code>wrong SRC_EMAIL</code>。解决方法：确定发件邮箱正确。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170116164843839?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><ul>
<li>1、<a href="https://github.com/cdhigh/KindleEar" target="_blank" rel="external">kindleEAR</a></li>
<li>2、<a href="http://zhangyongcun.com/2016/05/15/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8kindle/" target="_blank" rel="external">如何更好的使用kindle</a></li>
<li>3、<a href="https://github.com/cdhigh/KindleEar" target="_blank" rel="external">cdhigh/KindleEar</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 HAProxy 加速 Shadowsocks]]></title>
      <url>https://blog.cyang.tech/2017/01/12/%E4%BD%BF%E7%94%A8%20HAProxy%20%E5%8A%A0%E9%80%9F%20Shadowsocks/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>前几天一篇放在CSDN介绍搭梯子的文章被删除了，把文章重新放在个人博客后，又重新用起了自己的SS服务，发现速度不如之前了，可能是vps服务供应商的问题。之前在电脑端比较常使用XX-Net的梯子，手机端使用的也是别人的SS服务，因此很少使用自己的SS服务。不过，两天前，手机上一直使用的SS服务被开发者停用了，所以只好用回自己的。也因此有了这篇使用 HAProxy 加速 shadowsocks 的教程。关于 shadowsocks 服务的搭建，<a href="http://cyang.tech/2017/01/08/38%E5%9D%97%E6%90%9E%E5%AE%9A%E4%B8%80%E5%B9%B4%E7%9A%84vps%E5%92%8Cshadowsocks%E6%9C%8D%E5%8A%A1/" target="_blank" rel="external">可以看这篇文章。</a></p>
<a id="more"></a>
<h1 id="一、必备工具"><a href="#一、必备工具" class="headerlink" title="一、必备工具"></a>一、必备工具</h1><ul>
<li>1、自建的SS服务</li>
<li>2、国内的服务器（阿里云，腾讯云之类的）</li>
</ul>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><blockquote>
<p>下面的步骤是基于我在腾讯云的服务器，系统是centos 6.7 64位。</p>
</blockquote>
<ul>
<li>1、安装 HAProxy<br>使用xshell远程登陆centos，使用以下指令安装<pre><code>yum install haproxy
</code></pre></li>
<li><p>2、修改配置文件<br>默认的配置文件有很多，其实只要修改为如下内容就好：</p>
<pre><code>global
    ulimit-n  51200

defaults
    log    global
    mode    tcp
    option    dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000

frontend ss-in
    bind *:6666 #腾讯云端口
    default_backend ss-out

backend ss-out
    server server1 233.233.233.233:8388 maxconn 20480 #SS服务的ip和端口
</code></pre></li>
<li><p>3、启动 haproxy 服务</p>
<p>#启动</p>
<pre><code>/etc/init.d/haproxy start
</code></pre><p>#停止</p>
<pre><code>/etc/init.d/haproxy stop
</code></pre></li>
</ul>
<h1 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h1><ul>
<li>1、测试结果为在电脑端速度提升不明显，但是使用手机是速度提升还是很明显的。</li>
<li><p>2、卸载 haproxy</p>
<p>#卸载</p>
<pre><code>yum -y remove haproxy
yum -rf /etc/haproxy
</code></pre></li>
</ul>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li>1、<a href="http://zhangyongcun.com/2016/11/15/haproxy-%E5%8A%A0%E9%80%9F-shadowsocks/" target="_blank" rel="external">haproxy 加速 shadowsocks</a></li>
<li>2、<a href="https://doub.io/ss-jc29/" target="_blank" rel="external">Shadowsocks利用 HaProxy 实现中继(中转/端口转发)</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3 安装谷歌物联网系统-Android Things]]></title>
      <url>https://blog.cyang.tech/2017/01/12/%E6%A0%91%E8%8E%93%E6%B4%BE3%20%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E7%89%A9%E8%81%94%E7%BD%91%E7%B3%BB%E7%BB%9F-Android%20Things/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/Android%20Things.png" alt=""></p>
<h1 id="一、必备工具"><a href="#一、必备工具" class="headerlink" title="一、必备工具"></a>一、必备工具</h1><ul>
<li>1、树莓派3</li>
<li>2、Android Things安装镜像</li>
<li>3、Windows 10 IoT 核心版仪表板</li>
<li>4、内存卡（推荐8G以上）</li>
<li>5、显示器（可通过hdmi转vga线连接到vga显示器）</li>
<li>6、Android Studio</li>
</ul>
<a id="more"></a>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><ul>
<li>1、<a href="https://developer.android.com/things/preview/download.html" target="_blank" rel="external">下载Android Things</a><br><img src="http://p7tst3obo.bkt.clouddn.com/20170112112357082?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>下载之后解压出ISO文件。</li>
<li>2、使用Win32DiskImager刷入镜像<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112112428676?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170112112436598?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>写入的过程比较慢，大概需要10分钟。<br>之后内存卡文件如下：<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112112522945?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>3、将内存开插入树莓派并开机<br>开机过程如下面的图片所示<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112113244868?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170112113306134?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>下面的小字写着树莓派的IP地址。</li>
<li>4、使用ADB连接树莓派。<br>执行如下语句<pre><code>adb connect &lt;ip&gt;
</code></pre>查看是否连接<pre><code>adb devices
</code></pre><img src="http://p7tst3obo.bkt.clouddn.com/20170112114039011?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="三、第一个程序"><a href="#三、第一个程序" class="headerlink" title="三、第一个程序"></a>三、第一个程序</h1><ul>
<li>1、下载或更新最新的Android Studio。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112114125574?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>2、获取工程模板，到<a href="https://github.com/androidthings/new-project-template" target="_blank" rel="external">这里克隆代码</a>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112114142231?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
<li>3、使用Android Studio编译运行。编译时可能需要先下在必须的编译工具。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112114234841?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170112114327419?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>下载运行可看到显示器显示正在执行的程序<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112114446391?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>同时可通过查看Studio中的logcat查看程序执行情况。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170112114544767?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><img src="http://p7tst3obo.bkt.clouddn.com/20170112114600889?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1></li>
<li>1、<a href="http://blog.csdn.net/joe544351900/article/details/54314333" target="_blank" rel="external">树莓派+Android Things</a></li>
<li>2、<a href="https://developer.android.com/things/hardware/raspberrypi.html" target="_blank" rel="external">Android Things参考文档</a></li>
<li>3、<a href="http://cyang.tech/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/" target="_blank" rel="external">更多关于树莓派的文章</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3 安装Win10 IoT 操作系统]]></title>
      <url>https://blog.cyang.tech/2017/01/11/%E6%A0%91%E8%8E%93%E6%B4%BE3%20%E5%AE%89%E8%A3%85Win10%20IoT%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/win10%20IoT.png" alt=""></p>
<h1 id="一、必备工具"><a href="#一、必备工具" class="headerlink" title="一、必备工具"></a>一、必备工具</h1><ul>
<li>1、树莓派3</li>
<li>2、Windows 10 IoT Core Insider Preview</li>
<li>3、Windows 10 IoT 核心版仪表板</li>
<li>4、内存卡（推荐8G以上）</li>
<li>5、显示器（可通过hdmi转vga线连接到vga显示器）</li>
</ul>
<a id="more"></a>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><ul>
<li><p>1、下载并安装<a href="https://developer.microsoft.com/zh-cn/windows/iot/Downloads.htm" target="_blank" rel="external">Windows 10 IoT 核心版仪表板</a><br><img src="http://p7tst3obo.bkt.clouddn.com/20170111191012837?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>点击<code>获取IoT核心版仪表板</code>，下载之后进行安装。</p>
</li>
<li><p>2、下载，解压并安装<a href="https://developer.microsoft.com/zh-cn/windows/iot/Downloads.htm" target="_blank" rel="external">Windows 10 IoT Core Insider Preview</a><br><img src="http://p7tst3obo.bkt.clouddn.com/20170111191154884?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>需要点击红框所示的位置进行下载。这需要登陆微软账号，并且账号需要具有预览版体验资格。如果闲麻烦，也可以去我的百度云下载。</p>
<pre><code>链接：http://pan.baidu.com/s/1bpcMusv 密码：wl91
</code></pre><p>下载完成为一个ISO文件，进行解压可以看到一个软件安装包，进行安装，这个安装包里面就包含了win10的安装镜像flash.ffu。</p>
</li>
<li><p>3、写入镜像到内存卡<br>直接使用Windows 10 IoT 核心版仪表板软件进行写入。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170111192717906?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<p>插入格式化后的内存卡，选择设备为树莓派，设置PC名称和密码，等待下载完成，并自动安装。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170111192529617?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>这需要等待下载完成，在写入，需要很长时间，而且尝试了两次均出现错误。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170111192920733?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>所以，还是使用自定义设备，直接写入下载好的flash.ffu。这个文件一般在<code>C:\Program Files (x86)\Microsoft IoT\FFU</code> 目录下。<br><img src="http://p7tst3obo.bkt.clouddn.com/20170111193256706?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20170111193346724?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>等待写入完成后，内存卡的文件为：</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170111193421144?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>4、将内存卡插入树莓派3并开机<br>开机的过程可见下面的图片<br><img src="http://p7tst3obo.bkt.clouddn.com/20170111195811869?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170111195824531?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170111195835197?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20170111195930855?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h1><ul>
<li>1、flash.ffu显示的是RPi2，也就是为树莓派2制作的，但其实树莓派3也是这个文件。</li>
</ul>
<h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul>
<li>1、<a href="http://bbs.ickey.cn/community/forum.php?mod=viewthread&amp;tid=44814" target="_blank" rel="external">树莓派Win10镜像下载安装教程及使用初体验</a></li>
<li>2、<a href="http://www.eeboard.com/evaluation/raspberry-win10-iot/3/" target="_blank" rel="external">值还是不值？——树莓派3 Win10 IoT系统体验</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[38块搞定一年的vps和shadowsocks服务]]></title>
      <url>https://blog.cyang.tech/2017/01/08/38%E5%9D%97%E6%90%9E%E5%AE%9A%E4%B8%80%E5%B9%B4%E7%9A%84vps%E5%92%8Cshadowsocks%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>这是一篇半年前写的教程，之前放在CSDN，最近不知道为什么突然被管理员删除了。现在放在个人博客。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/CSDN%E5%9B%9E%E6%94%B6%E7%AB%99.png" alt=""></p>
<h1 id="原文如下："><a href="#原文如下：" class="headerlink" title="原文如下："></a>原文如下：</h1><a id="more"></a>
<p>无意间看到一篇教程，利用VPS搭建SS服务的。试着搭了一遍，使用了两天感觉还不错。VPS也很便宜，38块一年，每个月250G流量，网速还可以，1080p的youtube视频没问题。搭建的教程也很简单。下面简单记录一下。我是参考这篇文章搭建的。</p>
<h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><p>1、购买vps，我使用的是由<a href="https://www.50vz.net/" target="_blank" rel="external">openVZVPS</a>提供的38元一年的服务。使用支付宝付款。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160630220341378?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>2、SecureCRT，使用ssh连接服务器。或者使用xshell，这个软件个人免费使用。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160630220558149?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><p>1、重装VPS系统。默认安装的系统是cent OS,这里的教程是基于Ubuntu的。所以需要重装系统。重装时需要设置系统密码。这个密码很重要。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160630220613614?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>2、连接ssh服务器。主机名就是你vps的ip，还有端口号，这些都可以到你的vps查看，用户名是root,然后点连接，点连接后会让你输入密码，密码就是你安装系统的时候设置的密码。连上服务器之后就要在服务器上安装shadowsocks了。</p>
<p>3、依次输入以下指令完成安装。sudo不用输入。</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-gevent python-pip
$ <span class="token function">sudo</span> pip <span class="token function">install</span> shadowsocks
$ <span class="token function">apt-get</span> <span class="token function">install</span> python-m2crypto
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>4、创建配置文件。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/shadowsocks.json
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5、修改配置文件。配置一下你的服务器IP和密码就可以了。</p>
<pre><code>{
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:8388,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;password&quot;,
    &quot;timeout&quot;:600,
    &quot;method&quot;:&quot;aes-256-cfb&quot;
}
</code></pre><p>6、最后，输入指令开启SS服务。当然也可以输入指令关闭SS服务。<br>这样就结束了整体的安装。在手机和电脑上配置后就可以使用了。</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">su</span> -
ssserver -c /etc/shadowsocks.json -d start //开启
ssserver -c /etc/shadowsocks.json -d stop  //关闭
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派使用DHT11和yeelink实现远程获取环境信息]]></title>
      <url>https://blog.cyang.tech/2017/01/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8DHT11%E5%92%8Cyeelink%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/DHT11-yeelink.png" alt="DHT11"></p>
<h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>树莓派使用DHT11传感器获取环境温湿度信息，上传至yeelink服务器。</p>
<a id="more"></a>
<h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><ul>
<li>1、树莓派</li>
<li>2、DHT11温湿度传感器</li>
<li>3、yeelink账号</li>
</ul>
<h2 id="实现；"><a href="#实现；" class="headerlink" title="实现；"></a>实现；</h2><ul>
<li>1、注册yeelink账号，获取用户Api-key。</li>
<li>2、添加设备，添加数值型传感器。</li>
<li>3、树莓派使用Adafruit库函数获取温湿度信息。</li>
<li>4、将信息通过python-curl的方式上传。</li>
</ul>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><ul>
<li>1、树莓派需要安装python-curl库。可使用pip安装。</li>
<li>2、树莓派需要安装Adafruit函数库。</li>
</ul>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /home/pi/class/DHT11/Adafruit_Python_DHT/examples
<span class="token comment" spellcheck="true">#pwd</span>
<span class="token comment" spellcheck="true">#ls</span>
<span class="token function">sudo</span> python AdafruitDHT.py 11 16 <span class="token operator">></span>/home/pi/class/DHT11/DHT11_Data.txt
<span class="token comment" spellcheck="true">#cat /home/pi/class/DHT11/DHT11_Data.txt</span>
<span class="token function">cd</span> /home/pi/class/DHT11
<span class="token function">sudo</span> python Post_DHT11_data.py <span class="token operator">&amp;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、首先是使用python运行AdafruitDHT.py程序，这个程序需要两个运行参数，一个是11，代表DHT11,一个是16，代表传感器的数据是通过16管脚接入的。</li>
<li>2、然后是通过输出重定向，将结果保存在一个文件中。</li>
<li>3、之后使用上传函数将传感器数据上传至服务器。</li>
<li>4、本实验所使用的代码均可在<a href="https://github.com/cyang812/Raspberry-Pi" target="_blank" rel="external">github</a>找到。</li>
</ul>
<h2 id="参考链接；"><a href="#参考链接；" class="headerlink" title="参考链接；"></a>参考链接；</h2><ul>
<li>1、<a href="https://github.com/adafruit/Adafruit_Python_DHT" target="_blank" rel="external">https://github.com/adafruit/Adafruit_Python_DHT</a></li>
<li>2、<a href="http://blog.csdn.net/xukai871105/article/details/38349519" target="_blank" rel="external">http://blog.csdn.net/xukai871105/article/details/38349519</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派使用USB摄像头和yeelink实现监控]]></title>
      <url>https://blog.cyang.tech/2017/01/01/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8USB%E6%91%84%E5%83%8F%E5%A4%B4yeelink%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>树莓派安装官方raspbian系统，安装USB摄像头驱动，定时获取摄像头数据保存为图片，上传至yeelink服务器。</p>
<a id="more"></a>
<h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><ul>
<li>1、树莓派</li>
<li>2、USB摄像头</li>
<li>3、yeelink账号</li>
</ul>
<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><ul>
<li>1、注册yeelink账号，获取用户Api-key。</li>
<li>2、添加设备，添加图像传感器。</li>
<li>3、树莓派安装fswebcam软件。</li>
<li>4、获取图像，通过curl的方式上传。</li>
</ul>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><ul>
<li>1、查看图片的方式可以是网页，官方手机客户端，API,关于API的使用可参看官方文档。</li>
<li>2、yeelink平台对于免费设备，不对数据进行加密，并且有容量和上传时间间隔的限制。</li>
<li>3、可使用linux系统下的百度云客户端，将本地的图片数据备份到百度云。</li>
</ul>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> fswebcam --save /home/pi/class/baiduyun/yeelink.jpg
curl --request POST --url http://api.yeelink.net/v1.0/device/xxxxx/sensor/xxxxxxx/photos --data-binary @<span class="token string">"/home/pi/class/baiduyun/yeelink.jpg"</span> --header <span class="token string">"U-Apikey: xxxxxxxxxxxxxxxx"</span>
<span class="token function">cd</span> /home/pi/class/baiduyun
var<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%y.%m.%d_%H.%M.%S<span class="token variable">)</span></span>
<span class="token function">mv</span> yeelink.jpg <span class="token variable">${var}</span>.jpg
bypy.py syncup
<span class="token keyword">echo</span> ok
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、首先是将图片保存下来，之后通过curl方式上传。</li>
<li>2、然后是将这张照片重新命名为当下时间。</li>
<li>3、使用百度云将照片盘上传至百度云空间。</li>
</ul>
<h2 id="参考链接；"><a href="#参考链接；" class="headerlink" title="参考链接；"></a>参考链接；</h2><ul>
<li>1、<a href="http://blog.yeelink.net/?p=468" target="_blank" rel="external">http://blog.yeelink.net/?p=468</a></li>
<li>2、<a href="http://www.yeelink.net/developer/apidoc/12" target="_blank" rel="external">http://www.yeelink.net/developer/apidoc/12</a></li>
<li>3、<a href="http://www.zhengyali.com/?p=126" target="_blank" rel="external">http://www.zhengyali.com/?p=126</a></li>
<li>4、<a href="https://github.com/houtianze/bypy" target="_blank" rel="external">https://github.com/houtianze/bypy</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从Nexus5说Android系统的打开方式]]></title>
      <url>https://blog.cyang.tech/2016/12/18/%E4%BB%8ENexus5%E8%AF%B4Android%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/android%207.0.jpg" alt=""></p>
<p>谷歌官方不在对Nexus5手机升级最新的Android7.0系统，但是在XDA论坛上已经有开发者制作了第三方刷机包。刷机之后体验了一段时间，就没怎么用了。后来出现了闪屏的现象，无法判断是否是因为升级系统导致的，也不排除是硬件的原因。</p>
<a id="more"></a>
<p>只好刷回官方匹配的6.1系统，刚刷回时依然出现，用了几次后发现居然好了。下面是重新恢复官方系统后做的必不可少的工作。下图为闪屏现象。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219085110866?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>本文虽针对nexus5手机，但对基于Android系统的手机均有一定参考性。</p>
<h1 id="一、恢复官方系统"><a href="#一、恢复官方系统" class="headerlink" title="一、恢复官方系统"></a>一、恢复官方系统</h1><ul>
<li><p>1、恢复官方系统非常简单，只需要去nexus手机系统官网下载对应机型的工厂固件包（.zip格式），大约560M，<a href="https://developers.google.com/android/images#hammerhead" target="_blank" rel="external">下载地址在这里</a>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219083750668?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>注意：请下载factory image,而不是full ota image</p>
</li>
<li><p>2、下载完成后解压，可看到里面的文件结构如下图。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219083930500?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li>3、按住音量下键和电源键，手机进入线刷模式（fastboot），如下图。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219084703849?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<ul>
<li>4、连接电脑（需先保证电脑正确安装了驱动）。</li>
<li>5、在windows系统下，可直接双击<code>flash-all.bat</code>文件，之后手机会自动通过USB的方式进行升级，此时请勿断开连接。.bat文件中的内容如下图：<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219084924856?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="二、刷Recovery"><a href="#二、刷Recovery" class="headerlink" title="二、刷Recovery"></a>二、刷Recovery</h1><ul>
<li>1、安装Recovery的为twrp，<a href="https://twrp.me/devices/lgnexus5.html" target="_blank" rel="external">下载地址在这里</a>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219085439463?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<ul>
<li>2、安装的过程可以通过使用如下命令<pre><code>adb devices
adb reboot bootloader
fastboot flash recovery twrp.img
fastboot reboot
</code></pre>如下图<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219085523409?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<p>也可以使用机锋论坛大神提供的一键安装工具，下载地址和使用方法<a href="http://bbs.gfan.com/android-7529229-1-1.html" target="_blank" rel="external">在这里</a>。</p>
<h1 id="三、获取Root"><a href="#三、获取Root" class="headerlink" title="三、获取Root"></a>三、获取Root</h1><ul>
<li>1、获取Root的方式为通过recovery模式的install模式刷入压缩包。</li>
<li><p>2、压缩包为SuperSU官方文件，<a href="https://download.chainfire.eu/1016/SuperSU/UPDATE-SuperSU-v2.79-20161211114519.zip" target="_blank" rel="external">下载地址在这里</a>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219085655083?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、进入recovery模式。首先进入fastboot（按住音量下键和电源键），之后通过音量上下键选择模式，电源键确定。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219085800230?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、通过recovery模式的install安装压缩包，如下图所示。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219090125934?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161219090232278?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161219090244794?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>5、安装成功后，重启手机进入系统。此时可看见应用程序列表多出一个SuperSU的应用，可通过该应用管理root权限。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219090528845?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="四、刷Xposed框架"><a href="#四、刷Xposed框架" class="headerlink" title="四、刷Xposed框架"></a>四、刷Xposed框架</h1><ul>
<li>1、关于安卓6.0系统安装xposed框架，之前已经写过一篇比较完整的教程，发布在CSDN的博客，<a href="http://blog.csdn.net/u011303443/article/details/51031170" target="_blank" rel="external">点这里查看</a>。</li>
<li>2、具体来说就是通过recovery中的install，刷入xposed的.zip文件。下载地址在XDA论坛，详情见<a href="http://forum.xda-developers.com/showthread.php?t=3034811" target="_blank" rel="external">这篇帖子</a>。简单说，nexus5手机使用基于ARM32位架构的CPU，现在安装的系统为Android6.0,SDK23，因此需要下载的xposed的压缩文件名字应该类似于<code>xposed-v87-sdk23-arm.zip</code>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219090824562?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<ul>
<li>3、进入recovery模式。首先进入fastboot（按住音量下键和电源键），之后通过音量上下键选择模式，电源键确定。</li>
</ul>
<ul>
<li>4、通过recovery模式的install安装压缩包，如下图所示。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219091150105?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161219091204293?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161219091221325?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>5、安装成功后，重启手机进入系统。</li>
<li>6、此时，开机会自动对应用程序进行优化，所以开机需要一段时间。</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161219091250919?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li><p>7、最后一步是安装xposed的应用程序，这个应有程序是搭配xposed框架使用的。在6.0的系统中，安装框架不会自动安装应用程序，需要手动安装该程序，可直接去酷安应用商店搜索下载。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219091609299?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>8、打开应用程序，此时可能需要安装更新包，然后重启手机。之后便可以安装插件了，插件安装成功后，需要到该应用程序勾选启用，并且要在重启后才可以正常使用。<br><img src="http://p7tst3obo.bkt.clouddn.com/20161219091625925?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kindle Paperwhite 2 USB升级]]></title>
      <url>https://blog.cyang.tech/2016/12/13/Kindle%20Paperwhite%202%20USB%E5%8D%87%E7%BA%A7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>关于更新方法具体请看<a href="http://blog.csdn.net/u011303443/article/details/50791773" target="_blank" rel="external">Kindle Paperwhite2（第6代）5.7.2.1固件升级教程</a></p>
<h1 id="一、升级过程"><a href="#一、升级过程" class="headerlink" title="一、升级过程"></a>一、升级过程</h1><ul>
<li>下载<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213220745915?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<a id="more"></a>
<ul>
<li><p>拷贝到kindle<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213220814207?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>升级提示<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213221605991?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>重启升级<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213221618006?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="二、更新内容"><a href="#二、更新内容" class="headerlink" title="二、更新内容"></a>二、更新内容</h1><ul>
<li><p>1、更新了设置界面<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213221823119?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、汉字注音<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213221852073?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20161213221905620?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20161213221931446?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li>3、全新字体 Amazon Ember Bold<br><img src="http://p7tst3obo.bkt.clouddn.com/20161213222000836?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言宏定义的几种简单用法]]></title>
      <url>https://blog.cyang.tech/2016/12/02/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li><p>1、计算数组的大小</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> countof(a) (sizeof(a)/sizeof(*(a)))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>2、转换大小写字母</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> FS_TOUPPER(x) ((((x) >= 'a') &amp;&amp; ((x) &lt;= 'z')) ? (x) - 'a' + 'A' : (x))</span>
<span class="token macro property">#<span class="token directive keyword">define</span> FS_TOLOWER(x) ((((x) >= 'A') &amp;&amp; ((x) &lt;= 'Z')) ? (x) - 'A' + 'a' : (x))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>3、大小端模式转换</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SWAP16(x) (((x) &lt;&lt; 8) &amp; 0xff00) | (((x) >> 8) &amp; 0xff)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SWAP32(x) ((((uint32_t)(x) >> 24) &amp; 0xff) | (((uint32_t)(x) >> 8) &amp; 0xff00) | (((uint32_t)(x) &lt;&lt; 8) &amp; 0xff0000) | (((uint32_t)(x) &lt;&lt; 24) &amp; 0xff000000))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>4、生成字，双字</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAKE_DWORD(b3, b2, b1, b0) (((uint32_t)((uint8_t)(b3) &lt;&lt; 24)) | ((uint8_t)(b2) &lt;&lt; 16) | ((uint8_t)(b1) &lt;&lt; 8) | ((uint8_t)(b0)))</span>
<span class="token macro property">#<span class="token directive keyword">define</span> MAKE_WORD(h, l)  (((uint32_t)(h) &lt;&lt; 8) | ((l) &amp; 0xffff))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>5、获取高，低字节</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_HIGH(x) ((uint32_t)(x) >> 16)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_LOW(x)  ((uint32_t)(x) &amp; 0xffff)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_HIGHBYTE(x) ((uint32_t)(x) >> 24)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_LOWBYTE(x)    ((uint32_t)(x) &amp; 0xff)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>6、计算结构体成员的偏移量</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OFFSET(s,m)  (size_t)&amp;(((s * )0)->m)  </span><span class="token comment" spellcheck="true">//计算分量 m 在结构体 s 中的偏移量，单位是字节</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="以上宏定义的示例程序"><a href="#以上宏定义的示例程序" class="headerlink" title="以上宏定义的示例程序"></a>以上宏定义的示例程序</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> countof(a) (sizeof(a)/sizeof(*(a)))</span>

<span class="token macro property">#<span class="token directive keyword">define</span> FS_TOUPPER(x) ((((x) >= 'a') &amp;&amp; ((x) &lt;= 'z')) ? (x) - 'a' + 'A' : (x))</span>
<span class="token macro property">#<span class="token directive keyword">define</span> FS_TOLOWER(x) ((((x) >= 'A') &amp;&amp; ((x) &lt;= 'Z')) ? (x) - 'A' + 'a' : (x))</span>

<span class="token macro property">#<span class="token directive keyword">define</span> SWAP16(x) (((x) &lt;&lt; 8) &amp; 0xff00) | (((x) >> 8) &amp; 0xff)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> SWAP32(x) ((((uint32_t)(x) >> 24) &amp; 0xff) | (((uint32_t)(x) >> 8) &amp; 0xff00) | (((uint32_t)(x) &lt;&lt; 8) &amp; 0xff0000) | (((uint32_t)(x) &lt;&lt; 24) &amp; 0xff000000))</span>

<span class="token macro property">#<span class="token directive keyword">define</span> MAKE_DWORD(b3, b2, b1, b0) (((uint32_t)((uint8_t)(b3) &lt;&lt; 24)) | ((uint8_t)(b2) &lt;&lt; 16) | ((uint8_t)(b1) &lt;&lt; 8) | ((uint8_t)(b0)))</span>
<span class="token macro property">#<span class="token directive keyword">define</span> MAKE_WORD(h, l)  (((uint32_t)(h) &lt;&lt; 8) | ((l) &amp; 0xffff))</span>

<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_HIGH(x) ((uint32_t)(x) >> 16)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_LOW(x)  ((uint32_t)(x) &amp; 0xffff)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_HIGHBYTE(x) ((uint32_t)(x) >> 24)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> GET_WORD_LOWBYTE(x)    ((uint32_t)(x) &amp; 0xff)</span>

<span class="token macro property">#<span class="token directive keyword">define</span> OFFSET(s,m)  (size_t)&amp;(((s * )0)->m)  </span>

<span class="token keyword">void</span> <span class="token function">test_countof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">countof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test_FSTOUPPER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is a test"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ans_up<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ans_low<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">14</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ans_up<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FS_TOUPPER</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>ans_up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">14</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ans_low<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FS_TOLOWER</span><span class="token punctuation">(</span>ans_up<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>ans_low<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test_SWAP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    uint16_t x <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
    uint32_t y <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">SWAP16</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">SWAP32</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test_MAKE_WORD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    uint8_t a <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>
    uint8_t b <span class="token operator">=</span> <span class="token number">0x34</span><span class="token punctuation">;</span>
    uint8_t c <span class="token operator">=</span> <span class="token number">0x56</span><span class="token punctuation">;</span>
    uint8_t d <span class="token operator">=</span> <span class="token number">0x78</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">MAKE_WORD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">MAKE_DWORD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test_GET_WORD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    uint32_t a <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">GET_WORD_HIGH</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">GET_WORD_LOW</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">GET_WORD_HIGHBYTE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token function">GET_WORD_LOWBYTE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> _test
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token keyword">char</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>test_t<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test_OFFSET</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">mymacro</span><span class="token punctuation">(</span>test_t<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">mymacro</span><span class="token punctuation">(</span>test_t<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">mymacro</span><span class="token punctuation">(</span>test_t<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">test_countof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">test_FSTOUPPER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">test_SWAP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">test_MAKE_WORD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">test_GET_WORD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">test_OFFSET</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BootLoader浅析]]></title>
      <url>https://blog.cyang.tech/2016/11/28/BootLoader%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>关于Bootloader，从书上的文字描述，很难理解这个名词是什么，有什么用。这次用到了，算是有了更进一步的认识。</p>
<h2 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h2><ul>
<li>1、BootLoader就是单片机启动时候运行的一段小程序，这段程序负责单片机固件的更新，也就是单片机选择性的自己给自己下程序。可以更新，也可以不更新，更新的话，BootLoader更新完程序后，跳转到新程序运行；不更新的话，BootLoader直接跳转到原来的程序去运行。</li>
<li>2、BootLoader更新完程序后并不擦除自己，下次启动后依然先运行BootLoader程序，又可以选择性的更新或者不更新程序，所以BootLoader就是用来管理单片机程序的更新。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、在实际的单片机工程项目中，如果加入了BootLoader功能，就可以给单片机日后升级程序留出一个接口，方便日后单片机程序更新。当然，这就需要创建两个工程项目，一个为BootLoader工程，一个为APP工程。</li>
<li>4、BootLoader工程生成的.hex或者.bin文件通常下载到ROM或Flash中的首地址，这样可以保证上电后先运行BootLoader程序。而APP工程生成的.hex或者.bin文件则下载到ROM或Flash中BootLoader后面的地址中。也就是说，存在ROM/Flash中的内容是分为两部分的。</li>
<li>5、要实现在同一个ROM/Flash中保存两段程序，并且保证不能相互覆盖，则需要在下载程序时指定地址。如在Keil下，可以进行如下的调整。</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161128154143013?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>6、实际上，在STM32系列的单片机中，Flash本身就是分扇区的，一个扇区16KB的样子，具体可以查看手册。那么就可以用从第一个扇区的首地址开始下载BootLoader的程序，而从第二个扇区的起始地址开始下载APP程序。如下为STM32F4系列芯片的Flash模块。</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20161128154224828?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>7、单片机上电之后开始执行BootLoader程序，这是单片机会检测用户是否有升级应用程序（APP）的请求，具体表现有很多种，例如检测内存卡，Nand Flash中是否包含升级文件，串口/I2C/SPI等外设接口是否传来升级文件。据说还有使用GSM来升级的。</li>
<li>8、所谓的升级，就是将ROM/Flash中存储APP程序的扇区内容擦除并写入新文件。例如一次固件升级的过程可以是：1、单片机上电执行BootLoader，2、BootLoader查找升级文件，3、若找到文件，擦除Flash中的部分扇区（存APP的），4、在擦除的扇区写入升级的文件，5、写入完成，读取数据检验是否出错，6、若数据一致，升级成功，删除升级文件，7、BootLoader程序跳转到APP程序执行。删除升级文件是为了下次上电后不再进行升级。</li>
<li>9、所谓的跳转，可以理解程序指针的改变，变为指向APP程序扇区的起始地址。</li>
</ul>
<h2 id="二、部分代码"><a href="#二、部分代码" class="headerlink" title="二、部分代码"></a>二、部分代码</h2><ul>
<li>1、主函数</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//STM32初始化</span>
    <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时钟配置</span>
    <span class="token function">System_GPIOInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IO口配置</span>

    <span class="token macro property">#<span class="token directive keyword">ifdef</span> BOOTLOAD_DISPLAY_ENABLE</span>
    <span class="token function">SystemColorInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示屏配置</span>
    <span class="token macro property">#<span class="token directive keyword">endif</span></span>

    <span class="token function">System_LoadUpdateFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升级函数</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、升级函数</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">System_LoadUpdateFile</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint8_t res<span class="token punctuation">;</span>    
    <span class="token keyword">if</span><span class="token punctuation">(</span>bNandFlash_Error<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果NandFlash错误，串口打印错误信息，跳转到用户程序</span>
    <span class="token punctuation">{</span>
        <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"NandFlash_Error jump\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">BootLoad_Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转函数</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>bNo_FileSystem<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果没有文件系统，串口打印错误信息，跳转到用户程序</span>
    <span class="token punctuation">{</span>
        <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"no file system jump\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">BootLoad_Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转函数</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>UPDATE_FILE_PATH<span class="token punctuation">,</span> FA_READ<span class="token punctuation">)</span><span class="token operator">==</span>FR_OK<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果存在升级文件，开始执行升级</span>
    <span class="token punctuation">{</span>
        <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"update\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">BootLoad_Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是否写入成功</span>
        <span class="token punctuation">{</span>
            <span class="token function">f_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭升级文件</span>
            res<span class="token operator">=</span><span class="token function">f_unlink</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>UPDATE_FILE_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除升级文件</span>
            <span class="token function">d_printfhex</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token operator">=</span><span class="token function">f_unlink</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>UPDATE_DIR_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除升级目录</span>
            <span class="token function">d_printfhex</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">BootLoad_Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转函数</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">HAL_FLASH_Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//锁定Flash</span>
            <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"update fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">f_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭升级文件</span>
            <span class="token function">BootLoad_Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转函数</span>
        <span class="token punctuation">}</span>        
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"jump\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">f_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">BootLoad_Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>3、重写Flash函数</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">uint8_t <span class="token function">BootLoad_Program</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    uint32_t BaseAddress<span class="token operator">=</span>APPLICATION_ADDRESS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//APP地址</span>
    uint32_t i<span class="token punctuation">,</span>br<span class="token punctuation">,</span>datacnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    uint8_t data8<span class="token punctuation">;</span>
    GlobalPtr32<span class="token operator">=</span><span class="token punctuation">(</span>uint32_t <span class="token operator">*</span><span class="token punctuation">)</span>BootBuff<span class="token punctuation">;</span>
    <span class="token function">HAL_FLASH_Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解锁Flash</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">BootLoad_Erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>false<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//擦除Flash</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_printfhex32</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>fsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">f_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">,</span>BootBuff<span class="token punctuation">,</span><span class="token number">8192</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>br<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取升级文件</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>br<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_FLASH_Program</span><span class="token punctuation">(</span>FLASH_TYPEPROGRAM_WORD<span class="token punctuation">,</span> BaseAddress<span class="token punctuation">,</span> GlobalPtr32<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> HAL_OK<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写入升级文件</span>
            <span class="token punctuation">{</span>
                BaseAddress <span class="token operator">=</span> BaseAddress <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span> 
                <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"program err\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        datacnt<span class="token operator">+</span><span class="token operator">=</span>br<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>datacnt<span class="token operator">>=</span>File<span class="token punctuation">.</span>fsize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写入完成</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"verify\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//验证Flash中的内容与升级文件是否一致</span>
    <span class="token function">f_lseek</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若一致代表升级成功</span>
    datacnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//若不一致代表升级失败</span>
    BaseAddress<span class="token operator">=</span>APPLICATION_ADDRESS<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">f_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>File<span class="token punctuation">,</span>BootBuff<span class="token punctuation">,</span><span class="token number">8192</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>br<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>br<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            data8 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__IO uint8_t<span class="token operator">*</span><span class="token punctuation">)</span>BaseAddress<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data8 <span class="token operator">!=</span> BootBuff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            BaseAddress <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        datacnt<span class="token operator">+</span><span class="token operator">=</span>br<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>datacnt<span class="token operator">>=</span>File<span class="token punctuation">.</span>fsize<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">HAL_FLASH_Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//锁定Flash</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>4、跳转函数（从BootLoader中跳转到APP的main函数）</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BootLoad_Jump</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* Check Vector Table: Test if user code is programmed starting from address 
    "APPLICATION_ADDRESS" */</span>
    <span class="token function">d_printfhex32</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__IO uint32_t<span class="token operator">*</span><span class="token punctuation">)</span>APPLICATION_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__IO uint32_t<span class="token operator">*</span><span class="token punctuation">)</span>APPLICATION_ADDRESS<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x2FFE0000</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x20000000</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    JumpAddress <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__IO uint32_t<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>APPLICATION_ADDRESS <span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">d_printfhex32</span><span class="token punctuation">(</span>JumpAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Jump_To_Application <span class="token operator">=</span> <span class="token punctuation">(</span>pFunction<span class="token punctuation">)</span> JumpAddress<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* Initialize user application's Stack Pointer */</span>
    <span class="token function">__set_MSP</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>__IO uint32_t<span class="token operator">*</span><span class="token punctuation">)</span> APPLICATION_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Jump_To_Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python分割文件为指定大小]]></title>
      <url>https://blog.cyang.tech/2016/11/03/Python%20%E5%88%86%E5%89%B2%E6%96%87%E4%BB%B6%E4%B8%BA%E6%8C%87%E5%AE%9A%E5%A4%A7%E5%B0%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/Python%20split.png" alt=""></p>
<p>本文参考<a href="http://www.cnblogs.com/shenghl/p/3946656.html" target="_blank" rel="external">python学习–大文件分割与合并</a></p>
<h1 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h1><p>1、使用python将文件分割成指定大小，便于传输。例如，在文件大小大于U盘大小时，可使用改程序将数据进行切割。<br>2、本程序在每一个切割文件的前四个字节，添加了表示分割后的文件序号以及分割后的文件总数。</p>
<a id="more"></a>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><pre><code># coding=utf-8

import sys,os

kilobytes = 1024 #1K byte
megabytes = kilobytes*1000 #1M byte
chunksize = int(200*megabytes) #default chunksize

def getPartSum(fromfile,chunksize):
    &#39;&#39;&#39;
    get the total number of part
    &#39;&#39;&#39;
    if os.path.getsize(fromfile)%chunksize != 0:
        return int(os.path.getsize(fromfile)/chunksize)+1
    else:
        return int(os.path.getsize(fromfile)/chunksize)

def split(fromfile,todir,chunksize=chunksize):
    &#39;&#39;&#39;
    split files by the chunksize
    &#39;&#39;&#39;
    if not os.path.exists(todir):#check whether todir exists or not
        os.mkdir(todir)          #make a folder
    else:
        for fname in os.listdir(todir):
            os.remove(os.path.join(todir,fname))
    partnum = 0  # the number of part
    partsum = getPartSum(fromfile,chunksize)  # the sum of parts
    inputfile = open(fromfile,&#39;rb&#39;)# open the fromfile
    while True:
        chunk = inputfile.read(chunksize)
        if not chunk:             # check the chunk is empty
            break
        partnum += 1
        filename = os.path.join(todir,(&#39;part%04d&#39;%partnum)) # make file name
        fileobj = open(filename,&#39;wb&#39;)  # create partfile
        fileobj.write(bytes.fromhex(&#39;%04x&#39;%partnum)) #write the serial number
        fileobj.write(bytes.fromhex(&#39;%04x&#39;%partsum)) #write the sum of parts
        fileobj.write(chunk)         #write data into partfile
        fileobj.close()
    return partnum
if __name__==&#39;__main__&#39;:
        fromfile  = input(&#39;File to be split?&#39;)
        todir     = input(&#39;Directory to store part files?&#39;)
        chunksize = int(input(&#39;Chunksize to be split?&#39;))
        absfrom,absto = map(os.path.abspath,[fromfile,todir])
        print(&#39;Splitting&#39;,absfrom,&#39;to&#39;,absto,&#39;by&#39;,chunksize)
        try:
            parts = split(fromfile,todir,chunksize)
        except:
            print(&#39;Error during split:&#39;)
            print(sys.exc_info()[0],sys.exc_info()[1])
        else:
            print(&#39;split finished:&#39;,parts,&#39;parts are in&#39;,absto)
</code></pre><h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><p><img src="http://p7tst3obo.bkt.clouddn.com/python%20split%20demo.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Static  __Inline 在IAR和keil开发环境下的差别]]></title>
      <url>https://blog.cyang.tech/2016/11/03/static%20%20__inline%20%E5%9C%A8IAR%E5%92%8Ckeil%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%B7%AE%E5%88%AB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>static  __inline这条语句在IAR和Keil下的需要写成不同的形式，否则会报错。</p>
<a id="more"></a>
<p>如下：<br>1、IAR错误<br><img src="http://p7tst3obo.bkt.clouddn.com/20161029185507754?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>2、IAR正确<br><img src="http://p7tst3obo.bkt.clouddn.com/20161029185541584?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>3、Keil错误<br><img src="http://p7tst3obo.bkt.clouddn.com/20161029185550240?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>4、Keil正确<br><img src="http://p7tst3obo.bkt.clouddn.com/20161029185556693?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>总结就是，在IAR环境下，需要写成<code>static inline</code>，而在keil环境下，需要写成<code>static __inline</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32固件库 Assert_param函数]]></title>
      <url>https://blog.cyang.tech/2016/11/02/STM32%E5%9B%BA%E4%BB%B6%E5%BA%93%20assert_param%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/assert_param.png" alt=""></p>
<h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><p>-1、固件函数库通过检查库函书的输入来实现运行时间错误侦测。通过使用宏assert_param来实现运行时间检测。所有要求输入参数的函数都使用这个宏。它可以检查输入参数是否在允许的范围之内。</p>
<a id="more"></a>
<p>例如通过定义</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC1) || \
                                   ((PERIPH) == ADC2) || \
                                   ((PERIPH) == ADC3))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样在每次调用带输入参数的函数时,都会对所输入的参数进行检查，例如</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ADC_ClearFlag</span><span class="token punctuation">(</span>ADC_TypeDef<span class="token operator">*</span> ADCx<span class="token punctuation">,</span> uint8_t ADC_FLAG<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* Check the parameters */</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_ADC_ALL_PERIPH</span><span class="token punctuation">(</span>ADCx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_ADC_CLEAR_FLAG</span><span class="token punctuation">(</span>ADC_FLAG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/* Clear the selected ADC flags */</span>
  ADCx<span class="token operator">-></span>SR <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>ADC_FLAG<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际上关于宏<code>assert_param</code>的定义如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Exported macro ------------------------------------------------------------*/</span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span>  USE_FULL_ASSERT</span>

<span class="token comment" spellcheck="true">/**
  * @brief  The assert_param macro is used for function's parameters check.
  * @param  expr: If expr is false, it calls assert_failed function
  *   which reports the name of the source file and the source
  *   line number of the call that failed.
  *   If expr is true, it returns no value.
  * @retval None
  */</span>
  <span class="token macro property">#<span class="token directive keyword">define</span> assert_param(expr) ((expr) ? (void)0 : assert_failed((uint8_t *)__FILE__, __LINE__))</span>
<span class="token comment" spellcheck="true">/* Exported functions ------------------------------------------------------- */</span>
  <span class="token keyword">void</span> <span class="token function">assert_failed</span><span class="token punctuation">(</span>uint8_t<span class="token operator">*</span> file<span class="token punctuation">,</span> uint32_t line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
  <span class="token macro property">#<span class="token directive keyword">define</span> assert_param(expr) ((void)0)</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果在定义了<code>USE_FULL_ASSERT</code>的情况下，那么<code>assert_param</code>的宏定义就是一个条件运算符,类似于<code>a=(b&gt;c)?b:c</code>,即如果b&gt;c，则a=b；否则a=c。如果在没定义<code>USE_FULL_ASSERT</code>的情况下，就是一个空函数。</p>
<p>就是说如果输入正确，则<code>IS_ADC_ALL_PERIPH(ADCx)</code>值为1，则<code>assert_param(IS_ADC_ALL_PERIPH(ADCx))</code>运行(void)0,否则执行后一个函数<code>assert_failed((uint8_t *)__FILE__, __LINE__)</code>。</p>
<p>关于<code>assert_failed((uint8_t *)__FILE__, __LINE__)</code>，这个函数是用来打印错误信息的，用户可以自己编程，用于打印出程序错误的地方，这个函数是在main.c里面的，函数原型如下：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span>  USE_FULL_ASSERT</span>

<span class="token comment" spellcheck="true">/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */</span>
<span class="token keyword">void</span> <span class="token function">assert_failed</span><span class="token punctuation">(</span>uint8_t<span class="token operator">*</span> file<span class="token punctuation">,</span> uint32_t line<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */</span>

  <span class="token comment" spellcheck="true">/* Infinite loop */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h1><ul>
<li>1、在上述的代码中，出现了<code>\</code>符号，这个符号的作用是当程序不在一行时，连接程序几部分。如下:<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC1) || \
                                 ((PERIPH) == ADC2) || \
                                 ((PERIPH) == ADC3))</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
表示<code>PERIPH</code>可以为<code>ADC1</code>或<code>ADC2</code>或<code>ADC3</code>.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SPI总线协议]]></title>
      <url>https://blog.cyang.tech/2016/10/06/SPI%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/SPI%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86.png" alt=""></p>
<h2 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h2><ul>
<li>1、SPI：Serial Peripheral Interface，串行外围设备接口，是一种高速，半/全双工，同步的通信总线。</li>
<li>2、SPI接口主要用于EEPROM，FLASH，实时时钟，AD转换器等外接设备。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、SPI通信分为主机和从机，这取决于硬件设计和软件设置。</li>
<li>4、SPI总线一般有四根线，分别为MOSI,MISO,SCK,NSS，即主机输出，从机输入，时钟线，片选线。</li>
<li>5、如下图所示为SPI总线控制器的内部示意图：<br><img src="http://p7tst3obo.bkt.clouddn.com/SPI%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png" alt=""></li>
<li>6、下图所示为连接示例：<br><img src="http://p7tst3obo.bkt.clouddn.com/SPI%E8%BF%9E%E6%8E%A5%E5%9B%BE%E7%A4%BA.png" alt=""></li>
<li>7、SPI数据的传输过程其实就是通过一个一位寄存器来完成的，主机将自己的移位寄存器数据移出，同时从机的移位寄存器数据移入；或者从机将自己的移位寄存器数据移出，同时主机的移位寄存器数据移入。通信的速率取决于主机设置的波特率。</li>
<li>8、时钟信号的相位和极性，通过软件编程设置，用来决定数据的采集时刻（上升沿还是下降沿）以及数据传送时刻。</li>
<li>9、数据帧格式可以通过寄存器来编程设置，例如8位或者16位。</li>
<li>10、关于NSS：标准的SPI总线一般为4根线，其中包括NSS，这根线主要用于确定主机还是从机。从硬件设计的角度讲，如果作为主机，则这一根线接高电平，从机的话，这一根线接低电平。另外也可以弃用主机的这根连接线，直接采用别的GPIO管脚连接从机的NSS脚，通过GPIO输出低电平达到拉低NSS从而片选的功能。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[串口通信UART]]></title>
      <url>https://blog.cyang.tech/2016/10/05/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1UART/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/UART.jpg" alt=""></p>
<h2 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h2><ul>
<li>1、串口通信是一种异步，串行，采用电平信号的通信方式。也就是串口通信的双方没有统一的时钟信号，采用信号线的电平值表示0、1信息，并且通过串行的方式每次仅发送一位数据。</li>
</ul>
<a id="more"></a>
<ul>
<li>2、在异步通信时，由于双方没有统一的时钟，所以在通信前需要预定好通信参数。包括波特率，数据位，停止位，校验位。只有设定相同的通信参数，接收方和发送方才可以进行正确的通信。</li>
<li>3、波特率表示每秒传输的比特的位数，反映出通信的速率，不能自行设置，只能从几个选项中进行选择；数据位可以选择，一把选择8位，因为常使用ASCII码值表示字符；奇偶检验位可以一定程度的避免传输过程中的错误；停止位表示一帧数据的接受。</li>
<li>4、由于每次传输都是以帧为单位的，一帧数据包括起始位，数据为，奇偶检验位，停止位组成。一般一帧数据为11为，即包括起始位1位，数据位8位，奇偶检验位1位，停止位1位。在具体的传输过程中是同步传输，即一位一位传输的，每一位之间的间隔时间是固定的，由波特率来决定。而每一帧之间的间隔时间是不固定的，也不需要固定，这就是异步通信的特点，不需要接收方一直等待数据，而是有了数据，接收到起始位之后，才按照约定的波特率对数据位进行读取，之后与奇偶检验位进行比对，最后接收到停止位代表这一帧数据传送结束。</li>
<li>5、串口通信至少需要两根线，一根为信号线，一根为参考电压线，即GND。这样可实现单工通信，也可以使用3根通信线来实现双工通信。</li>
<li>6、在RS232的接口中，比较常见的是是使用9根线来通信，其中比较重要的有3根，即RX、TX、GND，其他的为一些流控制线，在一般使用时不需要管。</li>
<li>7、DMA模式，direct memory access，直接内存访问。DMA本来是DSP中的一种技术，用于解决交换数据时不需要CPU的参与，模块自己就可以完成。这种模式和FIFO要解决的是同一个问题。FIFO只是一种轻量级的解决方案，DMA模式则适合于大量数据迸发式的发送和接受。</li>
<li>8、IrDA模式，也就是红外通信。根据红外通信的可以知道，红外发送方通过固定时间的发送红外信号或者不发送红外信号来表示0和1。这种工作方式和串口的工作方式很相似，因此有的SoC的串口具有红外模式，直接在串口上连接红外发送或者接受的硬件模块来实现红外功能。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通信原理基础]]></title>
      <url>https://blog.cyang.tech/2016/10/05/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/232.png" alt=""></p>
<h2 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h2><ul>
<li>1、通信中最重要的两个方面：信息表示、解析方法和信息的传输方式。</li>
</ul>
<a id="more"></a>
<ul>
<li>2、同步信号和异步信号的区别：发送和接受双方按照同一个时钟节拍工作就叫同步，反之为异步。同步通信用在通信双方通信频次固定，或者经常通信时。而异步通信则适合用在通信具有突发性。在通信前，发送发发送起始信号，提示接受方通信开始，之后开始发送信息，通信结束后发送停止信号。</li>
<li>3、电平信号和差分信号的区别：电平信号是与参考电压（通常为GND）来区别表示0和1的，而差分信号不存在参考电压，而是通过两个线的电压差来表示信号。电平信号的2根通信线之间的电平容易受到干扰（尤其是电平偏移），传输容易失败；差分信号不容易受到干扰，因此传输比较稳定，速率快。</li>
<li>4、串行和并行的区别：这两种方式的主要区别在于传输信号线。并行所需要的传输线比较多，因此接线较为复杂，但是同时传输的数据位数较多。</li>
<li>5、目前比较实用的组合方式为：异步，差分，串行。典型代表为USB和网线。</li>
<li>6、232电平，TTL电平，485电平的区别：</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>232</th>
<th>TTL</th>
<th>485</th>
</tr>
</thead>
<tbody>
<tr>
<td>信号种类</td>
<td>电平</td>
<td>电平</td>
<td>差分</td>
</tr>
<tr>
<td>0的表示方法</td>
<td>+3V~+15V</td>
<td>高于3.8V</td>
<td>压差+（2~6）V</td>
</tr>
<tr>
<td>1的表示方法</td>
<td>-3V~-15V</td>
<td>低于0.2V</td>
<td>压差-（2~6）V</td>
</tr>
</tbody>
</table>
<p>不论是哪种方式，都是用来表示0和1的。232的电平定义比较大，适合干扰大，距离远适合使用；TTL的电平电压范围小，适合距离近，且干扰小的情况。485电平是采用差分信号来表示的，没有固定的物理接口形式，兼容TTL，所以抗干扰能力更强，传输的距离更远，速率更快，并且可以接多个设备。</p>
<ul>
<li>7、RS232芯片，485芯片，CH340芯片的区别：232芯片是将SoC的TTL电平转换成2232电平的，这样可以通过DB9等接口和电脑等设备进行通信；而485芯片则是将TTL电平转换成485的差分信号，通过接线与别的设备进行通信；CH340是一款用于USB和串口相互转换的芯片，可将串口的电平信号转换成USB的差分信号，从而使用更加通用的USB接口与电脑等设备进行通信，不过这种方式需要在电脑上安装对应的驱动程序。</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/232.png" alt="232"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/485.png" alt="485"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/340.png" alt="340"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 IIC EEPROM实验]]></title>
      <url>https://blog.cyang.tech/2016/09/30/STM32%20IIC%20EEPROM%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/STM32%20EEPROM.png" alt=""></p>
<h1 id="一、项目说明"><a href="#一、项目说明" class="headerlink" title="一、项目说明"></a>一、项目说明</h1><p>利用 STM32 的普通 IO 口模拟 IIC 时序，并实现和 24C02 之间的双向通信，并将结果通过串口printf 输出。</p>
<a id="more"></a>
<h1 id="二、知识点"><a href="#二、知识点" class="headerlink" title="二、知识点"></a>二、知识点</h1><ul>
<li>1、关于IIC的知识点前面两篇文章已经有多介绍，本文重点从代码的角度讲解IIC的实际应用。</li>
<li>2、24C02是一款EEPROM芯片，兼容IIC总线。具有掉电不丢失，反复改写存储内容等特点。具有2K位存储容量，即256个字节，对应于256个地址。</li>
<li>3、对24C02的写操作，可以一次写一个字节，也可以一次写一页（一页有8个字节）。在一次寻址后，在同一页的情况下，写完一个字节地址会自动加一。</li>
<li>4、对24C02的读操作，不管是不是在同一页，每读完一个字节后，读取地址自动加一。</li>
<li>5、24C02的从设备地址为1010ABC，其中ABC代表可通过引脚的高低电平改变。因此可实现8种不同从设备地址，这意味着在同一个IIC总线上，最多可以挂在的24C02设备为8个。</li>
<li>6、[时钟频率]</li>
</ul>
<h1 id="三、部分代码"><a href="#三、部分代码" class="headerlink" title="三、部分代码"></a>三、部分代码</h1><ul>
<li><p>1、IIC start</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">I2C_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  I2C_SDA_H<span class="token punctuation">;</span>
  I2C_SCL_H<span class="token punctuation">;</span>
  <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  I2C_SDA_L<span class="token punctuation">;</span>
  <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  I2C_SCL_L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>2、24C02 Write</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AT24Cxx_WriteOneByte</span><span class="token punctuation">(</span>u16 addr<span class="token punctuation">,</span>u8 dt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>EE_TYPE<span class="token operator">></span>AT24C16<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token function">I2C_Send_Byte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">I2C_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">I2C_Send_Byte</span><span class="token punctuation">(</span>addr<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送数据地址高位</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
     <span class="token function">I2C_Send_Byte</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr<span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//器件地址+数据地址</span>
  <span class="token punctuation">}</span>

  <span class="token function">I2C_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Send_Byte</span><span class="token punctuation">(</span>addr<span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双字节是数据地址低位</span>
                          <span class="token comment" spellcheck="true">//单字节是数字地址低位</span>
  <span class="token function">I2C_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">I2C_Send_Byte</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>3、test code</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//u32 i=0;</span>
  u32 j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  u8 value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">printf_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf初始化</span>
  <span class="token function">I2C_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//IIC初始化</span>
  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/*
  for(i=0;i&lt;=255;i++){
      AT24Cxx_WriteOneByte(i,data);      //24c02写数据
      printf("写进去的数据是： %d\r\n",data);
      data--;
  }*/</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">255</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      value<span class="token operator">=</span><span class="token function">AT24Cxx_ReadOneByte</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读出来的数据是：%d\r\n"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IIC总线协议]]></title>
      <url>https://blog.cyang.tech/2016/09/30/IIC%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/iic/iic.jpg?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<blockquote>
<p>关于IIC的其他说明已在<a href="http://cyang.tech/2016/07/18/STM32%E6%80%BB%E7%BA%BF%E5%AE%9E%E9%AA%8C/" target="_blank" rel="external">《STM32总线实验》</a>中有过介绍。</p>
</blockquote>
<h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、IIC是一种串行，同步，非差分，低速率的总线连接方式。仅有两根线构成SCK，一根时钟线SDA，用于同步收发双方之间的通信频率；一根数据线，用于传输数据。</li>
</ul>
<a id="more"></a>
<ul>
<li>2、支持一对多的挂载多个设备。一个主设备对应多个从设备，由主设备来决定某一时刻与哪个从设备进行通信。</li>
<li>3、每一个I2C从设备在通信中都有一个I2C从设备地址，这个地址是从设备本身的固有属性。主机通过设备地址来确定设备。这个地址为7位数，有的设备这个地址不可更改和设置，这就决定了相同的设备类型在整个总线上只允许有一个；而有的设备的这个地址可以通过引脚高低电平确定，因此可以通过设置不同的地址而在同一总线上挂载多个相同的设备。例如EEPROM设备24C02，它的从设备地址为1010ABC,其中ABC三位可以通过引脚电平设置，因此在同一个IIC总线中，可以挂载的24C02设备最多为8个。</li>
<li>4、I2C总线只有两种状态，即空闲和忙碌。当总线空闲时，这两条线都是空闲的。</li>
<li>5、关于起始位（在 SCL 线是高电平时 SDA 线从高电平向低电平切换），停止位（当 SCL 是高电平时 SDA 线由低电平向高电平切换）以及数据传输的定义可看<a href="http://cyang.tech/2016/07/18/STM32%E6%80%BB%E7%BA%BF%E5%AE%9E%E9%AA%8C/" target="_blank" rel="external">《STM32总线实验》</a>中有过的介绍。</li>
<li>6、在第一次传输前，主设备在总线上发送从设备地址（7位），同时发送一位数据0/1，表示要向从设备进行读或者写操作。从设备根据主设备广播的地址进行匹配，配对的从设备需要对这次传输进行找到总设备进行响应，响应的方式为将SDA上的高电平拉低。</li>
<li>7、每一个通信周期的发起和结束都是由主设备来决定的，从设备只有被动的响应主设备，没法自己自发的去做任何事情。</li>
<li>8、I2C通信基本的数据单元为字节，每传输一个字节后，需要传输一个ACK表示响应。这就是所谓的应答机制。</li>
<li>9、I2C的控制器可以用来模拟产生时序，将软件协议用硬件来模拟生成，时钟来自于系统时钟，控制器内部可进行分频操作。</li>
<li>10、通信频率的确定：主设备和从设备之间有最高的通信速率限制，属于每个芯片的固有属性，实际编程时应小于设备的最低频率。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome浏览器常用插件（三）]]></title>
      <url>https://blog.cyang.tech/2016/09/24/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>接<a href="http://blog.csdn.net/u011303443/article/details/52337699" target="_blank" rel="external">《Chrome浏览器安装，常用插件（一）》</a></p>
<p>接<a href="http://blog.csdn.net/u011303443/article/details/52430503" target="_blank" rel="external">《Chrome浏览器常用插件（二）》</a></p>
<p>10、<a href="https://chrome.google.com/webstore/detail/%E6%8B%96%E6%8B%BD%E6%90%9C%E7%B4%A2/pikkaahnnohhoileadgipnfcklbalemk?utm_source=chrome-ntp-icon" target="_blank" rel="external">拖拽搜索</a><br>这是一款划词搜索的增强插件，非常的实用，使用频次也非常的高。</p>
<a id="more"></a>
<ul>
<li><p>在Chrome浏览器里，默认状态下划词是不会有反应的，如下图所示：<br><img src="http://p7tst3obo.bkt.clouddn.com/20160924222043403?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>但是可以将划词拖动到标签页，那么将在搜索引擎中搜索，不过这种方式需要拖动的距离比较远，如下图：<br><img src="http://p7tst3obo.bkt.clouddn.com/20160924222723749?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>而使用这款插件后，向左边拖动可从谷歌搜索，向右边拖到可从百度搜索，如下图：<br><strong>左边拖动 谷歌搜索</strong><br><img src="http://p7tst3obo.bkt.clouddn.com/20160924223554127?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><strong>右边拖动 百度搜索</strong><br><img src="http://p7tst3obo.bkt.clouddn.com/20160924223603895?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《以色列2：在危机中生存》]]></title>
      <url>https://blog.cyang.tech/2016/09/24/%E3%80%8A%E4%BB%A5%E8%89%B2%E5%88%972%EF%BC%9A%E5%9C%A8%E5%8D%B1%E6%9C%BA%E4%B8%AD%E7%94%9F%E5%AD%98%E3%80%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>上帝在六天之内创造了世界，而以色列在六天之内重塑了中东的政治版图。</p>
<p>《以色列2：在危机中生存》</p>
<p>在这块面积不足一平方公里的区域内，密密麻麻地分布着多处被基督教、伊斯兰教和犹太教视为圣迹的地方。</p>
<a id="more"></a>
<p>对于基督徒来说，这里有基督教中最为神圣的场所圣墓大教堂，即耶稣死后被埋葬和复活的地方。除此之外，耶稣在被钉死之前背负着十字架所走过的苦路（Via Dolorosa）也位于老城内。</p>
<p>对于犹太人来说，他们的祖先曾在老城内建造了第二圣殿。当这座圣殿于公元 70 年被罗马人摧毁后，圣殿西侧残存下来的一面城墙——西墙（Western Wall）——就成了犹太人祈祷的神圣场所之一。</p>
<p>对于穆斯林来说，位于耶路撒冷老城中圣殿山上的圆顶清真寺（Dome of the rock）是最为神圣的场所之一。根据《古兰经》中的记载，先知穆罕穆德曾经在天使的陪伴下在一夜之间由麦加来到了耶路撒冷，并在这里登上云霄，聆听真主的启示。圆顶清真寺现在所处的位置也正是犹太人的第二圣殿被摧毁前所在的地方。</p>
<p>「如果你们认为以色列能够存在是靠着美国人的承诺，而不是以色列人自身的力量，那么我无话可说。」</p>
<p>270 万以色列人该如何才能在 1 亿 2 千万阿拉伯人的包围中生存下去呢？在达扬看来，以色列发动战争最重要的目的并不是攻城略地、控制更多的区域，而是在敌人心中形成一种威慑力，让他们彻底打消入侵以色列的念头。敌人心中的恐惧，就是以色列最有效的武器。</p>
<p>在 6 月 5 日这一天早上将要进行的代号为「焦点」的空袭行动只有一个目标：在三个小时内摧毁埃及空军的 400 架飞机和所有机场。</p>
<p>每一名参加行动的飞行员在训练中都要把目标机场的各种信息在心中背得滚瓜烂熟。就算是在睡梦中突 然被叫醒，他们也必须能马上说出目标机场的方位、距离、布局以及停放飞机的型号和数量。他们还必 须知道目标机场的埃及飞行员每天几点吃早饭、几点起飞巡逻、几点返回机场。他们甚至还知道目标机 场每一名埃及塔台调度员的名字，只要听声音就知道是谁在讲话。</p>
<p>埃及空军完成这个过程需要大约八个小时，而经过严格训练的以色列空军只需要八分钟。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MX3从flyme5降级至flyme3]]></title>
      <url>https://blog.cyang.tech/2016/09/22/MX3%E4%BB%8Eflyme5%E9%99%8D%E7%BA%A7%E8%87%B3flyme3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/flyme5_flyme3.jpg" alt=""></p>
<p>很久没关注这款已经过时很久的手机了，前段时间逛贴吧突然发现官方居然升级了flyme5。一定是贴吧呼声太高，也看得出来魅族还算有诚意。</p>
<a id="more"></a>
<p>然而，新的系统运行实在是太不流畅了，也很费电，无奈之下只好降级为之前一直稳定使用的flyme3。</p>
<p>以下为小结，记录这次降级的过程。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li>1、到<a href="http://www.flyme.cn/firmwarelist-5.html" target="_blank" rel="external">官网</a>下载固件包，需下载flyme4和flyme3的，每个版本各选一个下载，几点几的小版本无所谓。</li>
<li><p>2、通过USB将下载好的两个固件包拷贝到MX3手机根目录。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204239092?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、在手机上进入文件管理。在下载时，为了不重名，文件名会自动更改。需要改回<code>update.bin</code>。 先该flyme4的，改完之后直接点开，选择升级，同时清楚手机数据。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204302865?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204319631?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、之后的过程就是耐心等待，升级完成后，再次进入手机的文件管理。重复上一步，改名，升级，勾选清除数据，之后耐心等待完成就好。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204428694?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204534048?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204551866?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160921204609351?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>1、降级的过程和升级一样，就是通过刷固件的方式。但是从5要先降到4，再降到3.</li>
<li>2、flyme5和flyme4也有很多很有意思的东西，比如悬浮球，5的输入法很好看。但是总的来说flyme3才是MX3最经典的系统，尤其是第一屏贼好看。</li>
<li>个人认为，MX3是魅族最好的一款手机。堪称经典，现在魅族出的手机一点都不魅族。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《以色列：一个国家的诞生》]]></title>
      <url>https://blog.cyang.tech/2016/09/22/%E3%80%8A%E4%BB%A5%E8%89%B2%E5%88%97%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%9B%BD%E5%AE%B6%E7%9A%84%E8%AF%9E%E7%94%9F%E3%80%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>从来没有一个国家，在诞生之后如此短的时间内就遭到了如此多国家的集体入侵。</p>
<p>《以色列：一个国家的诞生》</p>
<p>为了讨好美国政府中的犹太人群体，英国人在签署了赛克斯-皮克特协定的第二年，也就是1917年11月2日又发表了贝尔福宣言。在宣言中，英国政府承诺将帮助犹太人在巴勒斯坦建立一个民族家园。</p>
<a id="more"></a>
<p>由于感到英国政府无法提供有效的保护，犹太人在1921年成立了自己的准军事化组织哈加纳（Haganah）。哈加纳在刚刚建立时，它的一个重要政策就是克制（Restraint）。这个政策限制哈加纳成员针对阿拉伯平民进行袭击。随着阿拉伯人和犹太人之间的暴力冲突不断的升级，哈加纳内部的一些成员开始对这个政策感到不满，认为哈加纳的做法过于软弱。这些人在1931年从哈加纳中分裂出来后成立了一个新的军事组织伊尔贡（Irgun）。与自卫性质的哈加纳不同的是，伊尔贡成员信封的是“以牙还牙，以暴制暴”的恐怖理念。</p>
<p>1947年2月14日，在赛克斯画下那条直线32年后，英国人决定把巴勒斯坦问题交给联合国来处理。</p>
<p>没有信念支撑的枪炮固然并不可怕，但没有枪炮支撑的信念也只能随着肉体一同被粉碎。</p>
<p>在1947年9月，当阿拉伯国家断然拒绝联合国分治方案时，时任阿拉伯国家联盟秘书长的阿扎拉姆夏（Azzam Pasha）说过这样一段话：“政治不是一纸充满柔情的协议，它是双方武力对抗的结果。问题的根本在于，你们用来建立这个犹太国家的力量，究竟能不能超过我们用来阻止你们的力量。如果你们想要一个国家，那就自己去争取。跟我讨论内盖夫地区的归属是没有用的，想要得到内盖夫，那就自己去争取它。如果你们自己足够强大，或者在美国、英国的帮助下足够强大，那么你们自然会得到一个国家。如果你们不够强大，那么自然会遭到失败。”</p>
<p>1948年5月14日下午，英国高级专员康宁汉爵士（Sir Alan Cunningham）离开了耶路撒冷，飞往海港城市海法。几个小时后，他将在哪里乘坐英国军舰离开巴勒斯坦，结束了英国对这片土地三十年代的统治。同一个下午，在特拉维夫市中心罗斯柴尔德大道上的一个美术馆大厅里，以本-古里安为首的一群犹太复国运动的领导人们聚集在了一起，本-古里安将在这个下午宣布以色列的成立，结束犹太民族长达两千年的等待。仪式的时间和地点都进行了严格的保密，直到开始前一个小时才公布。面积不大的大厅只能容纳两百人，很多人只能站在美术馆外的马路上。</p>
<p>伊尔贡组织领袖——贝京：“泪水并不总是从眼中流出的。有时它们从心中流出，就像血一样。认识我的人都知道，命运从未吓倒过我。我从小就饱尝饥饿和痛苦的滋味。无论在他乡还是故土，死亡都时常环绕在身边。但我从来没有为此流过眼泪。一生中我只流过两次眼泪：在以色列成立的那一天，和亚特兰纳号沉没的那一天。面对敌人时，宁愿流血也决不流泪。但在面对同胞是，宁愿流泪也决不能流血。”</p>
<p>就这样，巴勒斯坦阿拉伯人成为了一个没有国家的民族，就像两千年前的犹太人一样。他们中的很多人居住在条件恶劣的难民营里，没有财产，没有国家，没有未来。他们想向世界发出自己的声音，但是大家都很忙，没人想要听。</p>
<p>在犹太裔导演斯皮尔伯格拍摄的影片《慕尼黑》中，主人公与一名年轻的巴勒斯坦恐怖分子有过一段对话。他不理解为什么对方会甘愿把年轻的生命浪费在从犹太人手中夺回巴勒斯坦这种毫无希望的事业上。在电影中，主人公不解的质问这名巴勒斯坦公布分子：“你真心觉得你们一定要回到那片不毛之地上去吗？一块贫瘠的土地、几间简陋的小石屋，这就是你想要留给你孩子的东西吗？（Do you honestly think you have to get back all that……that nothing? That chalky soil and stone huts,is that what you readlly want for your children?）”</p>
<p>想起自己民族的故土，年轻的恐怖分子眼眶湿润了。他哽咽着，一字一顿的回答说“绝对是（It absolutely is.）。”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言字符实验]]></title>
      <url>https://blog.cyang.tech/2016/09/19/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><p>代码</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token string">'\n'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token operator">-</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token function">putchar</span><span class="token punctuation">(</span> c<span class="token operator">+</span><span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
                <span class="token function">putchar</span><span class="token punctuation">(</span> c<span class="token operator">+</span><span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
                <span class="token function">putchar</span><span class="token punctuation">(</span> c<span class="token operator">+</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token function">putchar</span><span class="token punctuation">(</span> c<span class="token operator">+</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<p><strong>输入2473<cr>,输出为668977.</cr></strong></p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li><p>1、getchar和putchar都只能操作一个字符。前者为读入一个字符，后者为输出一个字符。</p>
</li>
<li><p>2、switch-case的用法，在没有break的情况下，执行完一个case会继续向下执行下一个case，直到遇上break或者switch-case语句结束。也就是说，其实switch-case仅在第一次进入是会进行case的比对，进入switch-case选择结构后不会再进行比对。</p>
</li>
</ul>
<h2 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h2><p>使用printf和scanf函数输出和输入字符</p>
<ul>
<li><p>1、无空格型，例如：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c%c%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入格式：</p>
<pre class="line-numbers language-c"><code class="language-c">ABC<span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token comment" spellcheck="true">//中间不能有空格，否则空格会被算作字符</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>2、空格型，例如：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %c %c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入格式：</p>
<pre class="line-numbers language-c"><code class="language-c">ABC<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token punctuation">,</span>A<span class="token operator">-</span>B<span class="token operator">-</span>C<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token punctuation">,</span>A<span class="token operator">--</span>B<span class="token operator">--</span><span class="token operator">--</span>C<span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token comment" spellcheck="true">//-表示空格，三种均可</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>3、指定输入格式，例如：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%4c%4c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c1<span class="token punctuation">,</span><span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入格式：</p>
<pre><code>A---B---&lt;CR&gt; //必须严格按照指定格式
</code></pre></li>
<li><p>4、交叉输入数值数据和字符数据，例如：</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">;</span> <span class="token keyword">char</span> c1<span class="token punctuation">,</span>c2<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%c%d%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a1<span class="token punctuation">,</span><span class="token operator">&amp;</span>c1<span class="token punctuation">,</span><span class="token operator">&amp;</span>a2<span class="token punctuation">,</span><span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输入格式：</p>
<pre class="line-numbers language-c"><code class="language-c">10A<span class="token operator">--</span>20B<span class="token operator">&lt;</span>CR<span class="token operator">></span>  <span class="token comment" spellcheck="true">//-代表空格，必须按照此格式。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>由上述四个例子可知，在使用scanf进行输入时，情况较为复杂，对格式要求很高。尤其是在交叉输入字符和数字时，很容易造成错误。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次超强台风——“莫兰蒂”]]></title>
      <url>https://blog.cyang.tech/2016/09/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B6%85%E5%BC%BA%E5%8F%B0%E9%A3%8E%E2%80%94%E2%80%94%E2%80%9C%E8%8E%AB%E5%85%B0%E8%92%82%E2%80%9D/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/%E5%8F%B0%E9%A3%8E%E2%80%9C%E8%8E%AB%E5%85%B0%E8%92%82%E2%80%9D.jpg" alt="台风“莫兰蒂”"></p>
<p>这是我长这么大第一次如此地接近死亡。</p>
<a id="more"></a>
<p>台风“莫兰蒂”，彻底改变我对台风的印象。大学的这几年经历过的台风怎么也有十几次了，但是没有哪一次像这次这样如此疯狂。台风来临前几天，还是和之前每次来台风一样，总是碧空万里，清澈万分。台风来临的这一天，天上的云层很厚，风很大，但还不至于让人感到警惕，因为这还在可接受的范围内。登陆前的夜晚，寝室大开着门窗，让风自由的穿过，吹的人凉快自在。再晚一点，开始下雨，将一侧的窗户关闭，以免雨水浸入。晚上12点左右，大家陆续就寝，期待着第二天的中秋节。和每一个夜晚一样，思考和幻想着进入睡眠。谁也没有预想到三小时之后会发生什么。</p>
<p>凌晨3点，我从睡梦中被吵醒。外面的风声伴随雨声，让人感到恐惧。醒来之后才发现，寝室里早有一人醒来。下床检查窗户，发现尽管已经关闭严实，但还是有很多雨水通过微小的缝隙中渗入进来。拿起手机，想要记录下这极不寻常的一刻，录下这黑暗中呼啸的风雨之声。打开微信，才发现原来朋友圈早已炸开了锅，大家都被这疾风劲雨惊醒，等待和期望着平静。舍友陆续醒来，这一刻的我们，躲在宿舍的庇护下，绝不敢打开窗户和门，也绝不会想象到外面的受损情况。看着手机里信息，有的寝室玻璃已经被风吹破，大家感概着这次台风的强度。</p>
<p>这一刻大家的情绪是复杂的，有不安，有兴奋，有恐惧，希望这狂暴的台风快快过去，又渴望在这台风之中得到更多的刺激。总之，这一刻的我们，是不冷静的。那天晚上，如果我们寝室的门窗也被这风雨打破；如果我们住的楼层再高一些，床晃动的更厉害一些；我们是否会更紧张和恐惧一些。我想答案是肯定的，因为我们处在安全的室内，房子为我们遮挡这狂风暴雨，关于死亡，我们不会想太多。</p>
<p>就在这样的状态中，过了大概半个小时，突然的有那么几分钟，风声突然停住了，根据手机上显示的台风模拟路径，大家知道，这是进入台风的风眼了，这意味着现在处于台风的中心，所以风力很弱。在这很短的几分钟里，大家试探着打开门，也去别的寝室看看情况，大家都在谈论着刚过去的半小时里的各种感受，但是不敢作过多的停留，因为大家知道，风眼即将过去，暴风雨还会来临。趁着这短暂的平静，大家也尽量平静自己的心情。回到床上，风声渐渐加剧，就是那么十几秒的事，风雨声已经和之前一样刺耳了。这意味着，风眼过去了，台风要继续向前了。带上耳机，让音乐盖过这雨声，努力平复自己的内心，寻找睡意。</p>
<p>感受着床的微微晃动，想着外面的情况，担忧着海边的人家，内心不由的就想到了高中学过的那首诗，《茅屋为秋风所破歌》。“安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山”。因为我知道，在这一刻，总有人在经历着更艰难的时刻。伴随音乐，让我想到很多美好的回忆。</p>
<p>期待着黎明的到来，缓缓睡去。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FAT文件系统]]></title>
      <url>https://blog.cyang.tech/2016/09/13/FAT%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/fat32.jpg" alt=""></p>
<blockquote>
<p>文件系统就是对数据进行存储和管理的方式，是为了长久的存储和访问数据而为用户提供的一种基于文件和目录的存储机制。</p>
</blockquote>
<h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ul>
<li>1、对硬盘进行格式化的过程就是在为硬盘写入文件系统。</li>
<li>2、文件系统种类繁多，但有一些共性：</li>
</ul>
<a id="more"></a>
<p>（1）数据单元：数据在写入磁盘或从磁盘读取数据时每次操作的数据量称为数据单元，它的大小在建立文件系统时确定。数据单元在不同的文件系统中有不同的称呼：例如在 FAT 和 NTFS 文件系统中称作“簇（Cluster）”，ExtX 中称作“块（Block）”等。一个数据单元由若干个连续的扇区组成，大小总是 2 的整数次幂个扇区。</p>
<p>（2）逻辑文件地址：对每个文件来说，将它按所在文件系统的数据单元大小为单位进行分割后，分割后的每一部分由0开始编号，这个编号就是其对应的逻辑文件地址。一个文件前后相邻的两个数据单元在物理上的存储地址可能是不连续的，当它的逻辑文件地址一定是连续的。</p>
<p>（3）分配策略：</p>
<p>1）第一可用分配策略，即当一个文件分配了一个存储单元后还要继续为其分配时，操作系统会重新从文件系统的起始处搜索可以使用的空间。</p>
<p>2）下一可用分配策略，即为文件分配了一个储存单元后并不再回到卷开始处重新寻找可用空间，而是直接向后进行搜索。</p>
<p>3）最佳分配策略，即在为文件分配空间时，会尽可能找到足够的连续空间以避免其片段化。</p>
<hr>
<h2 id="FAT表"><a href="#FAT表" class="headerlink" title="FAT表"></a>FAT表</h2><ul>
<li>3、FAT（File Allocation Table，文件分配表）文件系统是 windows 操作系统所使用的一种文件系统，它的发展过程经历了 FAT12、FAT16、FAT32 三个阶段。</li>
<li>4、FAT 文件系统用“簇”作为数据单元。一个“簇”由一组连续的扇区组成，簇所含的扇区数必须是 2的整数次幂。簇的最大值为 64 个扇区，即 32KB。所有簇从 2 开始进行编号，每个簇都有一个自己的地址编号。用户文件和目录都存储在簇中。</li>
<li>5、文件分配表FAT（File Allocation Table）用来描述文件系统内存储单元的分配状态及文件内容的前后链接关系的表格（也可以笼统的说成是记录文件所在位置的表格）。它对于FAT文件系统来讲是至关重要的一个组成部分，并且它对于硬盘的使用也非常重要，假若丢失文件分配表，那么硬盘上的数据就无法定位，也就不能使用了。</li>
</ul>
<p>（1）如果某个簇存在坏扇区，则整个簇会用 FAT 表项值 0xFFFFFF7 标记为坏簇，不再使用，这个坏簇标记就记录在它所对应的 FAT 表项中。</p>
<p>（2）由于簇号起始于 2 号，所以 FAT 表项的 0 号表项与 1 号表项不与任何簇对应。FAT32 的 0 号表项值总是“F8FFFF0F”。</p>
<p>（3）1 号表项可能被用于记录脏标志，以说明文件系统没有被正常卸载或者磁盘表面存在错误。不过这个值并不重要。正常情况下 1 号表项的值为“FFFFFFFF”或“FFFFFF0F”。</p>
<p>（4）在文件系统中新建文件时，如果新建的文件只占用一个簇，为其分配的簇对应的 FAT 表项将会写入结束标记。如果新建的文件不只占用一个簇，则在其所占用的每个簇对应的 FAT 表项中写入为其分配的下一簇的簇号，在最后一个簇对应的 FAT 表象中写入结束标记。</p>
<ul>
<li>6、文件系统大小的上限取决于 FAT 项的大小。簇链中的每个 FAT 项记录着下一个簇的簇地址，FAT 项所能表示的数字有一个上限，这个上限值也就是文件系统中的最大簇号。FAT32 文件系统的 FAT 项只使用了32bit 的 28bit，因此只能描述 268435456 个簇（实际上还要少于这个值，因为这其中还包括用作结束标记和坏簇标志的保留值）。</li>
</ul>
<hr>
<h2 id="FAT数据区"><a href="#FAT数据区" class="headerlink" title="FAT数据区"></a>FAT数据区</h2><ul>
<li>7、数据区是真正用于存放用户数据的区域。数据区紧跟在 FAT2 之后，被划分成一个个的簇。所有的簇从 2 开始进行编号。也就是说，2 号簇的起始位置就是数据区的起始位置。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FreeRTOS 学习笔记（一） OS基础]]></title>
      <url>https://blog.cyang.tech/2016/09/13/FreeRTOS%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%20OS%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/FreeRTOS.bmp" alt=""></p>
<h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、操作系统的主要功能是为应用程序的运行创造良好的环境。</li>
<li>2、操作系统的主要模块可以分为：</li>
</ul>
<a id="more"></a>
<p>（1）进程调度</p>
<p>1）通常进程有三种状态，即阻塞态，就绪态，运行态，其中阻塞态和就绪态同属于非运行态。阻塞态是指进程等待某个事件的到来，或等待其他进程占用的互斥性资源上时所处的状态；就绪态是指进程等待系统分配处理器以便运行时所处的状态；当进程占用处理器并正在运行时，称该进程处于运行态。</p>
<p>2）此外，挂起态通常也被作为进程所处的非运行状态的一种，与阻塞态和就绪态不同的是，“挂起”的进程通常是被操作系统清理出内存时所处的一种状态。由于处理器的资源是有限的，在资源不足的情况下，操作系统对在内存中的程序进行合理安排，其中有的进程被暂时调离出内存，当条件允许的时候，会被操作系统再次调回内存，重新进入就绪态。</p>
<p>3）进程调度的方式通常又分为非剥夺式和剥夺式。非剥夺式是指当某个进程占用处理器后便让它一直占用，直到进程完成或发生进程调度某事件而阻塞时，才将处理器让给另一个进程。而剥夺方式是指不管当前处理器资源是否空闲，当一个进程请求占用处理器资源时，系统可以基于某种原则，剥夺正在占用处理器资源的进程，使其退出运行态。剥夺原则有：优先权原则，短进程优先原则，时间片原则。</p>
<p>（2）进程通信</p>
<p>1）进程通信就是在不同的进程之间传播或交换信息，进程通过与内核及其他进程之间的互相通信来协调它们的行为，包括数据传输、共享数据、通知事件、资源共享和进程控制。</p>
<p>（3）存储管理</p>
<p>1）记录存储器的使用情况，包括对使用部分和空闲部分的记录；</p>
<p>2）内存空间的分配，当有进程请求分配内存空间，且条件满足时予以分配；</p>
<p>3）当多个进程请求内存空间，而现有内存空间又无法同时满足所有进程要求时，依据某种策略将某个或部分进程存入磁盘，另一部分装入内存，完成内存空间的交换。</p>
<p>（4）文件系统</p>
<p>1）文件系统为程序员提供一个良好，清晰的独立于设备的抽象文件模型，而不必考虑磁盘和其他I/O设备的操作细节。</p>
<p>（5）输入输出</p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><ul>
<li>1、在FreeRTOS中<pre><code>vTaskSuspend() //使一个任务进入挂起态
</code></pre><pre><code>vTaskResumeFromISR() //唤醒一个挂起态的任务
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FreeRTOS 学习笔记（二） 任务管理]]></title>
      <url>https://blog.cyang.tech/2016/09/13/FreeRTOS%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%20%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/FreeRTOS.bmp" alt=""></p>
<h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、FreeRTOS是一个轻量级嵌入式操作系统，源码公开，个人和商业都无需授权。</li>
</ul>
<a id="more"></a>
<ul>
<li>2、FreeRTOS内核支持优先级调度算法，每个任务可根据重要程度的不同赋予一定的优先级，CPU总是让处于就绪态的，优先级最高的任务先运行。</li>
<li>3、FreeRTOS内核同时支持轮换调度算法，系统允许不同的任务使用相同的优先级，在没有更高优先级任务就绪的情况下，同一优先级的任务共享CPU的使用时间。</li>
</ul>
<hr>
<ul>
<li>4、任务管理：</li>
</ul>
<p>（1）每个任务都是一个功能相对独立的程序。任务具有程序入口，通常运行在一个死循环中，永不退出，也不返回任何结果。任务不应该执行到实现任务代码的末尾，必要时，应在末尾添加报错功能的代码，即当程序运行到此处时，以某种方式通知用户出错。此外，通常在此处添加一个删除任务的函数<code>vTaskDelete( NULL ) //传入NULL参数表示删除的是当前的任务</code>，以确保出错时该任务不致影响其他任务的运行。</p>
<ul>
<li><p>5、任务调度：</p>
<p>（1）对于单核处理器来说，运行与内存的多个任务不可能同时获得处理器的服务，在任意给定时间内，仅会执行一个任务。这就意味着当一个任务占有处理器资源时，其他任务只能处于非运行态。</p>
<p>（2）当任务处于非运行态时，该任务进行休眠，它的所有状态都被妥善保存，以便在下一次调试器决定让它进入运行态时可以恢复执行。当任务恢复执行时，其将精确地从离开运行态时正准备执行的那一条指令开始执行。任务从非运行态转移到运行态被称为切入。相反，任务从运行态转移到非运行态被称为切出。FreeRTOS的调度器是能让任务切入切出的唯一实体。</p>
</li>
</ul>
<ul>
<li>6、任务创建<code>xTaskCreate</code>:</li>
</ul>
<p>（1）这个函数的调用需要传入很多参数，包括指向函数名的指针，函数名，任务运行参数，堆栈空间大小，优先级，任务的句柄。</p>
<p>（2）可以在主函数中创建两个任务，然后启动任务调度器<code>vTaskStartScheduler()</code>;也可以在一个函数中创建另一个函数，这需要在第一个函数进入死循环之前创建另一个任务。</p>
<ul>
<li>7、任务优先级：数值越大，优先级越高</li>
</ul>
<p>（1）调度器总是在具备运行条件的任务中，选择具有最高优先级的任务使其进入运行状态。一个高优先级但不能够运行的任务意味着不会被调度器选中，取而代之以另一个优先级虽然更低但能够运行的任务。</p>
<p>（2）FreeRTOS支持不同任务共享同一个优先级，调度器将采用时间片轮转的方式保障同优先级的任务都得以执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Win 10下安装Win 7双系统]]></title>
      <url>https://blog.cyang.tech/2016/09/11/Win%2010%20%E4%B8%8B%E5%AE%89%E8%A3%85Win%207%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/win10win7%E5%8F%8C%E7%B3%BB%E7%BB%9F.jpg" alt=""></p>
<p>上一篇文章说了在Win10下使用VM虚拟机安装双系统的教程。其实虚拟机已经可以解决很多的需求了。但问题在与，网卡的MAC地址不同。在虚拟机里就算使用桥接模式，可以正常链接网络，但还是不能使用正常网卡的MAC地址。</p>
<h1 id="一、安装说明"><a href="#一、安装说明" class="headerlink" title="一、安装说明"></a>一、安装说明</h1><ul>
<li>1、在Win 10的情况下，将磁盘进行分区，划分一个新的分区，大小依据个人情况而定，最好是50G，我这里只分了30G.</li>
<li>2、由于我的整个磁盘分区表是MBR，所以可以直接安装Win7 32位系统。</li>
</ul>
<a id="more"></a>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><ul>
<li><p>1、建议到<a href="http://www.itellyou.cn/" target="_blank" rel="external">msdn</a>下载官网镜像。下载结束会直接进行解压缩。</p>
</li>
<li><p>2、双击压缩包里的setup.exe，即可直接进行安装。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911195907037?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、在选择安装位置时，一定要选择新分出来的区。</p>
</li>
<li><p>4、安装过程大概需要30分钟。</p>
</li>
<li><p>5、安装过程中如果出现错误，说明这种方法并不可行。那么，可以选择进入PE，使用PE里的恢复选项，选择下载好的Win7系统，选择要安装的位置进行安装。</p>
</li>
</ul>
<h1 id="三、可能出项的错误"><a href="#三、可能出项的错误" class="headerlink" title="三、可能出项的错误"></a>三、可能出项的错误</h1><ul>
<li><p>1、Windows安装程序无法将Windows配置为在此计算机的硬件上运行。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911195651832?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><strong>解决方法：</strong><br>当出项如上提示的时候，按下shift+f10会打开命令窗口，进入到C:\Windows\system32\oobe文件夹，输入msoobe回车然后输入msoobe即可进入下一步操作，但是错误提示框仍在，不用理会按照屏幕提示输入相应的信息直至完成系统的安装。安装好的Win7系统没有任何问题。</p>
</li>
<li><p>2、安装过程中要求输入安装密钥，但是找不到正确的密钥。<br><strong>解决方法：</strong><br>这一步是可以直接跳过的，安装好的系统没有激活，但是有30天的试用期。可进入到系统后再激活。</p>
</li>
<li><p>3、安装结束后Win10启动项丢失。<br><strong>解决方法：</strong><br>下载大白菜装机版的PE。制作U盘PE，进入PE后选择启动项修复。</p>
</li>
</ul>
<h1 id="四、安装结果"><a href="#四、安装结果" class="headerlink" title="四、安装结果"></a>四、安装结果</h1><p>在win7下的目录结构<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911195941643?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>在win10下的目录结构<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911195950538?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Win 10下VM虚拟机安装Win 7]]></title>
      <url>https://blog.cyang.tech/2016/09/11/Win%2010%E4%B8%8BVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Win%207/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/win10win7.jpg" alt=""></p>
<p>由于主机为64位系统，近期需要用到32为系统，所以想在Win 10 64位下使用虚拟机安装一个32位的Win 7。以下为安装过程。网上的很多教程，很多还要用到PE，分区什么的。实际上在VM12虚拟机下，已经可以全自动的安装Win 7了，很多的Linux系统也都可以全自动安装。</p>
<h1 id="1、版本说明"><a href="#1、版本说明" class="headerlink" title="1、版本说明"></a>1、版本说明</h1><ul>
<li>1、VM虚拟机<br>VMware® Workstation 12 Pro</li>
<li>2、Win 7<br>Windows 7 Enterprise (x86) - DVD (Chinese-Simplified) （msdn 上下载的原装镜像文件。）</li>
</ul>
<a id="more"></a>
<h1 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h1><ul>
<li><p>1、下载所需的镜像文件，建议到<a href="http://www.itellyou.cn/" target="_blank" rel="external">MSDN</a>上下载官方镜像。64位的系统文件为x64，32位的为x86。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100338188?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、新建虚拟机，选择典型，这很重要，这会简化很多操作。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100359320?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100448898?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li><p>3、设置选项如下。需要填写密钥，这个可以去百度上搜一搜，需要搜对应版的，比如我这里的是企业版，就需要去搜索企业版的。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100502180?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>4、选择安装位置。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100538346?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>5、选择分区大小。选择将虚拟磁盘拆分成多个文件。大小建议为60G，这里我只分配了30G。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100633238?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>6、等待分区完成。这里的分区和安装Linux一样，并不会一开始就占用所有分配给的分区容量，而是用多少占多少。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100753614?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li>7、等待全自动的安装，大概需要1小时左右。中途重启3次。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100850369?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100901494?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100917760?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100934838?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160911100951963?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></li>
</ul>
<h1 id="3、结果"><a href="#3、结果" class="headerlink" title="3、结果"></a>3、结果</h1><p><img src="http://p7tst3obo.bkt.clouddn.com/20160911101039477?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160911101047479?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派使用USB摄像头和motion实现监控]]></title>
      <url>https://blog.cyang.tech/2016/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8USB%E6%91%84%E5%83%8F%E5%A4%B4%E5%92%8Cmotion%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p7tst3obo.bkt.clouddn.com/%E6%A0%91%E8%8E%93%E6%B4%BE3B.jpg" alt=""></p>
<h1 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h1><ul>
<li>1、树莓派3B</li>
<li>2、USB摄像头</li>
</ul>
<a id="more"></a>
<h1 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h1><ul>
<li><p>1、安装motion</p>
<pre><code>sudo apt-get install motion
</code></pre></li>
<li><p>2、配置motion</p>
</li>
</ul>
<p>(1)</p>
<pre><code>sudo nano /etc/default/motion
</code></pre><p>将里面的no修改成yes，让motion可以一直在后台运行：<code>start_motion_daemon=yes</code></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912231833758?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>(2)</p>
<pre><code>sudo nano /etc/motion/motion.conf
</code></pre><p>修改配置文件，这个文件比较长，请确保一下参数的配置。在nano编辑器下，可以使用^w快速查找到如下配置内容。也可以使用^v向下翻页。</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912231847133?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912231855620?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912231906196?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912232402108?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912232619513?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li><p>3、启动motion</p>
<pre><code>sudo motion
</code></pre></li>
<li><p>4、查看视频数据<br>在局域网内的设备，不管是手机还是电脑，均可打开浏览器访问<code>树莓派IP:8081</code></p>
</li>
</ul>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160912232736471?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<ul>
<li>5、退出motion<pre><code>killall -TERM motion
</code></pre></li>
</ul>
<h1 id="三、可能出现的问题"><a href="#三、可能出现的问题" class="headerlink" title="三、可能出现的问题"></a>三、可能出现的问题</h1><ul>
<li><p>1、配置错误<br>出现<code>Unknown config option &quot;sdl_threadnr&quot;</code><br><img src="http://p7tst3obo.bkt.clouddn.com/20160912232922786?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>解决方法：<br>在配置文件中，直接将这一行内容进行注释。不是下图光标所在处，是光标下面<code>sdl_threadnr 0</code>这一行，注释成<code># sdl_threadnr 0</code>即可。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160912232932546?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、8081页面无法显示<br>在8081端口，无法显示数据，但是在8080端口可以看到motion的信息。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160912233127366?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><strong>解决方法：</strong><br>这可能是摄像头没有被识别，可以将摄像头拔下重新插入。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigBee学习笔记（五） CC2530 GPIO]]></title>
      <url>https://blog.cyang.tech/2016/09/07/ZigBee%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%20CC2530%20GPIO/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、C2530有21个输入输出引脚，可以配置为通用数字I/O或外设I/O信号，另外一些I/O端口还可以连接到ADC，定时器或USART外设。I/O口功能的实现是通过一系列的寄存器配置，由软件实现。</li>
</ul>
<p>（1）端口0即P0口，有8位端口，分别是P0_0~P0_7.</p>
<p>（2）端口1即P1口，有8位端口，分别是P0_0~P0_7.</p>
<p>（3）端口2即P2口，有5位端口，分别是P0_0~P0_4.</p>
<a id="more"></a>
<ul>
<li>2、与I/O端口相关的三个寄存器分比为功能寄存器PxSEL,方向寄存器PxDIR，配置寄存器PxINP。（其中x端口的标号为0~2）。</li>
</ul>
<p>（1）功能寄存器PxSEL用于设置每个引脚为通用I/O，外设I/O，复位之后所有的数字I/O引脚都被设置成通用输入引脚。<code>0为通用I/O，1为外设I/O</code></p>
<p>（2）方向寄存器PxDIR。当端口用作通用I/O时，可以使用方向寄存器PxDIR配置其信号方向，在复位的情况下，所有的数字I/O引脚均被设置为输入引脚。<code>0为输入，1为输出</code></p>
<p>（3）配置寄存器PxINP。当端口用作通用I/O输入时，引脚可以设置为上拉/下拉,三态模式。复位之后所有的端口均被设置为带有上拉的输入。<code>0为上拉/下拉，1为三态</code></p>
<hr>
<ul>
<li>3、CC2530I/O引脚除了可以用作通用的I/O引脚之外，还可以作为外设的I/O引脚，所谓的I/O引脚即C2530的第二功能，例如串口，定时器，DMA等，外设功能的选择是由寄存器来设置的。</li>
<li>4、CC2530的外设功能有ADC,串口0（USART0）,串口1（USART1）,定时器1（TIMER1），定时器3（TIMER3），定时器4（TIMER4），32K XOSC（用于连接一个外部的32Khz晶振）和DEBUG（用于调试）。</li>
<li>5、与外设功能相关的寄存器有端口功能寄存器PxSEL,外设控制寄存器PERCFG,端口2方向寄存器P2DIR。这三个寄存器用来限定外设IO的功能的，由于端口2只有5位，所以寄存器剩下的3位有更多样的配置。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigBee学习笔记（六） CC2530 时钟 电源管理]]></title>
      <url>https://blog.cyang.tech/2016/09/07/ZigBee%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%20CC2530%20%E6%97%B6%E9%92%9F%20%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、CC2530有四个振荡器，分别为16MHz内部RC振荡器、32KHz内部RC振荡器，32MHz外部晶振和32khz外部晶振。</li>
<li>2、系统时钟可以同寄存器来选择使用32MHz的外部晶振或者16MHz的内部RC振荡器。但是当使用RF收发器时，系统时钟必须选择高速并且稳定的32MHz外部晶振。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、系统时钟的设置寄存器有时钟控制命令寄存器CLKCONCMD和时钟控制状态寄存器CLKCONSTA。</li>
</ul>
<hr>
<ul>
<li>4、CC2530提供有5种供电模式，不同的供电模式选择的系统时钟源不同。</li>
<li>5、五种模式分别为：</li>
</ul>
<p>（1）主动模式：又称完全功能模式。在此模式下CPU，外设和RF收发器都是活动的。</p>
<p>（2）空闲模式：除了CPU停止运行之外，其他的运行方式和主动模式相同。</p>
<p>（3）PM1：稳压器的数字内核开启，高频振荡器都不允许。</p>
<p>（4）PM2：具有较低的功耗，稳压器的数字内核关闭，高频振荡器都不允许。</p>
<p>（5）PM3：低功耗模式，稳压器的数字内核关闭，高频振荡器和低频振荡器都不允许。在此模式下，复位和外部I/O端口中断是该模式下仅有的运行功能。</p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><ul>
<li>1、在使用串口，DMA，RF等功能时需要对系统时钟进行初始化，以系统时钟选择32MHz晶振为例来设置系统时钟。常见的设置步骤如下：</li>
</ul>
<p>（1）系统时钟选择32Mhz晶振。</p>
<p>（2）等待32Mhz晶振稳定，因为在设备刚上电时，32MHz晶振启动时间比较长，所以刚上电时，系统运行的是16Mhz的内部RC振荡器，等待32Mhz晶振稳定之后再使用32MHz晶振。</p>
<p>（3）设置定时器时钟输出分频，也可以设置为不分频。</p>
<p>（4）关闭不用的RC振荡器。</p>
<p>示例代码：</p>
<pre><code>void InitClock(void) //初始化时钟
{
  unsigned int i;

  //turn on 16MHz RC and 32MHz XOSC
  SLEEPCMD &amp;= ~0x04;
  //wait for 32MHz XOSC stable
  while(!(SLEEPSTA &amp; 0x40));
  //chip bug workaround
  asm(&quot;nop&quot;);
  //延时63us
  for(i = 0;i &lt; 504;i++)
  {
    asm(&quot;nop&quot;);
  }
  //Select 32MHz XOSC and the source for 32K clock
  CLKCONCMD = 0x00;
  //Wait for the change to be effective
  while(CLKCONSTA != 0x00);
  //turn off 16MHz RC
  SLEEPCMD = 0x80;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《一个叫欧维的男人决定去死》]]></title>
      <url>https://blog.cyang.tech/2016/09/07/%E3%80%8A%E4%B8%80%E4%B8%AA%E5%8F%AB%E6%AC%A7%E7%BB%B4%E7%9A%84%E7%94%B7%E4%BA%BA%E5%86%B3%E5%AE%9A%E5%8E%BB%E6%AD%BB%E3%80%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>每个人的生命中总有那么一刻决定他们将成为什么样的人：<br>是不是愿意让别人骑在头上。</p>
<p>《一个叫欧维的男人决定去死》</p>
<p>人们总说欧维眼里的世界非黑即白，而她是彩色的，他的全部色彩。</p>
<p>“一个人的品质是由他的行为决定的，而不是他说的话。”欧维说。</p>
<p>“总经理还说，你九岁那年没有拿那个钱包，现在他也不相信你会偷任何东西。让他把一个正人君子的孩子送到大街上就因为那孩子也是个正人君子，这简直就是造孽。”</p>
<a id="more"></a>
<p>这是一个还没过期就已经过时的世界。整个国家都在为没人能正经做事起立鼓掌，毫无保留地为平庸欢呼喝彩。</p>
<p>大家觉得欧维是黑夜是因为他太善良了，不忍心把太阳点燃。</p>
<p>每个人的生命中总有那么一刻决定他们将成为什么样的人。如果你不了解那个故事，就不了解那个人。</p>
<p>要是有人问起，他会说，在她之前，他没有生活。之后也没有。</p>
<p>他或许不为她吟诗、唱夜曲，也从来没有送过她昂贵的礼物，但从来没有别的男孩就因为喜欢坐在她身边听她说话而愿意反方向坐几个小时火车。</p>
<p>“现在你得加倍爱我。”她要求道。于是欧维对她撒了谎，说他会的。尽管他心里很清楚，他已经不可能比现在更爱她了。</p>
<p>“爱上一个人就像搬进一座房子，”索雅曾说，“一开始你会爱上新的一切，陶醉于拥有它的每一个清晨，就好像害怕会有人突然冲进房门指出这是个错误，你根本不该住得那么好。但经年累月房子的外墙开始陈旧，木板七翘八裂，你会因为它本该完美的不完美而渐渐不再那么爱它。然后你渐渐谙熟所有的破绽和瑕疵。天冷的时候，如何避免钥匙卡在锁孔里；哪块地板踩上去的时候容易弯曲；怎么打开一扇门又恰好可以不让它嘎吱作响。这些都是会赋予你归属感的小秘密。”</p>
<p>死亡是一桩奇怪的事情。人们终其一生都在假装它并不存在，尽管这是生命的最大动机之一。我们其中一些人有足够时间认识死亡，他们得以活的更加努力、更执着、更壮烈。有些人却要等到它真正逼近时才意识到它的反义词有多美好。另一些人深受其困扰，在它宣布到来之前就早早地坐进等候室。我们害怕它，但我们更害怕它发生在身边的人身上。对死亡最大的恐惧，在于它与我们擦肩而过，留下我们独自一人。</p>
<p>时间是一桩奇怪的事情。大多数人只为了未来生活。几天之后，几周之后，或者几年。每个人一生中最恼人的那一刻可能就是突然意识到自己已经到了回忆比展望更多的年龄。当来日无多的时候，必须有别的动力让人活下去。或许是回忆。午后的阳光中牵着某人的手，鲜花绽放的花坛，周日的咖啡馆。或许是孙子孙女。人们为了别人的未来继续生活。索雅离开欧维的时候，他并没有一起死去。他只是不再活着。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigBee学习笔记（三）]]></title>
      <url>https://blog.cyang.tech/2016/09/06/ZigBee%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、ZigBee的协议栈常用的有两个版本，即德州仪器公司的Z-stack协议栈和飞思卡尔的BeeStack协议栈。</li>
</ul>
<a id="more"></a>
<p>（1）德州仪器的Z-stack协议栈是一款免费的、半开源的ZigBee协议栈，目前的最新版本的为ZigBee2007 PRO,但是它向后兼容ZigBee 2006 和 ZigBee 2004.此协议栈与IAR开发环境配合使用。</p>
<p>（2）飞思卡尔的BeeStack协议栈是该公司一款完成的ZigBee协议栈。此协议栈为不开源，收费的协议栈。</p>
<ul>
<li>2、与Z=Stack协议栈配合使用的ZigBee芯片主要有德州仪器生成的CC2430/CC2431,CC2530/CC2531，CC2538。</li>
</ul>
<p>（1）CC2430/CC2431集成8051内核与射频模块，主要用于实现嵌入式ZigBee应用的片上系统。</p>
<p>（2）CC2530/CC2531是CC2430/CC2431的升级版。结合了德州仪器在业界领先的ZigBee2007PRO,提供了完善的、强大的ZigBee解决方案。CC2531比CC2530多一个USB接口。CC2530系列芯片向后兼容CC2430。</p>
<p>（3）CC2538是一款针对高性能ZigBee应用的理想片上系统。该芯片包含基于ARM Cortex-M3的强大MCU系统，具有高达32KB的片上RAM、512KB的片上闪存和可靠的IEEE 802.15.4射频功能。</p>
<ul>
<li>3、ZigBee设备的核心模块主要是CC2530，CC2530是设备的控制中心，通过软件设置可以实现数据的发送和接受，实现ZigBee协调器，ZigBee路由器，ZigBee终端设备三种角色的各种功能。尽管有三种不同的角色，但是其使用的硬件都是一样的，只是通过软件设置为三种不一样的功能。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigBee学习笔记（四） CC2530]]></title>
      <url>https://blog.cyang.tech/2016/09/06/ZigBee%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%20CC2530/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、CC2530的CPU采用增强型8051内核，兼容业界标准的8051微控制器并使用标准的8051指令集，增强型8051指令的执行速度要比标准的8051执行速度要快。其原因如下：</li>
</ul>
<p>（1）标准的8051每个指令周期为12个时钟周期，但是增强型8051的每个指令周期为一个时钟周期。</p>
<p>（2）增强型8051消除了总线状态的浪费。</p>
<p>（3）增强型8051在内核结构上还做了一些改善，增加了第二个数据指针和一个扩展的18个中断单元。另外在寄存器方面也有所改动，使用了一些外设单元的特殊寄存器。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome浏览器常用插件（二）]]></title>
      <url>https://blog.cyang.tech/2016/09/04/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>接<a href="http://cyang.tech/2016/08/27/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">《Chrome浏览器安装，常用插件（一）》</a></p>
<a id="more"></a>
<p>4、<a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="external">ABP</a><br>广告拦截，不多说。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160904093751214?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>5、<a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="external">OneTab</a><br>可以讲浏览器标签页暂时收集起来，以便以后恢复。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160904095316821?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>6、<a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" target="_blank" rel="external">Isometric Contributions</a><br>可以将github的日活跃图从平面的改成立体的。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160904095830532?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>7、<a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="external">Octotree</a><br>可以讲github上的项目文件结构显示在左侧。如下图：<br><img src="http://p7tst3obo.bkt.clouddn.com/20160904100214554?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>8、<a href="https://chrome.google.com/webstore/detail/%E6%89%A9%E5%B1%95%E7%AE%A1%E7%90%86%E5%99%A8/gjldcdngmdknpinoemndlidpcabkggco" target="_blank" rel="external">扩展管理器</a><br>扩展程序管理器，可以方便的对Chrome的扩展程序进行管理。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160904100427120?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>9、<a href="https://chrome.google.com/webstore/detail/undoclosetab/agoafanmgjplfjeiabopkembipjbpnac" target="_blank" rel="external">UndoCloseTab</a></p>
<p>恢复关闭的页面</p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160904100601678?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigBee学习笔记（二）]]></title>
      <url>https://blog.cyang.tech/2016/09/02/ZigBee%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、ZigBee网络支持星状、树状和网状拓扑结构。</li>
</ul>
<p>（1）星状网络由一个PAN协调器和多个终端设备组成，只存在PAN协调器与终端的通讯，终端设备间的通讯都需要通过PAN协调器的转发。</p>
<p>（2）树状网络由一个协调器和一个或者多个星状结构连接而成，设备除了能与自己的父节点或子节点进行点对点直接通讯外，其他只能通过树状路由完成消息传输。</p>
<p>（3）网状网络是树状网络基础上实现的，与树状网络不同的是，它允许网络中所有具有路由功能的节点直接互连，由路由器中的路由表实现消息的网状路由。该拓扑的优点是减少了消息延迟，增强了可靠性，缺点是需要更多的存储空间开销。</p>
<ul>
<li>2、无论是哪种网络结构，都是由协调器初始化并建立的。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigBee学习笔记（一）]]></title>
      <url>https://blog.cyang.tech/2016/09/02/ZigBee%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h1><ul>
<li>1、在ZigBee无线传感器网络中，有三种设备类型：协调器，路由器和终端节点，设备类型是由ZigBee协议栈不同的编译选项来选择的。</li>
<li>2、ZigBee网络由一个协议器，多个路由器和多个终端节点组成。</li>
</ul>
<p>（1）协议器主要负责网络组建、维护、控制终端节点的加入等。</p>
<p>（2）路由器主要负责数据包的路由选择。</p>
<p>（3）终端节点负责数据的采集，不具有路由的功能。</p>
<ul>
<li>3、协议器上电之后，会按照编译时给定的参数，选择合适的信道，合适的网络号建立ZigBee无线网络。</li>
<li>4、终端上电之后，会进行硬件初始化，然后搜索是否有ZigBee无线网络，如果有再自动加入，然后发送数据到协调器。</li>
<li>5、协议期可以给终端发送广播数据包。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（八） GPIO]]></title>
      <url>https://blog.cyang.tech/2016/09/01/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%20GPIO/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、STM32的每个IO端口都有7个寄存器来控制。分别为：</li>
</ul>
<table>
<thead>
<tr>
<th>功能</th>
<th>名称</th>
<th>位数</th>
</tr>
</thead>
<tbody>
<tr>
<td>配置寄存器1</td>
<td>CRL</td>
<td>32</td>
</tr>
<tr>
<td>配置寄存器2</td>
<td>CRH</td>
<td>32</td>
</tr>
<tr>
<td>数据寄存器1</td>
<td>IDR</td>
<td>32</td>
</tr>
<tr>
<td>数据寄存器2</td>
<td>ODR</td>
<td>32</td>
</tr>
<tr>
<td>置位复位寄存器</td>
<td>BSRR</td>
<td>32</td>
</tr>
<tr>
<td>复位寄存器</td>
<td>BRR</td>
<td>16</td>
</tr>
<tr>
<td>锁定寄存器</td>
<td>LCRR</td>
<td>32</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<ul>
<li>2、常用的有四个，分别为CRL,CRH,IDR,ODR。其中CRL.CRH控制着每个IO口的模式和输出速率,输出速率有10M,2M,50M。</li>
<li>3、每个IO口都可以被软件配置成8种模式，分别为如下8种。</li>
</ul>
<table>
<thead>
<tr>
<th>输入</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入浮空</td>
<td>开漏输出</td>
</tr>
<tr>
<td>输入上拉</td>
<td>推挽输出</td>
</tr>
<tr>
<td>输入下拉</td>
<td>推挽式复用功能</td>
</tr>
<tr>
<td>模拟输入</td>
<td>开漏复用功能</td>
</tr>
</tbody>
</table>
<ul>
<li>4、GPIO_Init函数</li>
</ul>
<p>（1）该函数用于初始化IO口。</p>
<p>（2）具有两个输入参数，分别为GPIOx,&amp;GPIO_InitStruct.</p>
<p>（3）返回值为空。</p>
<p>（4）示例<code>GPIO_Init(GPIOB,&amp;GPIO_InitStruct)</code></p>
<ul>
<li>5、GPIO_InitStruct 定义在 <code>stm32f10x_gpio.h</code> 文件中。代码如下：</li>
</ul>
<pre><code>typedef struct{
uint16_t GPIO_Pin;
GPIOSpeed_TypeDef GPIO_Speed;
GPIOMode_TypeDef GPIO_Mode;
} GPIO_InitTypeDef;
</code></pre><ul>
<li>6、GPIO口所用的时钟PCLK2采用默认值，为72MHz。采用默认值不可以修改分频器，但是外设时钟默认处在关闭状态，所以外设时钟一般会在初始化外设时钟的时候开启，开启和关闭外设时钟也有封装好的库函数<code>RCC_APB2PeriphClockCmd()</code>。</li>
</ul>
<p>（1）使用示例：<code>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</code></p>
<ul>
<li>7、控制IO口的输出电平是通过两个函数来控制的。</li>
</ul>
<p>（1）输出高电平示例<code>GPIO_SetBits(GPIOA,GPIO_Pin_10|GPIO_Pin_15);</code></p>
<p>（2）输出低电平示例<code>GPIO_ResetBits(GPIOA,GPIO_Pin_10|GPIO_Pin_15);</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java和c++的区别（一）]]></title>
      <url>https://blog.cyang.tech/2016/09/01/java%E5%92%8Cc++%E5%8C%BA%E5%88%AB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="在C-中，对参数的引用有两种方式，一种为引用传递，一种为复制传递。"><a href="#在C-中，对参数的引用有两种方式，一种为引用传递，一种为复制传递。" class="headerlink" title="在C++中，对参数的引用有两种方式，一种为引用传递，一种为复制传递。"></a>在C++中，对参数的引用有两种方式，一种为引用传递，一种为复制传递。</h1><p>引用传递的方式比较快，因为这种方式不必复制整个参数，同时这种方式可以对参数进行修改。需要在形参声明之前加一个符号（&amp;）来将其变为引用传递。<br>而复制传递的方式，比较安全，因为在引用函数中不会对原值进行修改。<br>详情见下面的例子。<br><a id="more"></a></p>
<h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>

struct Point{
    int x,y;
};

void exchange(Point& p){
    int temp;
    temp = p.x;
    p.x = p.y;
    p.y = temp;
    std::cout << p.x <<"," << p.y << std::endl;
}

int main() {
    Point p1 = {3,4};
    std::cout << p1.x <<","<< p1.y << std::endl;
    exchange(p1);
    std::cout << p1.x <<","<< p1.y << std::endl;
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出为</p>
<pre><code>3,4
4,3
4,3
</code></pre><h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p>将<code>void exchange(Point&amp; p){</code> 改成 <code>void exchange(Point p){</code></p>
<p>输出为</p>
<pre><code>3,4
4,3
3,4
</code></pre><h3 id="可见第一种方式可以对原数值进行更改，而第二种不能。"><a href="#可见第一种方式可以对原数值进行更改，而第二种不能。" class="headerlink" title="可见第一种方式可以对原数值进行更改，而第二种不能。"></a>可见第一种方式可以对原数值进行更改，而第二种不能。</h3><h1 id="在java中，形参的传递方式为引用传递。详情见下面的例子。"><a href="#在java中，形参的传递方式为引用传递。详情见下面的例子。" class="headerlink" title="在java中，形参的传递方式为引用传递。详情见下面的例子。"></a>在java中，形参的传递方式为引用传递。详情见下面的例子。</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>company<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        <span class="token keyword">int</span> y<span class="token punctuation">;</span>

        <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span>Point p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>x <span class="token operator">=</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

       Point p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">exchange</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出为</p>
<pre><code>3,4
4,3
4,3
</code></pre><h3 id="可见，函数可对原参数进行修改。"><a href="#可见，函数可对原参数进行修改。" class="headerlink" title="可见，函数可对原参数进行修改。"></a>可见，函数可对原参数进行修改。</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Atom编辑器安装插件]]></title>
      <url>https://blog.cyang.tech/2016/08/28/Atom%E7%BC%96%E8%BE%91%E5%99%A8%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>Atom编辑器做的非常酷炫，尤其是插件众多。之前就介绍过一个<a href="http://blog.csdn.net/u011303443/article/details/52049958" target="_blank" rel="external">非常装逼的插件</a>。</p>
<p>这几天Atom编辑器出了问题，无法安装插件。连已有的插件都无法搜索出来。无奈之下，只好重装。</p>
<p>没有卸载原有版本。直接去官网下载安装包，安装过程全自动，没有任何选择项。自动覆盖之前的安装包，而且之前安装过的插件也可以正常使用，不需要重新配置。<br>奇怪的是，在几个月以前安装的软件版本居然比现在高。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160828224714977?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>之前的版本是测试版，现在重新安装的是稳定版。安装结束后，Atom的图标颜色由之前的黄色变为稳定版的绿色。打开设置，便可正常安装插件。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160828224929025?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome浏览器安装，常用插件（一）]]></title>
      <url>https://blog.cyang.tech/2016/08/27/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%EF%BC%8C%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>最近更新了浏览器，在此写一篇文章，记录下Chrome浏览器的常用插件。</p>
<h1 id="一、Chrome安装"><a href="#一、Chrome安装" class="headerlink" title="一、Chrome安装"></a>一、Chrome安装</h1><p>1、建议直接<a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank" rel="external">官方下载地址</a>，会自动根据操作系统自动选择32位/64位的安装器，大概1M，打开后会自动的在线安装。<br>若网速不行也可以百度，从百度软件中心下载离线安装包。<br><a id="more"></a><br>2、安装过程<br><img src="http://p7tst3obo.bkt.clouddn.com/20160827231008767?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160827231018211?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160827231027664?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160827231035914?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>3、下载完成后会自动完成安装。</p>
<h1 id="二、Chrome常用插件"><a href="#二、Chrome常用插件" class="headerlink" title="二、Chrome常用插件"></a>二、Chrome常用插件</h1><p>关于chrome的插件实在太多了，以下是一些我装机必备的。</p>
<p>1、<a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="external">Vimium插件</a><br>这是一个非常实用的插件，可以使用键盘代替鼠标的操作。常用的操作有</p>
<pre><code>x  --关闭页面
r  --刷新页面
f  --将页面所有链接转换为键盘按键
更多的用法可以百度手册
</code></pre><p>下图为<code>f</code> 按键的用法，可见页面的所有链接都可以不用鼠标，使用键盘按键打开。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160827231946685?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>2、<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="external">SwitchyOmega</a><br>这个插件是用来设置浏览器代理的。比较常见的ss，xx-net等软件都可以简单的代理。使用方法就不细说。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160827232723920?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>3、<a href="https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?utm_campaign=en&amp;utm_source=en-et-na-us-oc-webstrhm&amp;utm_medium=et" target="_blank" rel="external">Stylish</a><br>这是一个更改界面样式的，常见的比如百度的搜索页，贴吧，百度云，百度知道。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160827233340235?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160827233350860?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160827233358939?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><img src="http://p7tst3obo.bkt.clouddn.com/20160827233406689?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo安装RSS插件]]></title>
      <url>https://blog.cyang.tech/2016/08/27/hexo%E5%AE%89%E8%A3%85RSS%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、步骤"><a href="#一、步骤" class="headerlink" title="一、步骤"></a>一、步骤</h1><p>1、安装插件。进入本地hexo目录，打开git bash。输入以下命令</p>
<pre><code>npm install hexo-generator-feed
</code></pre><p><img src="http://p7tst3obo.bkt.clouddn.com/20160827093755958?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<p>2、添加配置。在本地hexo根目录下的_config.yml文件中，添加以下配置。</p>
<pre><code># Extensions
## Plugins: http://hexo.io/plugins/
#RSS订阅
plugin:
- hexo-generator-feed
#Feed Atom
feed:
type: atom
path: atom.xml
limit: 20
</code></pre><p><img src="http://p7tst3obo.bkt.clouddn.com/20160827093855258?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>3、添加主题配置，在主题目录下的_config.yml目录下，添加如下配置。</p>
<pre><code>rss: /atom.xml
</code></pre><p><img src="http://p7tst3obo.bkt.clouddn.com/20160827093903148?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于路由器，锐捷破解，Mentohust的使用]]></title>
      <url>https://blog.cyang.tech/2016/08/24/%E5%85%B3%E4%BA%8E%E8%B7%AF%E7%94%B1%E5%99%A8%EF%BC%8C%E9%94%90%E6%8D%B7%E7%A0%B4%E8%A7%A3%EF%BC%8Cmentohust%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="一、意图"><a href="#一、意图" class="headerlink" title="一、意图"></a>一、意图</h1><p>最近想要通过路由器直接通过锐捷的认证，然后连接VPN，然后发送WIFI信号。这篇博客主要是讲一下这之间出现的问题，以及解决情况。</p>
<h1 id="二、基本情况"><a href="#二、基本情况" class="headerlink" title="二、基本情况"></a>二、基本情况</h1><p>锐捷 V4.96</p>
<h1 id="三、通过路由器认证锐捷"><a href="#三、通过路由器认证锐捷" class="headerlink" title="三、通过路由器认证锐捷"></a>三、通过路由器认证锐捷</h1><p>通过路由器认证锐捷的方式有两种，一种是使用mentohust这款软件认证，另一种就是通过校园锐捷提供的Linux版本认证客户端。</p>
<a id="more"></a>
<h2 id="3-1-mentohust软件使用步骤"><a href="#3-1-mentohust软件使用步骤" class="headerlink" title="3.1 mentohust软件使用步骤"></a>3.1 mentohust软件使用步骤</h2><p>1、这款软件是开源的，可以使用RPM包安装，也可以直接获取源码后编译。这里选择使用RPM包安装的方式。<br>2、安装过程很简单，值得说明的是，安装包是通过电脑连接路由器的WIFI后，使用WinSCP这款软件上传到路由器系统的。<br>3、安装结束后，直接使用命令打开软件就好。但是，由于本学校的限制，需要将锐捷安装包内的8021x.exe，SuConfig.dat，W32N55.dll这三个文件上传到/etc/mentohust这个目录下。这个步骤并不是所有学校都需要的，视情况而定。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160820192331858?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>4、软件的具体选项可以查看网站，或者执行<code>mentohust --help</code> 来获取。类似于：</p>
<pre><code>mentohust -u认证账号 -p密码 -w -neth0（网卡） -iIP地址 -m255.255.248.0（掩码） -g网关 -s114.114.114.114（DNS） -a1 -d2 -b2
</code></pre><p>关于每一个具体的选项说明见下图：<br><img src="http://p7tst3obo.bkt.clouddn.com/20160820191946087?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>幸运的话，就可以通过锐捷的认证了。但是，一般来说，第一次不太可能会成功，因为上面的步骤，选项的参数肯定会出错。下面是我遇到的问题以及解决方案：</p>
<h2 id="3-2-遇到的问题以及解决方案"><a href="#3-2-遇到的问题以及解决方案" class="headerlink" title="3.2 遇到的问题以及解决方案"></a>3.2 遇到的问题以及解决方案</h2><p>1、认证参数的获取。认证账号以及密码不用说，IP，掩码，网关这三个参数非常的重要，这个可以到学校的锐捷管理中心网页中的个人信息出查询。但是一般不准确，或者可能会变。最准确的方式就是看锐捷的认证界面上的信息。因为网关和掩码基本不会变化，但是IP可能过个几天会有一点点变化，这种情况只要先在Windows客户端登陆一遍就可以获取到，近几天就不会变。<br>2、有的学校是绑定MAC地址的，这一点非常的恶心，但是在linux系统下，更改MAC地址非常的容易，仅仅是一条命令的事情。<br>3、使用管理员不认可的客户端登录。对于这一点，只需要保证在/etc、mentohust目录下有8021x.exe，SuConfig.dat，W32N55.dll，这三个文件一般就不会有什么问题。也就是步骤中的第三步。<br>4、最后一点，就是提示认证客户端版本过低。关于这一点，也是我目前没有解决的地方。网上很多教程都说，只要保证上一条中的三个文件拷贝到/etc/mentohust目录下就不会提示版本过低，但是我没有成功。学校锐捷的版本是    v4.96。</p>
<h2 id="3-3-通过校园网提供的Linux版本的客户端认证"><a href="#3-3-通过校园网提供的Linux版本的客户端认证" class="headerlink" title="3.3 通过校园网提供的Linux版本的客户端认证"></a>3.3 通过校园网提供的Linux版本的客户端认证</h2><p>1、学校是提供Linux版本的锐捷客户端的，并且在虚拟机中运行是可以正常登录的，说明学校并没有禁止Linux系统的锐捷认证。<br>2、将认证客户端通过WinSCP的方式上传进路由器，执行登录脚本报错。开始以为是路由器的精简的Linux缺少某些必要的文件造成的。<br>3、所以尝试在树莓派上运行，发现在树莓派上脚本依然无法运行，但是在虚拟机上可以正常运行。<br>4、最后发现是，学校提供的版本是编译过的客户端程序，并不是源码，而文件里只有X86和X64架构的认证程序，并没有ARM架构的程序。路由器和树莓派均为ARM架构，所以无解。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[兔子问题]]></title>
      <url>https://blog.cyang.tech/2016/08/16/%E5%85%94%E5%AD%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p>
<a id="more"></a>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><ul>
<li>1、根据数字的变化规律可以看出，这其实也是斐波那契数列。</li>
<li>下面这种写法算是和之前的写法不同，但也可以达到同样的效果。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">f1 <span class="token operator">=</span> <span class="token number">1</span>
f2 <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f1 <span class="token operator">=</span> f1 <span class="token operator">+</span> f2
    f2 <span class="token operator">=</span> f1 <span class="token operator">+</span> f2
    <span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[判断天数]]></title>
      <url>https://blog.cyang.tech/2016/08/16/%E5%88%A4%E6%96%AD%E5%A4%A9%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>输入某年某月某日，判断这一天是这一年的第几天？</p>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><ul>
<li>1、这题用到了python的数字类型转换。写法和其他语言有不同，例如<code>int(abc)</code>。</li>
<li>2、用到了python的列表<code>[]</code>。列表中的元素是有序排列，可读可写的。也可以使用元组，元祖也是有序排列，区别在于只读不写。</li>
</ul>
<a id="more"></a>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#判断输入的日期是今年的第几天</span>

list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span>
ans <span class="token operator">=</span> <span class="token number">0</span>

theDay <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please input the day as yyyymmdd:"</span><span class="token punctuation">)</span>

yyyy <span class="token operator">=</span> int<span class="token punctuation">(</span>theDay<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
mm <span class="token operator">=</span> int<span class="token punctuation">(</span>theDay<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
dd <span class="token operator">=</span> int<span class="token punctuation">(</span>theDay<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#判断是否是闰年</span>
i <span class="token operator">=</span> yyyy<span class="token operator">%</span><span class="token number">4</span>

<span class="token comment" spellcheck="true">#print(yyyy+mm+dd+str(i))</span>

<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> mm <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mm<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> ans<span class="token operator">+</span>list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        ans <span class="token operator">=</span> ans<span class="token operator">+</span>dd<span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mm<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> ans<span class="token operator">+</span>list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        ans <span class="token operator">=</span> ans <span class="token operator">+</span> dd
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> mm <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mm<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> ans<span class="token operator">+</span>list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        ans <span class="token operator">=</span> ans<span class="token operator">+</span>dd
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mm<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> ans<span class="token operator">+</span>list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        ans <span class="token operator">=</span> ans <span class="token operator">+</span> dd
<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算斐波那契数列]]></title>
      <url>https://blog.cyang.tech/2016/08/16/%E8%AE%A1%E7%AE%97%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>斐波那契数列,即黄金分割数列。前两项分别为0和1，从第三项开始，每一项分别为其前两项之和。</p>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><ul>
<li>1、应用了简单的函数定义语法。采用递归的方式计算。</li>
<li>2、之前用JAVA语言写的。  <a href="http://cyang.tech/2016/05/18/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/" target="_blank" rel="external">斐波那契java算法</a></li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算斐波那契数列</span>

<span class="token keyword">def</span> <span class="token function">fi</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> fi<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fi<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>

n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fi<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Power Light 项目]]></title>
      <url>https://blog.cyang.tech/2016/08/13/Power%20Light%20%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><ul>
<li>1、充电状态显示灯</li>
</ul>
<h2 id="项目进度"><a href="#项目进度" class="headerlink" title="项目进度"></a>项目进度</h2><ul>
<li>1、通过在活动里面创建通知的方式，实现了指示灯的显示。设置滑动不可删除通知栏。<strong>问题：</strong> 通过手动创建的通知，只有在第一次关闭屏幕，LED才会点亮，当手动点亮屏幕后，通知虽然不可取消，但是指示灯已不在点亮，也就失去了效果。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Guess Number 猜数字]]></title>
      <url>https://blog.cyang.tech/2016/08/12/guess%20number%20%E7%8C%9C%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>使用python编写的猜数字游戏</p>
<a id="more"></a>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><pre class="line-numbers language-python"><code class="language-python">lucky_number <span class="token operator">=</span> <span class="token number">12</span>
count <span class="token operator">=</span> <span class="token number">6</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    input_number <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"please input a number from 0 t 100:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    count <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">if</span> input_number<span class="token operator">&lt;</span>lucky_number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the lucky number is bigger"</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> input_number<span class="token operator">></span>lucky_number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the lucke number is smaller"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bingo"</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>

<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"you have no chance"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[奖金分配]]></title>
      <url>https://blog.cyang.tech/2016/08/12/%E5%A5%96%E9%87%91%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>企业发放的奖金根据利润提成。<br>利润(I)低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；<br>20万到40万之间时，高于20万元的部分，可提成5%；<br>40万到60万之间时高于40万元的部分，可提成3%；<br>60万到100万之间时，高于60万元的部分，可提成1.5%，<br>高于100万元时，超过100万元的部分按1%提成，<br>从键盘输入当月利润I，求应发放奖金总数？</p>
<a id="more"></a>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">200000</span><span class="token punctuation">,</span><span class="token number">400000</span><span class="token punctuation">,</span><span class="token number">600000</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.075</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">,</span><span class="token number">0.015</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">)</span>

input_money <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"please input money:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> input_money<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> input_money<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> input_money<span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>

<span class="token keyword">elif</span> input_money<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> input_money<span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>input_money<span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>

<span class="token keyword">elif</span> input_money<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">and</span> input_money<span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>input_money<span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>

<span class="token keyword">elif</span> input_money<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">and</span> input_money<span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>input_money<span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>

<span class="token keyword">elif</span> input_money<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">and</span> input_money<span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>input_money<span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>

<span class="token keyword">elif</span> input_money<span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>input_money<span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[寻找数字]]></title>
      <url>https://blog.cyang.tech/2016/08/12/%E5%AF%BB%E6%89%BE%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>一个整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</p>
<a id="more"></a>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><ul>
<li>1、这个题目涉及到的python用法有，集合，自定义函数。</li>
<li>2、自定义函数需要写在被调用之前，这一点和JAVA很不一样。</li>
<li>3、判断一个数是否在集合里，使用<code>i in a</code>类似的语法，其中i为数字，a为一个集合。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#判断一个数是否为完全平方数</span>
<span class="token keyword">def</span> <span class="token function">isSquareNumber</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>
    k <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        k <span class="token operator">=</span> j<span class="token operator">*</span>j
        a<span class="token punctuation">.</span>add<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>

<span class="token comment" spellcheck="true">#main</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSquareNumber<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSquareNumber<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">268</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数字组合]]></title>
      <url>https://blog.cyang.tech/2016/08/12/%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p>
<a id="more"></a>
<h2 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h2><pre class="line-numbers language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i<span class="token operator">!=</span>j <span class="token operator">and</span> j<span class="token operator">!=</span>k <span class="token operator">and</span> i<span class="token operator">!=</span>k<span class="token punctuation">:</span>
                count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the count is :"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[猜歌游戏小结（四） 设置自定义布局]]></title>
      <url>https://blog.cyang.tech/2016/08/11/%E7%8C%9C%E6%AD%8C%E6%B8%B8%E6%88%8F%E5%B0%8F%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89%20%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>在这个游戏中，游戏下方具有3*8，共24个文字待选框。这几个文字待选框中的内容为随机生成的文字，其中包括有正确答案和干扰文字。而这个文字待选框布局不是系统默认存在的布局，所以需要自定义设置。</p>
<a id="more"></a>
<h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><ul>
<li>1、每个一文字待选框，均可以看成是一个button控件。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordButton</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> mIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//位置索引</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> mIsVisiable<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否可见</span>
    <span class="token keyword">public</span> String mWordString<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//显示内容</span>

    <span class="token keyword">public</span> Button mViewButton<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//构造函数，初始属性</span>
    <span class="token keyword">public</span> <span class="token function">WordButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mIsVisiable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        mWordString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、自定义一个View,继承自GridView。用于设置文字待选框。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGridView</span> <span class="token keyword">extends</span> <span class="token class-name">GridView</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>WordButton<span class="token operator">></span> mArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>WordButton<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> MyGridAdpater myAdpater<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>

            mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>

            myAdpater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyGridAdpater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>myAdpater<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关联</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">MyGridAdpater</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mArrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mArrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> position<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>3、定义WordButton对象对应的布局。GridView里面，有24个WordButton对象，而每一个WordButton对象对应的布局需要重新定义,文件名为<code>self_ui_gridview_item.xml</code></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Button xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
  android:id=&quot;@+id/item_btn&quot;
  android:layout_width=&quot;wrap_content&quot;
  android:layout_height=&quot;wrap_content&quot;
  android:background=&quot;@drawable/word_button_icon&quot;//设置点击效果
  android:text=&quot;d&quot;
  android:textColor=&quot;@color/black&quot;
  android:textSize=&quot;20sp&quot;/&gt;
</code></pre></li>
<li><p>4、将布局和代码建立关联。建立关联的方法是使用<code>LayoutInflater</code>.设置Adpater的getView方法，该方法的放回值是一个VIew,所以可以新建一个工具类，即新建一个Util文件夹，并在该文件夹下新建一个Util类，其中定义一个getVIew方法。</p>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> View <span class="token function">getView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span><span class="token keyword">int</span> layoutId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        LayoutInflater layoutInflater <span class="token operator">=</span> <span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">)</span>context<span class="token punctuation">.</span>
                <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>LAYOUT_INFLATER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>

        View layout <span class="token operator">=</span> layoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutId<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> layout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>5、设置getView方法。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> WordButton holder<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span> convertView <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            convertView <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>self_ui_gridview_item<span class="token punctuation">)</span><span class="token punctuation">;</span>

            holder <span class="token operator">=</span> mArrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//加载动画</span>
            mScaleAnimation <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 设置动画的延迟时间</span>
            mScaleAnimation<span class="token punctuation">.</span><span class="token function">setStartOffset</span><span class="token punctuation">(</span>position <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 初始化控件</span>
            holder<span class="token punctuation">.</span>mIndex <span class="token operator">=</span> position<span class="token punctuation">;</span>
            holder<span class="token punctuation">.</span>mViewButton <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span>convertView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>item_btn<span class="token punctuation">)</span><span class="token punctuation">;</span>

            holder<span class="token punctuation">.</span>mViewButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mWordButtonListener<span class="token punctuation">.</span><span class="token function">onWordButtonClick</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            holder <span class="token operator">=</span> <span class="token punctuation">(</span>WordButton<span class="token punctuation">)</span>convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        holder<span class="token punctuation">.</span>mViewButton<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>mWordString<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 播放动画</span>
       <span class="token comment" spellcheck="true">// convertView.startAnimation(mScaleAnimation);</span>
        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[猜歌游戏小结（三） 设置动画效果]]></title>
      <url>https://blog.cyang.tech/2016/08/11/%E7%8C%9C%E6%AD%8C%E6%B8%B8%E6%88%8F%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89%20%E8%AE%BE%E7%BD%AE%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>在该游戏中，中间有一个唱片机会旋转，表示正在播放音乐，配套还有一个唱片杆，配合实现整个唱片机的效果。因此，需要实现动画效果。盘片会旋转，而唱片杆会绕一个固定点旋转。</p>
<a id="more"></a>
<h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><ul>
<li><p>1、首先实现唱片布局。将几个图片进行组合，最终形成一个完整的唱片机布局，包括一个盘片，一个唱片杆，在唱片上放置一个点击按钮，这个按钮需要设置一个点击效果，即小结（二）的内容。</p>
</li>
<li><p>2、这个布局是一个子布局，这个布局需要在主布局里进行include.</p>
</li>
<li><p>3、引入动画类Animation，LinearInterpolator.</p>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//盘片</span>
    <span class="token keyword">private</span> Animation mPanAnim<span class="token punctuation">;</span>
    <span class="token keyword">private</span> LinearInterpolator mPanLin<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//拨杆</span>
    <span class="token keyword">private</span> Animation mBarInAnim<span class="token punctuation">;</span>
    <span class="token keyword">private</span> LinearInterpolator mBarInLin<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>4、在res中新建anim文件夹，设置动画效果文件，如下为盘片旋转效果。<br>```<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<set xmlns:android="http://schemas.android.com/apk/res/android">

<p>  &lt;rotate</p>
<pre><code>  android:duration=&quot;2400&quot;
  android:fromDegrees=&quot;0&quot;
  android:pivotX=&quot;50%&quot;
  android:pivotY=&quot;50%&quot;
  android:repeatCount=&quot;3&quot; //重复次数为3次
  android:toDegrees=&quot;359&quot; /&gt; 旋转角度360
</code></pre></set></li>
</ul>
<p></p>
<pre><code>
- 5、在该文件夹下，设置拨杆的动画效果。由于拨杆进入和退出时两种不同的动画，所以要定义两个文件。

- 6、在java代码中，进行动画初始化。

```java
    mPanAnim = AnimationUtils.loadAnimation(this,R.anim.rotate);
    mPanLin = new LinearInterpolator();
    mPanAnim.setInterpolator(mPanLin);
</code></pre><ul>
<li>7、由于动画效果，是通过点击盘片上的按钮来实现切换的，而动画效果是配合播放按钮来体现的，因此动画效果的开始和结束应该在按钮的点击事件中进行处理。也因此，需要先初始化一个按钮（imageButton）,并设置其点击事件。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//播放按钮事件</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlePlayButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mViewPanBar <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mIsRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 开始拨杆进入动画</span>
                mViewPanBar<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>mBarInAnim<span class="token punctuation">)</span><span class="token punctuation">;</span>
                mBtnPlayStart<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>INVISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//隐藏播放按钮</span>

                <span class="token comment" spellcheck="true">//播放音乐</span>
                MyPlayer<span class="token punctuation">.</span><span class="token function">playSong</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>mCurrentSong<span class="token punctuation">.</span><span class="token function">getSongFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>8、 设置动画监听器。因为这几个动画效果之间具有一定的逻辑，执行的时候具有先后顺序，并且一个动画结束意味着需要进行下一个动画。所以需要监听各个动画的执行。类似的一个动画效果均设置动画监听。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">mPanAnim<span class="token punctuation">.</span><span class="token function">setAnimationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animation<span class="token punctuation">.</span>AnimationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token comment" spellcheck="true">//动画开始执行的时候</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span>Animation animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token comment" spellcheck="true">//动画结束执行的时候</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animation animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//唱片旋转结束后，拨杆退出，恢复原形</span>
                mViewPanBar<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>mBarOutAnim<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token comment" spellcheck="true">//动画重复执行的时候</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span>Animation animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[猜歌游戏小结（二） 设置点击效果]]></title>
      <url>https://blog.cyang.tech/2016/08/11/%E7%8C%9C%E6%AD%8C%E6%B8%B8%E6%88%8F%E5%B0%8F%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89%20%E8%AE%BE%E7%BD%AE%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>设置按钮的点击效果，当一个ImageButton被按下时，其颜色变深，以提示用户当前按键有被使用。</p>
<a id="more"></a>
<h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><ul>
<li>1、准备好两张图片，一张为正常状态下显示，一张为被按下时显示。并拷贝进drawable目录下。</li>
<li><p>2、 在drawable目录下新建一个xml文件，名为<code>cancle_button_icon.xml</code>，类似于这样。文件内容如下：<br>```<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<selector xmlns:android="http://schemas.android.com/apk/res/android">

<p>  <item android:state_pressed="true" android:drawable="@drawable/buytip_cancel_sel"></item></p>
  <item android:drawable="@drawable/buytip_cancel">

</item></selector></li>
</ul>
<p></p>
<pre><code>
- 3、在布局文件下，设置ImageButton时，设置其背景为上述xml。
</code></pre><p><imagebutton android:id="@+id/btn_dialog_cancel" android:layout_width="134dp" android:layout_height="wrap_content" android:layout_marginright="20dp" android:background="@drawable/cancel_button_icon"><br>```</imagebutton></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[猜歌游戏小结（一） 设置应用全屏]]></title>
      <url>https://blog.cyang.tech/2016/08/11/%E7%8C%9C%E6%AD%8C%E6%B8%B8%E6%88%8F%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%20%E8%AE%BE%E7%BD%AE%E5%BA%94%E7%94%A8%E5%85%A8%E5%B1%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>实现应用程序的全屏显示，试过几个方法都不可以。可能是因为SDK版本的问题。最后找到的可以成功实现游戏全屏的方法如下：</p>
<a id="more"></a>
<h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><ul>
<li>1、自定义主题样式<ul>
<li>在res下values下的style.xml中，添加一个style的标签，如下:<pre><code>&lt;style name=&quot;MyTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;
&lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;
&lt;/style&gt;
</code></pre></li>
</ul>
</li>
<li><p>2、然后在清单文件中使用该主题。<br>```<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="tech.cyang.guessmusic">

  <application android:allowbackup="true" android:icon="@mipmap/s3" android:label="@string/app_name" android:supportsrtl="true" android:theme="@style/MyTheme"><br>      <activity android:name=".tech.cyang.guessmusic.ui.MainActivity"><br>          <intent-filter><br>              <action android:name="android.intent.action.MAIN"><br><br>              <category android:name="android.intent.category.LAUNCHER"><br>          </category></action></intent-filter><br>      </activity><br>      <activity android:name=".tech.cyang.guessmusic.ui.AllPassView"><br><br>      </activity><br>  </application>

</manifest></li>
</ul>
<p><br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（七） CAN总线设计]]></title>
      <url>https://blog.cyang.tech/2016/08/03/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%20CAN%E6%80%BB%E7%BA%BF%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、CAN总线的层结构简要分成CAN对象层，CAN传输层和物理层。</li>
<li>2、对象层功能：报文滤波，报文和状态的处理</li>
<li>3、传输层的功能：故障界定，错误检测和标定，报文校验，应答，仲裁，报文分帧，传输速率和定时</li>
</ul>
<a id="more"></a>
<ul>
<li>4、物理层的功能：信号电平和位表示，传输媒体</li>
<li>5、CAN能够使用多种物理介质作为通信媒介，最常用的是双绞线，还可以使用光钎等材料。</li>
<li>6、CAN总线通过两条差分电压信号线CAN_H 和 CAN_L传输。当两条线的电压均为2.5V时，表示逻辑1，而当CAN_H为3.5V，CAN_L位1.5V时，此时表示逻辑0.</li>
<li>7、CAN的报文格式有5种，分别为：数据帧，遥控帧，错误帧，过载帧，帧间隔。每种帧具有不同数据长度和数据划分。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（六） 定时器]]></title>
      <url>https://blog.cyang.tech/2016/08/03/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%20%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、STM32中一共有11个定时器，其中2个（TIM1,TIM8）高级控制定时器，4个通用定时器（TIM2~TIM5）和2个基本定时器(TIM6~TIM7)，以及2个看门狗定时器和1个系统嘀嗒(Systick)定时器。</li>
<li>2、两个高级定时器是挂载在APB1上的，通用定时器和基本定时器是挂载在APB2上的。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、几种定时器的比较</li>
</ul>
<table>
<thead>
<tr>
<th>定时器</th>
<th>计数器分辨率</th>
<th>计数器类型</th>
<th>预分频系数</th>
<th>产生DMA请求</th>
<th>捕获比较通道</th>
<th>互补输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>TIM1/TIM8</td>
<td>16</td>
<td>向上 向下 向上/向下</td>
<td>1~65536</td>
<td>可以</td>
<td>4</td>
<td>有</td>
</tr>
<tr>
<td>TIM2~5</td>
<td>16</td>
<td>向上 向下 向上/向下</td>
<td>1~65536</td>
<td>可以</td>
<td>4</td>
<td>没有</td>
</tr>
<tr>
<td>TIM6，TIM7</td>
<td>16</td>
<td>向上</td>
<td>1~65536</td>
<td>可以</td>
<td>0</td>
<td>没有</td>
</tr>
<tr>
<td>独立看门狗</td>
<td>12</td>
<td>向下</td>
<td>4~256（2的幂）</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>窗口看门狗</td>
<td>8</td>
<td>向下</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Systick</td>
<td>24</td>
<td>向下</td>
<td>0、8</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（五） 模拟数字转换ADC]]></title>
      <url>https://blog.cyang.tech/2016/07/30/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%20%E6%A8%A1%E6%8B%9F%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2ADC/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、STM32内部就包含有1~3个ADC。共有18个通道，可测量16个外部和2个内部信号源。</li>
<li>2、各通道的A/D转换可以单次，连续，扫描或间断模式执行。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、16个通道可设置成两组，分别为规则通道组和注入通道组。规则通道组相当于正常运行的程序，而注入通道组相当于中断。因为注入通道的转换可以打断规则通道的转化，注入通道转换完成后，规则通道才得以继续转换。</li>
<li>4、ADC的每个通道对应着不同的IO口，有的IO口可以使用三个中的任意一个，而有的只能使用特定的ADC。而ADC转换后的数值可以直接通过DMA转存到RAM等待CPU的使用。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（四）直接寄存器访问（DMA）]]></title>
      <url>https://blog.cyang.tech/2016/07/30/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%20%E7%9B%B4%E6%8E%A5%E5%AF%84%E5%AD%98%E5%99%A8%E8%AE%BF%E9%97%AE%EF%BC%88DMA%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、DMA即直接存储器方位。DMA传输方式无须CPU直接控制设备，也没有中断处理方式那样的保留现场和恢复现场的过程，通过硬件为RAM和IO设置开辟一条直接传送数据的通路，能使CPU的效率大为提高。</li>
<li>2、STM32共有两个DMA，总共12个通道。外设（TIMx,ADC,SPIx，i2Cx和USRTx）产生的DMA请求，通过逻辑或输入到DMA控制器，意味着同时只能有一个请求有效。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、DMA相当于一个数据的搬运工，将数据在内存和外设之间搬运，而不用通过CPU。典型的例子就是移动一个外部内存的区块到芯片内部更快的内存区。像是这样的操作并没有让处理器工作拖延，反而可以被重新排程去处理其他的工作。 DMA 传输对于高效能嵌入式系统算法和网络是很重要的。</li>
<li>4、DMA的数据传送方向可以为从内存到外设，也可以为从外设到内存。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（三） 串口通信]]></title>
      <url>https://blog.cyang.tech/2016/07/30/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%20%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、计算机常用的两种通信方式为串行通信和并行通信，两个具有相对的优缺点。</li>
<li>2、串行通信分为同步和异步两种，其中同步需要通信的两个设备之间时钟同步，必须有同步信号。而异步通信时相互通信的设备之间不需要同步，只要求通信的接口方式及速率相同，以起始位和停止位为标志表示数据发送的开始和结束。</li>
</ul>
<a id="more"></a>
<ul>
<li>3、异步通信时数据一帧一帧的传送，帧的格式和通信速率一起称为通信协议。一帧的的长度称为字长，字长=起始位+数据位+校验位+停止位。波特率就是用来描述通信速率的，单位为bps，即位、秒。</li>
<li>4、常用的三种模式接口方式为RS232，RS422，RS485。对比如下</li>
</ul>
<table>
<thead>
<tr>
<th>接口</th>
<th>RS232</th>
<th>RS422</th>
<th>RS485</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作方式</td>
<td>电平</td>
<td>差分</td>
<td>差分</td>
</tr>
<tr>
<td>工作方式</td>
<td>全双工</td>
<td>全双工</td>
<td>半双工</td>
</tr>
<tr>
<td>连接方式方式</td>
<td>点到点</td>
<td>点到多点</td>
<td>多点到多点</td>
</tr>
</tbody>
</table>
<ul>
<li>5、在用USB连接STM32与电脑时，实际上信号是通过USB传输后，通过USB转串口芯片后再送到STM32的。而当用单片机和PC机通过串口进行通信，尽管单片机有串行通信的功能，但单片机提供的信号电平和RS232的标准不一样，因此要通过max232这种类似的芯片进行电平转换。</li>
<li>6、STM32的串口资源相当的丰富，功能也很强大。串口作为STM32的一个外设，其时钟由外设时钟使能寄存器控制，另外还有复位寄存器，波特率寄存器，3个控制寄存器，数据发送和接收寄存器，状态寄存器。</li>
<li>7、串口设置可以总结为如下几个步骤</li>
</ul>
<ol>
<li>串口时钟使能，GPIO时钟使能</li>
<li>串口复位</li>
<li>GPIO端口模式设置</li>
<li>串口参数初始化</li>
<li>开启中断并且初始化NVIC（如果需要开启中断，才需这个步骤）</li>
<li>使能串口</li>
<li>编写中断处理函数</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（二） 中断]]></title>
      <url>https://blog.cyang.tech/2016/07/30/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%20%E4%B8%AD%E6%96%AD/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、M3内核支持256个中断（16个内核中断和240个外部中断）和可编程256级中断优先级设置。然而，STM32并没有全部使用M3内核的东西，STM32目前支持的中断为84个，包括16和内核中断以及68个外部中断，共有16级可编程的优先级设置。</li>
</ul>
<a id="more"></a>
<ul>
<li>2、与中断有关的两个概念为中断优先级和中断向量的优先级组。</li>
<li>3、STM32的中断优先级分为两种，一种为抢占式优先级，一种为响应式优先级。由四位数字来控制，因此共分为16种，划分为5组。</li>
</ul>
<blockquote>
<p>具有高抢占式优先级的中断可以在具有地抢占式优先级的中断处理过程中响应，即可以中断嵌套。如果抢占式优先级相同时，则不会产生中断。</p>
<p>如果两个中断同时到达，则中断控制器根据它们的响应优先级高低来决定先处理哪一个；如果抢占式优先级和响应式优先级都相等，则根据它们在中断表中的排位顺序来决定先处理哪一个。</p>
</blockquote>
<ul>
<li>4、STM32中，每一个IO口都可以产生一个外部中断，中断以组为单位，同组间的外部中断同一时间只能使用一个，组别为类似PA0，PB0，PC0之类的为一组。</li>
<li>5、因此共有0~15个组，0~4享有自己的中断函数，5~9共有一个中断函数，10~15共用一个中断函数。</li>
<li>6、使用外部中断的一般步骤。</li>
</ul>
<ol>
<li>初始化IO口作用输入</li>
<li>开启IO口的复用功能，设置IO口与中断线之间的映射关系</li>
<li>开启与该IO口相对应的线上中断事件，设置触发条件</li>
<li>配置中断分组（NVIC），并设置使能</li>
<li>中断服务函数的编写</li>
</ol>
<ul>
<li>7、STM32不像51单片机，可以使用interrupt关键字来定义中断响应函数，STM32的中断响应函数结构存在中断向量表中，是由启动代码给出的。默认的中断响应函数在stm32f10x_it.c中，因此需要把这个文件加入到工程中。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32学习笔记（一） 时钟]]></title>
      <url>https://blog.cyang.tech/2016/07/29/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%97%B6%E9%92%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>1、在使用51单片机时，时钟速度取决于外部晶振或者内部RC振荡电路的频率，是不可以改变的。而ARM的出现打破了这个传统的法则，可以通过软件随意的改变时钟速度。在使用某一功能前，要先对其时钟进行初始化。</li>
</ul>
<a id="more"></a>
<ul>
<li>2、在STM32中，有5个时钟源，分别是HSI,HSE,LSI,LSE,PLL。</li>
</ul>
<table>
<thead>
<tr>
<th>种类</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>HSI</td>
<td>高速内部时钟，8Mhz</td>
</tr>
<tr>
<td>HSE</td>
<td>高速外部时钟，4~16Mhz</td>
</tr>
<tr>
<td>LSI</td>
<td>低速内部时钟，40Khz</td>
</tr>
<tr>
<td>LSE</td>
<td>低速外部时钟，32.768Khz</td>
</tr>
<tr>
<td>PLL</td>
<td>锁相环电路，输入源可选择HSI/2，HSE或者HSE/2，倍频为2~16，最大不超过72Mhz。</td>
</tr>
</tbody>
</table>
<ul>
<li>3、APB2(高速外设)上的设备有UART1，SPI1，Timer1,ADC1,ADC2,所有的普通IO口。</li>
<li>4、普通的IO端口连接在APB2设备上，需要初始化APB2的时钟，即时钟控制（RCC）的APB2的对应使能寄存器。</li>
<li>5、每个GPIO口有7个寄存器来控制，每个端口都可以设置成8种模式，包含4种输入模式，4种输出模式。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Calculator 简易计算器开发]]></title>
      <url>https://blog.cyang.tech/2016/07/28/Calculator/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="Calculator-简易计算器开发"><a href="#Calculator-简易计算器开发" class="headerlink" title="Calculator 简易计算器开发"></a>Calculator 简易计算器开发</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>使用Android平台开发一款简易的计算器应用。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、布局采用一个TextView来显示计算数据，采用TabRow制作一个4*4的控件,分别对应与10个数字和4中基本算数操作，以及等于号和清零号。</li>
<li>2、实现计算效果的基本逻辑是，每一个运算必须保证三个元素，前两个为数字，中间一个为运算符号。在一个列表里检测到有三个元素后，提取1和3作为两个运算数，提取中间的操作符号，通过switch语句选择具体的运算操作。</li>
<li>3、每一次通过屏幕点击的10个数字，以及四个基本运算符号，均为一个Item对象，这个对象具有一个构造函数，需要输入值，以及类型。其中类型有五种，分别为数字以及4种运算符。可以通过新建的类，并且通过使用 <code>public static final int ADD = 0</code>之类的操作来实现类似于宏定义的效果。</li>
<li>4、数字按键的点击逻辑：通过监听，在点击这个控件之后，通过使用<code>TextView.append(&quot;1&quot;)</code>之类的语句，来实现将数字暂存起来。</li>
<li>5、加法控件的点击逻辑：首先需要将第一个数字从<code>TextView.getText()</code>转化成一个Item对象并添加到列表里面，之后会执行一个<code>checkAndComputer</code>函数，这个函数用于列表里面是否有大于或等于三个元素，从而对其进行挑选并计算结果，最终显示出来。</li>
<li>6、<code>checkAndComputer</code>这个函数在检测到有三个元素后就会进行计算，并且删除了之前列表里的三个元素，将计算的结果重新添加进列表作为结果，因此在展示结果的时候可以直接显示列表的第一个元素。</li>
<li>7、基本流程图<br><img src="http://p7tst3obo.bkt.clouddn.com/calculator/calculator.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="计算器流程图"></li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li><p>1、基本元素Item类</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>2、java中类似宏定义的用法</p>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Types</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ADD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SUB <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MUT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DIV <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>3、加法控件逻辑</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_add<span class="token operator">:</span>
                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span><span class="token string">"this is add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>tvScreen<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Types<span class="token punctuation">.</span>NUM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span><span class="token string">"this is add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">checkAndComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Types<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                tvScreen<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>4、checkAndComputer函数</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkAndComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

          <span class="token keyword">double</span> a <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          <span class="token keyword">double</span> b <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          <span class="token keyword">int</span> opt <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>

          items<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token keyword">case</span> Types<span class="token punctuation">.</span>ADD<span class="token operator">:</span>
                  items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>NUM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> Types<span class="token punctuation">.</span>SUB<span class="token operator">:</span>
                  items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>NUM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> Types<span class="token punctuation">.</span>MUT<span class="token operator">:</span>
                  items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>NUM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> Types<span class="token punctuation">.</span>DIV<span class="token operator">:</span>
                  items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>NUM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2048游戏开发]]></title>
      <url>https://blog.cyang.tech/2016/07/27/Game2048%20Android%20APP%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="2048游戏开发"><a href="#2048游戏开发" class="headerlink" title="2048游戏开发"></a>2048游戏开发</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>2048游戏是一款非常简单，容易上手但是又不失趣味性的一款游戏。根据《极客学院》的教学视频学的，视频总共70分钟左右。完成整个项目大概花费两个晚上共计5小时的时间。基本上没有遇到什么比较大的难点，遇到的问题都可以解决。</p>
<a id="more"></a>
<h2 id="疑点难点"><a href="#疑点难点" class="headerlink" title="疑点难点"></a>疑点难点</h2><ul>
<li>1、关于activity的使用。这个应用，仅有一个activity，而在这个activity上没有太多的代码，主要用于更新分数。主要逻辑的代码实现都在其他两个类。这两个类分别为GameView，主要的逻辑实现，实现了交互（左右上下滑动的检测），以及很多具体的函数；另一个为Card类，这个类是一个卡片模型，主要用于实现游戏界面里的数字模型，有set,get,equals方法。</li>
<li>2、而这两个类都是继承自Layout布局的。</li>
<li>3、关于左右上下滑动的检测代码。这部分额代码，目前从才做上来说看感觉还有可以优化的空间。按照视频里的源码，尽管获取的变脸和算法没有问题，但是使用那样的写法就是无法实现准确的判读。而且目前看来，由于没有动画效果，因此整个交互显得比较僵硬，下一步可以考虑添加动画效果。</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、GridLayout是一种网格布局，用在这里正好可以用作4*4的卡片布局。</li>
<li>2、FramLayout是一种很简单的布局，没有任何的定位方式，所有的控件都是摆放在布局的左上角。</li>
<li>3、监听滑动操作。通过侦听触摸事件，可以很好的判断出用户的操作逻辑。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、生成2和4的比例为9：1.</li>
</ul>
<p><code>Math.random()&gt;0.1?2:4</code></p>
<ul>
<li>2、AlertDialog的使用<pre><code>AlertDialog.Builder dialog = new AlertDialog.Builder(getContext());
          dialog.setTitle(&quot;你好&quot;);
          dialog.setMessage(&quot;重来&quot;);
          dialog.setCancelable(false);
          dialog.setPositiveButton(&quot;ok&quot;, new DialogInterface.OnClickListener() {
              @Override
              public void onClick(DialogInterface dialog, int which) {
                  startGame();
              }
          }).show();
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[装逼编辑器Atom+activiate-Power-Mode插件效果配置]]></title>
      <url>https://blog.cyang.tech/2016/07/27/activiate-power-mode%E6%95%88%E6%9E%9C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="插件效果展示"><a href="#插件效果展示" class="headerlink" title="插件效果展示"></a>插件效果展示</h2><p><img src="http://p7tst3obo.bkt.clouddn.com/20160727220824261?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="本文说明"><a href="#本文说明" class="headerlink" title="本文说明"></a>本文说明</h2><h4 id="activiate-power-mode是一款非常-装逼-的Atom编辑器插件。具体的安装方法就不多说，网上有很多的教程。这里只将插件的震动效果的配置。"><a href="#activiate-power-mode是一款非常-装逼-的Atom编辑器插件。具体的安装方法就不多说，网上有很多的教程。这里只将插件的震动效果的配置。" class="headerlink" title="activiate-power-mode是一款非常 装逼 的Atom编辑器插件。具体的安装方法就不多说，网上有很多的教程。这里只将插件的震动效果的配置。"></a>activiate-power-mode是一款非常 <strong>装逼</strong> 的Atom编辑器插件。具体的安装方法就不多说，网上有很多的教程。这里只将插件的震动效果的配置。</h4><a id="more"></a>
<h4 id="以下三种方法均为该插件的震动效果展示。第一种比较强烈，屏幕晃动厉害，辣眼睛；第二种为默认，文件多时可能也比较晃眼；第三种为完全不震动。可根据个人喜好，自由设置震动效果。"><a href="#以下三种方法均为该插件的震动效果展示。第一种比较强烈，屏幕晃动厉害，辣眼睛；第二种为默认，文件多时可能也比较晃眼；第三种为完全不震动。可根据个人喜好，自由设置震动效果。" class="headerlink" title="以下三种方法均为该插件的震动效果展示。第一种比较强烈，屏幕晃动厉害，辣眼睛；第二种为默认，文件多时可能也比较晃眼；第三种为完全不震动。可根据个人喜好，自由设置震动效果。"></a>以下三种方法均为该插件的震动效果展示。第一种比较强烈，屏幕晃动厉害，辣眼睛；第二种为默认，文件多时可能也比较晃眼；第三种为完全不震动。可根据个人喜好，自由设置震动效果。</h4><ul>
<li><p>1、超震<br><img src="http://p7tst3obo.bkt.clouddn.com/20160727220734518?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>2、默认<br><img src="http://p7tst3obo.bkt.clouddn.com/20160727220802081?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、不震<br><img src="http://p7tst3obo.bkt.clouddn.com/20160727220812120?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul>
<li><p>1、打开安装目录。一般为 <code>C:\Users\你的用户名\.atom\packages\activate-power-mode\lib</code></p>
</li>
<li><p>2、打开该目录下的配置文件<code>config-schema.coffee</code><br><img src="http://p7tst3obo.bkt.clouddn.com/20160727221236317?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、修改15行和第23行的数值。范围均为0~100,如上面三幅图片所示的数值分别为：超震10，30；默认1.3；不震0，0.<br><img src="http://p7tst3obo.bkt.clouddn.com/20160727221248673?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul>
<li>1、打开Atom，点击file，点击setting。</li>
<li><p>2、找到activate-power-mode，选择setting。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160829124045539?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
<li><p>3、找到如下图所示的设置框，根据自己的喜好设置。我这里为0/0，即不振的。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160829124055848?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[countTime倒计时应用(在子线程中更新主UI)]]></title>
      <url>https://blog.cyang.tech/2016/07/27/countTime%E5%80%92%E8%AE%A1%E6%97%B6%20Android%20APP%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="countTime倒计时应用-在子线程中更新主UI"><a href="#countTime倒计时应用-在子线程中更新主UI" class="headerlink" title="countTime倒计时应用(在子线程中更新主UI)"></a>countTime倒计时应用(在子线程中更新主UI)</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>通过文本输入框输入数据，通过点击按钮进行控制操作，每隔一秒时间见一。难点在于，在子线程中更新UI会导致程序崩溃。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、当应用程序启动时，Android首先会开启一个主线程 (也就是UI线程) ， 主线程为管理界面中的UI控件， 进行事件分发， 比如说， 你要是点击一个 Button ，Android会分发事件到Button上，来响应你的操作。</li>
<li>2、如果此时需要一个耗时的操作，例如: 联网读取数据，或者读取本地较大的一个文件的时候，你不能把这些操作放在主线程中，如果你放在主线程中的话，界面会出现假死现象， 如果5秒钟还没有完成的话，会收到Android系统的一个错误提示  “强制关闭”。  这个时候我们需要把这些耗时的操作，放在一个子线程中，因为子线程涉及到UI更新，，Android主线程是线程不安全的， 也就是说，更新UI只能在主线程中更新，子线程中操作是危险的。</li>
<li>3、Handler就出现了，来解决这个复杂的问题 ，由于Handler运行在主线程中(UI线程中)，它与子线程可以通过Message对象来传递数据，这个时候，Handler就承担着接受子线程传过来的(子线程用sedMessage()方法传弟)Message对象，(里面包含数据)，把这些消息放入主线程队列中，配合主线程进行更新UI。</li>
<li>4、Timer和TimerTask的使用。这两者都是配合使用的，前者是一个定时器，后者是定时器任务。在定时器任务里面，需要复写run方法，在run方法中，我们需要对时间进行减一操作，并通过message将消息发送送出去，从而让Handler接受消息并更新UI。而对于定时器来说，需要手动开启，并可以设置定时任务和定时时长。而在停止倒计时的方法里，只需要将定时器取消就可以。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li><p>1、Handler方法，接受消息，更新主UI</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Handler</span>
  <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

      <span class="token comment" spellcheck="true">//接受消息并更新UI</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
          showTime<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>arg1<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新UI</span>
          <span class="token function">startTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新完成后再次开始倒计时以便循环</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>2、开启倒计时方法，使用定时器。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//开启倒计时</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化定时器</span>
      <span class="token comment" spellcheck="true">//实例化定时器任务</span>
      timerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">//封装消息</span>
              time<span class="token operator">--</span><span class="token punctuation">;</span>
              Message message <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              message<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> time<span class="token punctuation">;</span>
              mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//开启定时器，设置定时器任务，设置定时时长为1000ms</span>
      timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>timerTask<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 待机实验]]></title>
      <url>https://blog.cyang.tech/2016/07/20/STM32%20%E5%BE%85%E6%9C%BA%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-待机实验"><a href="#STM32-待机实验" class="headerlink" title="STM32 待机实验"></a>STM32 待机实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>在STM32中，存在三种低功耗模式。分别为睡眠模式，停机模式，待机模式。这三种低功耗模式对应的系统状态不一样，唤醒方式不一样。其中，待机模式是三者中功耗最低的模式。进入低功耗模式的方法也很简单，系统库函数中就存在。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、有三种方式进入待机模式。分别为设置M3系统控制寄存器中的SLEEPDEEP位；设置电源控制寄存器(PWR_CR)中的PDDS位；清除电源控制/状态寄存器（PWR_CSR）中的WUF位。</li>
<li>2、有四种方式退出待机模式，分别为WKUP引脚的上升沿；RTC闹钟事件的上升沿；NRST引脚上外部复位；IWDG复位。</li>
<li>3、进入待机模式可以直接调用系统函数，不过在进入前需要先设置时钟，进入方式，退出方式。在这里，我们设置进入方式为方式1，唤醒方式为方式1.</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、首先需要待机模式进行设置。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">standmodeinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//待机模式</span>
<span class="token punctuation">{</span>
    <span class="token function">NVIC_SystemLPConfig</span><span class="token punctuation">(</span>NVIC_LP_SLEEPDEEP<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择系统进入低功耗模式的条件</span>
    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_PWR<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能PWR外设时钟</span>
    <span class="token function">PWR_WakeUpPinCmd</span><span class="token punctuation">(</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能唤醒管脚    使能或者失能唤醒管脚功能</span>
    <span class="token function">PWR_EnterSTANDBYMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入待机模式        </span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、在主函数中，通过5秒的延迟后进入待机模式，之后使用K_UP按键退出待机模式，再过5秒再次进入。因为K-UP按键就是连接的PA0，而PA0就是WKUP功能。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//printf初始化</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time: 5\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//隔1秒显示计数</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time: 4\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time: 3\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time: 2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time: 1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"进入系统待机模式\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">standmodeinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//待机模式配置</span>
    <span class="token punctuation">}</span>            
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 独立看门狗实验]]></title>
      <url>https://blog.cyang.tech/2016/07/20/STM32%20%E7%8B%AC%E7%AB%8B%E7%9C%8B%E9%97%A8%E7%8B%97%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-独立看门狗实验"><a href="#STM32-独立看门狗实验" class="headerlink" title="STM32 独立看门狗实验"></a>STM32 独立看门狗实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>STM32内部有两个看门狗电路，一个独立看门狗电路，一个窗口看门狗电路。使用看门狗电路可以防止单片机程序跑飞。看门狗是一个硬件模块，可以理解为一个计数器，这个计数器有一个输入为重置，用于处理器向其写入数据；还有一个输出值，连接到处理器，用于向处理器复位。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、STM32 的独立看门狗由内部专门的40Khz低速时钟驱动，即使主时钟发生故障，它也仍然有效。这里需要注意独立看门狗的时钟是一个内部RC时钟，所以并不是准确的40Khz，而是在30~60Khz之间的一个可变化的时钟，只是我们在估算的时候，以40Khz的频率来计算，看门狗对时间的要求不是很精确，所以，时钟有些偏差，都是可以接受的。</li>
<li>2、看门狗电路的应用，使单片机可以在无人状态下实现连续工作，其工作原理是:看门狗芯片和单片机的一个I/O引脚相连，该I/O引脚通过程序控制它定时地往看门狗的这个引脚上送入高电平（或低电平），这一程序语句是分散地放在单片机其他控制语句中间的，一旦单片机由于干扰造成程序跑飞后而陷入某一程序段进入死循环状态时，写看门狗引脚的程序便不能被执行，这个时候，看门狗电路就会由于得不到单片机送来的信号，便在它和单片机复位引脚相连的引脚上送出一个复位信号，使单片机发生复位。即程序从程序存储器的起始位置开始执行，这样便实现了单片机的自动复位。</li>
<li>3、STM32内部的独立看门狗电路主要有三个寄存器，一个寄存器为IWDG_KR,这个寄存器主要是用于控制的，通过写入三条指令来控制，包括0XAAAA用于复位，重载看门狗的计数值；包括0X5555,允许访问其他的两个寄存器（PR）和（RLR）；0XCCCC启动看门狗。</li>
<li>4、看门狗的两个寄存器，PR寄存器用于设置分频系数,RLR用于设置计数初值。通过这两个寄存器的时间可以设置看门狗的溢出时间。只要在单片机溢出时间内复位看门狗计数值，看门狗就不会输出复位值。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、设置看门狗电路。看门狗电路一旦启用就不能关闭，除非重启，而且重启后不能再次打开。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">iwdg_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//独立看门狗初始化配置</span>
<span class="token punctuation">{</span>
    <span class="token function">IWDG_WriteAccessCmd</span><span class="token punctuation">(</span>IWDG_WriteAccess_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能寄存器，写功能</span>
    <span class="token function">IWDG_SetPrescaler</span><span class="token punctuation">(</span>IWDG_Prescaler_64<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置IWDG预分频值//40K/64=1.6ms</span>
    <span class="token function">IWDG_SetReload</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置IWDG重装载值  12位的（0~4095）//800*1.6ms=1.28s</span>
    <span class="token function">IWDG_ReloadCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照IWDG重装载寄存器的值重装载IWDG计数器</span>
    <span class="token function">IWDG_Enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能IWDG</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、主函数。只要在看门狗的溢出时间内重置看门狗的计数值，就不会重置函数，也就不会输出前两条语句。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//printf初始化</span>
    <span class="token function">iwdg_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//独立看门狗初始化配置</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cyang.tech\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world!\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">IWDG_ReloadCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//喂狗的时间是1.28s</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"进入喂狗模式\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只要在喂狗时间内喂狗就不会让系统以为死机进入复位状态</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 窗口看门狗实验]]></title>
      <url>https://blog.cyang.tech/2016/07/20/STM32%20%E7%AA%97%E5%8F%A3%E7%9C%8B%E9%97%A8%E7%8B%97%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-窗口看门狗实验"><a href="#STM32-窗口看门狗实验" class="headerlink" title="STM32 窗口看门狗实验"></a>STM32 窗口看门狗实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>STM32有两个看门狗，一个为独立看门狗，有自己的时钟；另一个为窗口看门狗，没有独立的时钟。另外，两种看门狗还有不同的喂狗方式。独立看门狗为向特定的寄存器写0XAAAA指令，窗口看门狗为利用产生的中断来喂狗。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、窗口看门狗的特点在于可以设置一个窗口，这个窗口的上限值可以自己设置，是一个7位数值，下限为固定值0X40，当计数下降到窗口上限时会产生中断，在中断中可以对计数值复位，从而避免看门狗复位。</li>
<li>2、窗口看门狗有三个寄存器，分别问CR，低八位有效，其中低7位用于设定减一计数器的初值。另外第八位为启动位；CFR，低10位有效，低7位用于设置窗口上限，后两位用于设置时基，第十位用于开启提前唤醒中断使能（即当计数值小于窗口上限时，产生中断，在中断中进行看门狗的计数复位）；还有SR，仅最低位有效，为标志位，用来记录当前是否有提前唤醒的标志，用软件清零。当计数器值达到40h时，此位由硬件置1。它必须通过软件写0来清除。对此位写1无效。即使中断未被使能，在计数器的值达到0X40的时候，此位也会被置1。</li>
<li>3、编写窗口看门狗的中断服务函数，通过该函数来喂狗，喂狗要快，否则当窗口看门狗计数器值减到0X3F的时候，就会引起软复位了。在中断服务函数里面也要将状态寄存器的EWIF位清空。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li><p>1、由于窗口看门狗没有独立的时钟，所以需要为其设置时钟。下面为窗口看门狗初始化函数。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">wwdg_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中断结构体定义</span>
  <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_WWDG<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// WWDG时钟使能</span>

  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> WWDG_IRQn<span class="token punctuation">;</span>
  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看门狗的优先级要高于其他</span>
  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>
  <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">WWDG_SetPrescaler</span><span class="token punctuation">(</span>WWDG_Prescaler_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置WWDG预分频数值</span>
     <span class="token function">WWDG_SetWindowValue</span><span class="token punctuation">(</span><span class="token number">0x5F</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//窗口上边界数值</span>
     <span class="token function">WWDG_Enable</span><span class="token punctuation">(</span><span class="token number">0x7F</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能窗口看门狗</span>
     <span class="token function">WWDG_ClearFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除提前唤醒中断标志</span>
     <span class="token function">WWDG_EnableIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启窗口看门狗中断</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>2、在中断函数中，需要对看门狗的计数进行复位。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">WWDG_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//窗口看门狗中断程序</span>
<span class="token punctuation">{</span>
 <span class="token function">WWDG_SetCounter</span><span class="token punctuation">(</span><span class="token number">0x7F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//喂狗</span>
 <span class="token function">WWDG_ClearFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"喂狗\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>3、在主函数中，首先输出这三条函数，之后就会进入中断函数输出喂狗。</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//printf初始化</span>
  <span class="token function">wwdg_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//窗口看门狗初始化配置</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cyang.tech！\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"窗口看门狗\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"看门狗函数\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 红外线实验]]></title>
      <url>https://blog.cyang.tech/2016/07/19/STM32%20%E7%BA%A2%E5%A4%96%E7%BA%BF%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-红外线实验"><a href="#STM32-红外线实验" class="headerlink" title="STM32 红外线实验"></a>STM32 红外线实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>红外线是一种不可见光，因此不像其他的无线信号一样可以穿墙，也因此不会干扰其他相同的红外设备。红外线通信是一种非常方便的无线通信协议。使用红外接收头与STM32连接就可以很容易的实现对STM32的无线控制。<br>使用红外接收头对发送出来的红外信号进行分析处理，之后将叛变出来的0,1数据传送到STM32单片机，以便执行控制。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、红外光的发光源实在是太多了。太阳光是其中最强的一个光源，其它的有诸如：白<br>炽灯、蜡烛、热系统中心（如散热器件），甚至我们的身体。实际上，只要有发热的物体，都会发出红外光。调制是我们使需要的信号区别于噪音方法。通过调制我们可以使红外光以特定的频率闪烁。红外接收器会适配这个频率，其它的噪音信号都将被忽略。</li>
<li>2、红外通信的协议有很多种。这个实验使用的是NEC协议。这个协议的采用PWM的方法进行调制，利用脉冲宽度来表示0和1。</li>
<li>3、NEC 遥控指令的数据格式为：同步码头、地址码、地址反码、控制码、控制反码。同步码由一个9ms的低电平和一个4.5ms的高电平组成，地址码、地址反码、控制码、控制反码均是 8 位数据格式。按照低位在前，高位在后的顺序发送。采用反码是为了增加传输的可靠性（可用于校验）。因此，每帧的数据为32位，包括地址码，地址反码，控制码，控制反码。反码可用于解码时进行校验比对。</li>
<li>4、NEC码的位定义：一个脉冲对应560us的连续载波，一个逻辑1传输需要2.25ms（560us 脉冲+1680us 低电平），一个逻辑0的传输需要1.125ms（560us脉冲+560us低电平）。而遥控接收头在收到脉冲的时候为低电平，在没有脉冲的时候为高电平，这样， <strong>我们在接收头端收到的信号为：逻辑 1 应该是 560us 低+1680us 高，逻辑 0 应该是 560us 低+560us 高。 </strong></li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、对于红外接收头，首先需要对其所用的GPIO口进行初始化，并且允许GPIO的中断处理。根据NEC的协议对01数据的时序规定，我们可以通过对GPIO高电平持续时间的判断出0和1信号。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//高电平的持续时间，将记录的时间保存在t中返回，每次20us</span>
u8 <span class="token function">HW_jssj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOG<span class="token punctuation">,</span>GPIO_Pin_15<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//¸ßµçÆ½</span>
    <span class="token punctuation">{</span>
        t<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">>=</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//³¬Ê±Òç³ö</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、在中断函数对信号的种类进行判断</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EXTI15_10_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//红外遥控外部中断</span>
<span class="token punctuation">{</span>
    u8 Tim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Ok<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Data<span class="token punctuation">,</span>Num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOG<span class="token punctuation">,</span>GPIO_Pin_15<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
             Tim<span class="token operator">=</span><span class="token function">HW_jssj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得此次高电平时间</span>

             <span class="token keyword">if</span><span class="token punctuation">(</span>Tim<span class="token operator">>=</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是有用的信号</span>

             <span class="token keyword">if</span><span class="token punctuation">(</span>Tim<span class="token operator">>=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> Tim<span class="token operator">&lt;</span><span class="token number">250</span><span class="token punctuation">)</span>
             <span class="token punctuation">{</span>
                 Ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收到起始信号</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Tim<span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">&amp;&amp;</span> Tim<span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">)</span>
             <span class="token punctuation">{</span>
                 Data<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收到数据 1</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Tim<span class="token operator">>=</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> Tim<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span>
             <span class="token punctuation">{</span>
                 Data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收到数据 0</span>
             <span class="token punctuation">}</span>

             <span class="token keyword">if</span><span class="token punctuation">(</span>Ok<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
             <span class="token punctuation">{</span>
                 hw_jsm<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
                hw_jsm<span class="token operator">+</span><span class="token operator">=</span>Data<span class="token punctuation">;</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span>Num<span class="token operator">>=</span><span class="token number">32</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    hw_jsbz<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                      <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>

             Num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line15<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 DS18B20实验]]></title>
      <url>https://blog.cyang.tech/2016/07/19/STM32%20DS18B20%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-DS18B20实验"><a href="#STM32-DS18B20实验" class="headerlink" title="STM32 DS18B20实验"></a>STM32 DS18B20实验</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>使用STM32与DS18B20进行连接，并通过串口函数将数据传送到PC机进行显示。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、DS18B20是一种单总线的温度传感器。现场温度直接通过单总线以数字方式进行传输。</li>
<li>2、每一个DS18B20均具有一个唯一的64位的ROM序列号，这个唯一的序列号可以保证在单总线上挂载多个DS18B20设备。</li>
<li>3、DS18B20具有9字节的RAM，其中0，1字节用于暂存温度信息，后三位为EERAM用于存储配置信息。</li>
<li>4、DS18B20经转换所得的温度值以二字节补码形式存放在高速暂存存储器的第0和第1个字节。</li>
<li>5、DS18B20的典型温度读取过程，DS18B20的典型温度读取过程为：复位–&gt;SKIP ROM命令（ 0XCC）–&gt;发开始转换命令（ 0X44） –&gt;延时–&gt;复位–&gt;发送 SKIP ROM 命令（ 0XCC）–&gt;发读存储器命令（ 0XBE） –&gt;连续读出两个字节数据(即温度)–&gt;结束</li>
<li>6、单总线是DALLAS公司推出的外围串行扩展总线。单总线只用一根数据输出/输入线DQ，既传输数据位，又传输时间同步信号，而且数据是双向的。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、这部分代码为对DS18B20的主要操作。包括了初始化，读写数据。</li>
</ul>
<pre><code>#include &quot;ds18b20.h&quot;

/*******************************************************************************
* 函 数 名         : ds18b20_init
* 函数功能           : IO端口时钟初始化函数       
* 输    入         : 无
* 输    出         : 无
*******************************************************************************/
void ds18b20_init()
{
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOG,ENABLE);

    GPIO_InitStructure.GPIO_Pin=dq;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
    GPIO_Init(GPIO_ds18b20,&amp;GPIO_InitStructure);
}

/*******************************************************************************
* 函 数 名         : DQININT
* 函数功能           : 输入配置       
* 输    入         : 无
* 输    出         : 无
*******************************************************************************/
void DQININT()     //输入配置
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin=dq;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
    GPIO_Init(GPIO_ds18b20,&amp;GPIO_InitStructure);
}

/*******************************************************************************
* 函 数 名         : DQOUTINT
* 函数功能           : 输出配置       
* 输    入         : 无
* 输    出         : 无
*******************************************************************************/
void DQOUTINT()     //输出配置
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin=dq;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
    GPIO_Init(GPIO_ds18b20,&amp;GPIO_InitStructure);
}

/*******************************************************************************
* 函 数 名         : ds18b20init
* 函数功能           : DS18B20初始化时序       
* 输    入         : 无
* 输    出         : 无
*******************************************************************************/
void ds18b20init()
{
    DQOUTINT();//输出
    ds18b20_dq_L;
    delay_us(480);//延时480微妙
    ds18b20_dq_H;
    delay_us(480);//延时480微妙
}

/*******************************************************************************
* 函 数 名         : ds18b20wr
* 函数功能           : DS18B20写数据时序       
* 输    入         : dat
* 输    出         : 无
*******************************************************************************/
void ds18b20wr(u8 dat)
{
    u8 i=0;
    DQOUTINT();//输出

    for(i=0;i&lt;8;i++)
    {
        ds18b20_dq_L;     //拉低
        delay_us(15);//延时15微妙

        if((dat&amp;0x01)==1)
        {
            ds18b20_dq_H;
        }
        else
        {
            ds18b20_dq_L;
        }
        delay_us(60);//延时60微妙
        ds18b20_dq_H;

        dat&gt;&gt;=1;//准备下一位数据的发送
    }
}

/*******************************************************************************
* 函 数 名         : DS18b20rd
* 函数功能           : DS18B20读数据时序       
* 输    入         : 无
* 输    出         : value
*******************************************************************************/
u8 DS18b20rd()
{
    u8 i=0,value=0;

    for(i=0;i&lt;8;i++)
    {
        value&gt;&gt;=1;
        DQOUTINT();//输出
        ds18b20_dq_L;     //拉低
        delay_us(4);//延时4微妙
        ds18b20_dq_H;
        delay_us(10);//延时10微妙
        DQININT();     //输入配置

        if(GPIO_ReadInputDataBit(GPIO_ds18b20,dq)==1)
        {
           value|=0x80;//读数据 从低位开始
        }

        delay_us(45);//延时45微妙
    }

    return value;
}

/*******************************************************************************
* 函 数 名         : readtemp
* 函数功能           : DS18B2温度寄存器配置，温度读取       
* 输    入         : 无
* 输    出         : value
*******************************************************************************/
double readtemp()              //读取温度内需要复位的
{
    u16 temp;
    u8 a,b;
    double value;
    ds18b20init();        //初始化
    ds18b20wr(0xcc);   //发送忽略ROM指令
    ds18b20wr(0x44);   //发送温度转换指令
    delay_ms(800);
    ds18b20init();       //初始化
    ds18b20wr(0xcc);   //发送忽略ROM指令
    ds18b20wr(0xbe);   //发读暂存器指令
    a=DS18b20rd();     //温度的低八位
    b=DS18b20rd();     //温度的高八位
    temp=b;
    temp=(temp&lt;&lt;8)+a;
    if((temp&amp;0xf800)==0xf800)
    {
        temp=(~temp)+1;
        value=temp*(-0.0625);
    }
    else
    {
        value=temp*0.0625;
    }
    return value;
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 Printf函数]]></title>
      <url>https://blog.cyang.tech/2016/07/18/STM32%20printf%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-printf函数"><a href="#STM32-printf函数" class="headerlink" title="STM32 printf函数"></a>STM32 printf函数</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>STM32有5路串口，所以可以很容易的与PC机进行通信。而通过C语言的printf是一种很容易理解的方式。使用232芯片与PC进行通信，定时向通过串口发送数据到PC机进行显示。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、要实现串口发送printf的功能，首先需要重新编写printf函数，对其进行重定向。这个函数的功能就是输入一个参数，然后通过串口发送这个参数。</li>
<li>2、改变了printf的功能，所以需要进行重定向。这会使的在运行到printf函数时调用的是自定义的printf函数。</li>
<li>3、其余的初始化函数是和232初始化一样的，因为事实上就是通过232芯片来实现的发送数据。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、自定义的printf函数<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE <span class="token operator">*</span>p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//函数默认的，在使用printf时自动调用。</span>
<span class="token punctuation">{</span>
  <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token punctuation">(</span>u8<span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TXE<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 串口通信]]></title>
      <url>https://blog.cyang.tech/2016/07/18/STM32%20%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-串口通信"><a href="#STM32-串口通信" class="headerlink" title="STM32 串口通信"></a>STM32 串口通信</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>使用STM32的串口与PC进行通信，使用的芯片为232或者485。从电脑端发送一和数值，STM32接收完成后通过中断函数进行加1操作，之后再通过串口发送到电脑进行显示。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、串口操作的一般步骤。</li>
</ul>
<p>（1) 打开 GPIO 的时钟使能和 USART 的时钟使能。</p>
<p>（2) 设置串口 IO 的 IO 口模式。 （一般输入是模拟输入， 输出是复用推挽输出）</p>
<p>（3) 初始化 USART。 （包括设置波特率、数据长度、停止位、效验位等）</p>
<p>（4) 如果使用中断接收的话，那么还要设置 NVIC 并打开中断使能。（即设置 设置它的中断优先级。 ）</p>
<ul>
<li>2、串口中断函数的操作步骤</li>
</ul>
<p>（1）发送标志位清零。这一步主要是用于清空下面会执行到的发送数据的标志位。<br>（2）判断中断是否发生<br>（3）获取接收的数据并且加1后进行发送。<br>（4）判断是否发送完成，若完成就退中断。</p>
<ul>
<li>3、232芯片和485芯片都可以用作与PC进行通信，两者的代码差不多，但是232芯片为全双工通信，而485芯片为半双工通信。因此，485芯片比232芯片会多一个控制发送还是接收的使能管脚，需要通过该管脚进行置0或置1进行发送或者接收的切换。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、设置USART<br>```c<br>USART_InitStructure.USART_BaudRate=9600;   //波特率设置为9600    //波特率<br>USART_InitStructure.USART_WordLength=USART_WordLength_8b;        //数据长8位<br>USART_InitStructure.USART_StopBits=USART_StopBits_1;            //1位停止位<br>USART_InitStructure.USART_Parity=USART_Parity_No;                //无效验<br>USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None; //失能硬件流<br>USART_InitStructure.USART_Mode=USART_Mode_Rx|USART_Mode_Tx;     //开启发送和接受模式<br>USART_Init(USART1,&amp;USART_InitStructure);    /<em> 初始化USART1 </em>/<br>USART_Cmd(USART1, ENABLE);           /<em> 使能USART1 </em>/<br>USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//使能或者失能指定的USART中断 接收中断<br>USART_ClearFlag(USART1,USART_FLAG_TC);//清除USARTx的待处理标志位</li>
</ul>
<pre><code>
- 2、设置NVIC
```c
/* 设置NVIC参数 */
NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;        //打开USART1的全局中断
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;      //抢占优先级为0
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;             //响应优先级为0
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;              //使能
NVIC_Init(&amp;NVIC_InitStructure);
</code></pre><ul>
<li>3、中断函数<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//串口1中断函数</span>
<span class="token punctuation">{</span>
  <span class="token keyword">static</span> u8 k<span class="token punctuation">;</span>
  <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_IT_RXNE<span class="token punctuation">)</span><span class="token operator">!=</span>Bit_RESET<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查指定的USART中断发生与否</span>
  <span class="token punctuation">{</span>
      k<span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      k<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过外设USARTx发送单个数据</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TXE<span class="token punctuation">)</span><span class="token operator">==</span>Bit_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否发送完成</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32总线实验]]></title>
      <url>https://blog.cyang.tech/2016/07/18/STM32%E6%80%BB%E7%BA%BF%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32总线实验"><a href="#STM32总线实验" class="headerlink" title="STM32总线实验"></a>STM32总线实验</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>通过IIC总线，向EEPROM存储器24c02进行读写操作。在51单片机中，由于没有IIC接口，所以需要通过两个管脚模拟IIC协议的时序，从而进行IIC总线通信。而在STM32中，是具有IIC总线接口的，但是比较复杂，所以这里依然通过GPIO口模拟IIC时序。通过IIC总线与24C02进行通信，并通过串口返回数据。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、IIC是飞利浦公司推出的一种串行总线，可以连接多个设备。IIC总线仅包含两根信号线。一根为SDA（数据线），另一根为SCL（时钟线）。</li>
<li>2、每一个连接到IIC总线都具有唯一的地址，每一个设备之间为与的关系。</li>
<li>3、由主机发送起始s和终止p信号。起始信号后紧跟着的数据为寻址信号字节。通过这个字节可以选择主机想要与之通信的从机。这个字节的高7位表示地址，其中包括固定地址和可编程地址，可编程地址的位数决定了这种类型的芯片最多可以连接到IIC总线的数量。例如24c02芯片的7为地址为1010，后三位可编程为为A2，A1，A0。这三位为外接口，可通过连接高电平或者接地进行编程。寻址字节的最后一位为数据的传送方向，若为0，则表示主机向从机写数据；若为1，则表示主机需要向从机度数据。</li>
<li>4、一问一答式。每次数据传送都需要进行应答。每个数据位均为8位，后面会跟一个从机或者主机的应答位，因此每帧数据为9位。</li>
<li>5、每次数据传送都是由主机产生终止信号来结束，但是，若主机希望继续占用总线进行新的数据传送，则可以不产生终止信号，马上再次发送起始信号对另从机进行寻址。</li>
<li>6、起始信号s；终止信号p；0/应答；1/非应答这四种信号的表示方法如下图。<br><img src="http://p7tst3obo.bkt.clouddn.com/iic/iic.jpg?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="image"></li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、由于还是使用STM32 的两个GPIO口进行模拟IIC协议，所以这里的程序主要包括两层，首先就是需用通过GPIO口模拟IIC协议，因此需要进行模拟操作。这部分程序包括了基本的GPIO初始化部分，输入设置部分，输出设置部分，发送四种信号部分，等待从机应答部分，发送一个字节部分，读取一个字节部分。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//产生起始信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">I2C_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    I2C_SDA_H<span class="token punctuation">;</span>
    I2C_SCL_H<span class="token punctuation">;</span>
    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    I2C_SDA_L<span class="token punctuation">;</span>
    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    I2C_SCL_L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//产生停止信号</span>
<span class="token keyword">void</span> <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">I2C_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   I2C_SCL_L<span class="token punctuation">;</span>
   I2C_SDA_L<span class="token punctuation">;</span>
   I2C_SCL_H<span class="token punctuation">;</span>
   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SDA_H<span class="token punctuation">;</span>
   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//主机产生应答信号ACK</span>
<span class="token keyword">void</span> <span class="token function">I2C_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   I2C_SCL_L<span class="token punctuation">;</span>
   <span class="token function">I2C_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SDA_L<span class="token punctuation">;</span>
   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SCL_H<span class="token punctuation">;</span>
   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SCL_L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//主机不产生应答信号NACK</span>
<span class="token keyword">void</span> <span class="token function">I2C_NAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   I2C_SCL_L<span class="token punctuation">;</span>
   <span class="token function">I2C_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SDA_H<span class="token punctuation">;</span>
   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SCL_H<span class="token punctuation">;</span>
   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   I2C_SCL_L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//等待从机应答信号</span>
<span class="token comment" spellcheck="true">//返回值：1 接收应答失败</span>
<span class="token comment" spellcheck="true">//          0 接收应答成功</span>
u8 <span class="token function">I2C_Wait_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 tempTime<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">I2C_SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    I2C_SDA_H<span class="token punctuation">;</span>
    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    I2C_SCL_H<span class="token punctuation">;</span>
    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIO_I2C<span class="token punctuation">,</span>I2C_SDA<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tempTime<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tempTime<span class="token operator">></span><span class="token number">250</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">I2C_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    I2C_SCL_L<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//I2C 发送一个字节</span>
<span class="token keyword">void</span> <span class="token function">I2C_Send_Byte</span><span class="token punctuation">(</span>u8 txd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">I2C_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    I2C_SCL_L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拉低时钟开始数据传输</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>txd<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0x80  1000 0000</span>
            I2C_SDA_H<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            I2C_SDA_L<span class="token punctuation">;</span>

        txd<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
        I2C_SCL_H<span class="token punctuation">;</span>
        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发送数据</span>
        I2C_SCL_L<span class="token punctuation">;</span>
        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//I2C 读取一个字节</span>

u8 <span class="token function">I2C_Read_Byte</span><span class="token punctuation">(</span>u8 ack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   u8 i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>receive<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

   <span class="token function">I2C_SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
           I2C_SCL_L<span class="token punctuation">;</span>
        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        I2C_SCL_H<span class="token punctuation">;</span>
        receive<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIO_I2C<span class="token punctuation">,</span>I2C_SDA<span class="token punctuation">)</span><span class="token punctuation">)</span>
           receive<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

       <span class="token keyword">if</span><span class="token punctuation">(</span>ack<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
           <span class="token function">I2C_NAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">I2C_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> receive<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、第二部分包括对24C02的基本读写函数。而基本的读写函数都需要通过IIC来控制24c02。因此这部分的函数是需要调用上面IIC操作函数的。</li>
</ul>
<pre><code>#include &quot;AT24CXX.h&quot;
//24c02读一个字节地址  数据

u8 AT24Cxx_ReadOneByte(u16 addr)
{
    u8 temp=0;

    I2C_Start();

    if(EE_TYPE&gt;AT24C16)
    {
        I2C_Send_Byte(0xA0);
        I2C_Wait_Ack();
        I2C_Send_Byte(addr&gt;&gt;8);    //发送数据地址高位
    }
    else
    {
       I2C_Send_Byte(0xA0+((addr/256)&lt;&lt;1));//器件地址+数据地址
    }

    I2C_Wait_Ack();
    I2C_Send_Byte(addr%256);//双字节是数据地址低位
                            //单字节是数据地址低位
    I2C_Wait_Ack();

    I2C_Start();
    I2C_Send_Byte(0xA1);
    I2C_Wait_Ack();

    temp=I2C_Read_Byte(0); //  0   代表 NACK
    I2C_NAck();
    I2C_Stop();

    return temp;
}

//24c02读2个字节地址    数据

u16 AT24Cxx_ReadTwoByte(u16 addr)
{
    u16 temp=0;

    I2C_Start();

    if(EE_TYPE&gt;AT24C16)
    {
        I2C_Send_Byte(0xA0);
        I2C_Wait_Ack();
        I2C_Send_Byte(addr&gt;&gt;8);    //发送数据地址高位
    }
    else
    {
       I2C_Send_Byte(0xA0+((addr/256)&lt;&lt;1));//器件地址+数据地址
    }

    I2C_Wait_Ack();
    I2C_Send_Byte(addr%256);//双字节是数据地址低位
                            //单字节是数据地址低位
    I2C_Wait_Ack();

    I2C_Start();
    I2C_Send_Byte(0xA1);
    I2C_Wait_Ack();

    temp=I2C_Read_Byte(1); //  1   代表 ACK
    temp&lt;&lt;=8;
    temp|=I2C_Read_Byte(0); //  0  代表 NACK

    I2C_Stop();

    return temp;
}

/*******************************************************************************
* 函 数 名         : AT24Cxx_WriteOneByte
* 函数功能           : 24c02写一个字节地址  数据
* 输    入         : addr  dt
* 输    出         : 无
*******************************************************************************/
void AT24Cxx_WriteOneByte(u16 addr,u8 dt)
{
    I2C_Start();

    if(EE_TYPE&gt;AT24C16)
    {
        I2C_Send_Byte(0xA0);
        I2C_Wait_Ack();
        I2C_Send_Byte(addr&gt;&gt;8);    //发送数据地址高位
    }
    else
    {
       I2C_Send_Byte(0xA0+((addr/256)&lt;&lt;1));//器件地址+数据地址
    }

    I2C_Wait_Ack();
    I2C_Send_Byte(addr%256);//双字节是数据地址低位
                            //单字节是数据地址低位
    I2C_Wait_Ack();

    I2C_Send_Byte(dt);
    I2C_Wait_Ack();
    I2C_Stop();

    delay_ms(10);
}

/*******************************************************************************
* 函 数 名         : AT24Cxx_WriteTwoByte
* 函数功能           : 24c02写2个字节地址  数据
* 输    入         : addr  dt
* 输    出         : 无
*******************************************************************************/
void AT24Cxx_WriteTwoByte(u16 addr,u16 dt)
{
    I2C_Start();

    if(EE_TYPE&gt;AT24C16)
    {
        I2C_Send_Byte(0xA0);
        I2C_Wait_Ack();
        I2C_Send_Byte(addr&gt;&gt;8);    //发送数据地址高位
    }
    else
    {
       I2C_Send_Byte(0xA0+((addr/256)&lt;&lt;1));//器件地址+数据地址
    }

    I2C_Wait_Ack();
    I2C_Send_Byte(addr%256);//双字节是数据地址低位
                            //单字节是数据地址低位
    I2C_Wait_Ack();

    I2C_Send_Byte(dt&gt;&gt;8);
    I2C_Wait_Ack();

    I2C_Send_Byte(dt&amp;0xFF);
    I2C_Wait_Ack();

    I2C_Stop();

    delay_ms(10);
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Coolweather Debug]]></title>
      <url>https://blog.cyang.tech/2016/07/17/coolweather%20debug/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="coolweather-Debug"><a href="#coolweather-Debug" class="headerlink" title="coolweather Debug"></a>coolweather Debug</h1><p>考试周以前照着《第一行代码》写的程序，一直存在bug，开始是直接闪退，后来找到两个地方代码打错后，就没看。过了二十多天后，今晚重新开始，发现可以运行，实现了部分功能，但还是有部分功能出错。可以实现从选择省，选择市，但是不能选择县。选择了具体市后应该要出现的这个市包含那些县，但是这个过程中闪退了。<br>闪退原因经过后面排查才发现还是打错的四个字母坏的事。不过，发现并解决这个问题的过程很有趣。我在群里发了一个问题，然后有一个人一直帮我解决，后面还远程控制我的电脑，帮我排查。从他排查问题的方法里，学到了很多。</p>
<a id="more"></a>
<p>首先就是要弄懂这个闪退后提示的错误代码是什么含义，然后可以通过logcat输出程序内部变量的变化。也就是从这一步步变量变化的过程中，我们最终一起找到了错误。</p>
<p>一开始的错误代码是这样的</p>
<pre><code>java.lang.NullPointerException: Attempt to invoke virtual method &#39;java.lang.String java.lang.Object.toString()&#39; on a null object reference
                                                                          at android.widget.ArrayAdapter.createViewFromResource(ArrayAdapter.java:401)
                                                                          at android.widget.ArrayAdapter.getView(ArrayAdapter.java:369)
                                                                          at android.widget.AbsListView.obtainView(AbsListView.java:2346)
                                                                          at android.widget.ListView.makeAndAddView(ListView.java:1876)
                                                                          at android.widget.ListView.fillSpecific(ListView.java:1355)
                                                                          at android.widget.ListView.layoutChildren(ListView.java:1663)
                                                                          at android.widget.AbsListView.onLayout(AbsListView.java:2148)
                                                                          at android.view.View.layout(View.java:16636)
                                                                          at android.view.ViewGroup.layout(ViewGroup.java:5437)
                                                                          at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1743)
                                                                          at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1586)
                                                                          at android.widget.LinearLayout.onLayout(LinearLayout.java:1495)
                                                                          at android.view.View.layout(View.java:16636)
                                                                          at android.view.ViewGroup.layout(ViewGroup.java:5437)
                                                                          at android.widget.FrameLayout.layoutChildren(FrameLayout.java:336)
                                                                          at android.widget.FrameLayout.onLayout(FrameLayout.java:273)
                                                                          at android.view.View.layout(View.java:16636)
                                                                          at android.view.ViewGroup.layout(ViewGroup.java:5437)
                                                                          at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1743)
                                                                          at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1586)
                                                                          at android.widget.LinearLayout.onLayout(LinearLayout.java:1495)
                                                                          at android.view.View.layout(View.java:16636)
                                                                          at android.view.ViewGroup.layout(ViewGroup.java:5437)
                                                                          at android.widget.FrameLayout.layoutChildren(FrameLayout.java:336)
                                                                          at android.widget.FrameLayout.onLayout(FrameLayout.java:273)
                                                                          at com.android.internal.policy.PhoneWindow$DecorView.onLayout(PhoneWindow.java:2678)
                                                                          at android.view.View.layout(View.java:16636)
                                                                          at android.view.ViewGroup.layout(ViewGroup.java:5437)
                                                                          at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2171)
                                                                          at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1931)
                                                                          at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1107)
                                                                          at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6013)
                                                                          at android.view.Choreographer$CallbackRecord.run(Choreographer.java:858)
                                                                          at android.view.Choreographer.doCallbacks(Choreographer.java:670)
                                                                          at android.view.Choreographer.doFrame(Choreographer.java:606)
                                                                          at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)
                                                                          at android.os.Handler.handleCallback(Handler.java:739)
                                                                          at android.os.Handler.dispatchMessage(Handler.java:95)
                                                                          at android.os.Looper.loop(Looper.java:148)
                                                                          at android.app.ActivityThread.main(ActivityThread.java:5417)
                                                                          at java.lang.reflect.Method.invoke(Native Method)
                                                                          at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
                                                                          at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)
                                                                          at de.robv.android.xposed.XposedBridge.main(XposedBridge.java:114)
</code></pre><p>这个错误代码的意思是adapter适配器错误，接收到的null对象。然而前面的省和市都已经正常显示出来了，所以一定的县这个数据列表的错误。<br>因此在获取县数据列表中加入log.e，如下</p>
<pre><code>Log.e(&quot;TAG&quot;,&quot;datalist=&quot;+ dataList.toString());
</code></pre><p>从数据返回的结果来看确实为null,因此，可见数据没有获得。而从浏览器测试API的结果来看，数据是可以正常获取的。因此，错误应该在解析上出错。</p>
<p>找到解析返回数据的函数，加入log.e,如下</p>
<pre><code>Log.e(&quot;TAG&quot;,&quot;DDD=&quot;+response);
</code></pre><p>从返回的数据来看，是正常从服务器接受了数据的，数据的格式为<code>E/TAG: DDD=060601|白城,060602|洮南,060603|大安,060604|镇赉,060605|通榆</code>.而解析出的结果为两个字符串，一个为城市代号，一个为城市名称。这两个分别加入数组的不同位置。而出错就是在这里。如下：<br>正确代码：</p>
<pre><code>county.setCountyCode(array[0]);
county.setCountyName(array[1]);
</code></pre><p>错误代码：</p>
<pre><code>county.setCountyCode(array[0]);
county.setCountyCode(array[1]);
</code></pre><p>就是Name错写成Code，所以整个程序就出错了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 外部中断实验]]></title>
      <url>https://blog.cyang.tech/2016/07/15/STM%20%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-外部中断实验"><a href="#STM32-外部中断实验" class="headerlink" title="STM32 外部中断实验"></a>STM32 外部中断实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>STM32共用68个外部中断，16个内部中断，并且有16级的中断优先级设置。比起51内核单片机，STM32的中断设置要复杂和强大的多。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、68个外部中断源包括很多种类，比如iic中断，uart中断，can中断等。</li>
<li>2、<strong>两种中断优先级</strong>。每一个中断源都要设置中断优先等级，由4位数来控制，所以共有16种。这4位数字中包括两种优先级，分别为 <strong>抢占式优先级和响应式优先级。抢占式优先级的优先级高于响应式优先级，同时，抢占式优先级支持嵌套，响应式优先级不支持嵌套。</strong></li>
<li>3、4位数分两种优先级，共有 <strong>5种搭配方式</strong>，即分别为抢占式优先级和响应式优先级的位数分别为4/0，3/1，2/2，1/3，0/4. 采用库函数编写代码是，分别为NVIC_PriorityGroup_1，NVIC_PriorityGroup_2 … NVIC_PriorityGroup_5 。</li>
<li>4、这里采用的是外部按键中断，其本质还是GPIO口的输入中断，对应中断源为 <strong>EXTI中断</strong> 。STM32的每一个GPIO口均可以作为中断输入，但是由于EXTI中断的特性，STM32它 <strong>一次性同时使用的外部 中断只能有 16 个， 而且同时做外部中断的 IO 口序号也是不能相同的</strong>， 比如， 你使用 PA0 做外部中断了，那么就不能同时使用 PB0 做外部中断了。</li>
<li>5、配置GPIO口中断时，使用下降沿触发，那么就选择上拉输入模式，要使用上升沿触发，那么就选择下拉输入模式。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、外部中断函数初始化。这里需要设置GPIO，之后选择外部中断模式，最后进行参数配置。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">exti_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//外部中断初始化</span>
<span class="token punctuation">{</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>

    EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span>

    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 开启GPIO时钟 */</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOE<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>k_left<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_IPU<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>GPIO_PortSourceGPIOE<span class="token punctuation">,</span> GPIO_PinSource2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择GPIO管脚用作外部中断线路</span>
    <span class="token comment" spellcheck="true">//此处一定要记住给端口管脚加上中断外部线路</span>
    <span class="token comment" spellcheck="true">/* 设置外部中断的模式 */</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line<span class="token operator">=</span>EXTI_Line2<span class="token punctuation">;</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode<span class="token operator">=</span>EXTI_Mode_Interrupt<span class="token punctuation">;</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger<span class="token operator">=</span>EXTI_Trigger_Falling<span class="token punctuation">;</span>
    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>
    <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 设置NVIC参数 */</span>
    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span>         
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> EXTI2_IRQn<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//打开EXTI2的全局中断</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级为0</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//响应优先级为0</span>
    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//使能</span>
    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>         
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、STM32的中断和之前写的51不一样。<strong>中断后的算法逻辑需要添加到user文件夹下的stm32f10x_it.c文件中。</strong> 如下为实现按键控制LED状态，代码为stm32f10x_it.c代码中的部分。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EXTI2_IRQHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//外部中断2中断函数</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>EXTI_Line2<span class="token punctuation">)</span><span class="token operator">==</span>SET<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
           <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除EXTI线路挂起位</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消抖处理</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_2<span class="token punctuation">)</span><span class="token operator">==</span>Bit_RESET<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//k_left按键按下</span>
        <span class="token punctuation">{</span>
            <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消抖处理</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadOutputDataBit</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span>GPIO_Pin_0<span class="token punctuation">)</span><span class="token operator">==</span>Bit_RESET<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//LED 熄灭</span>
               <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span>GPIO_Pin_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
               <span class="token comment" spellcheck="true">//LED 发光</span>
                <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span>GPIO_Pin_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>        
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 Systick时钟]]></title>
      <url>https://blog.cyang.tech/2016/07/15/STM32%20systick%E6%97%B6%E9%92%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-systick时钟"><a href="#STM32-systick时钟" class="headerlink" title="STM32 systick时钟"></a>STM32 systick时钟</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>之前使用的延迟函数是利用循环语句占用cpu时间来实现的，这样的延时并不准确。而systick定时器是包含在M3的内核里，捆绑在 NVIC 中的。使用它可以做到很精确的延时。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、它是24位倒计数的定时器，当定时器 <strong>进行减1</strong> 计数到0的时候，将从LOAD寄存器中 <strong>自动重装</strong> 定时器初值，如果开启中断的话，同时它还是产生异常中断信号。<strong>默认使用的为系统的72M频率进行8分频得到的9Mhz。</strong></li>
<li>2、systick定时器的时钟来源是来自系统时钟，不过它的时钟可以选择成直接取自系统时钟，还可以将系统时钟8分频之后再赋给systick定时器。但是该定时器的时钟频率可随系统时钟频率的变化而改变。而STM32这个芯片本身就可以设定不同的晶振源并设置不同的系统频率，所以该定时器的工作频率是随系统频率而变的。</li>
<li>3、它的功能由4个寄存器来决定。其中，寄存器LOAD负责记录初值，寄存器VAL负责记录当前值。 这两个寄存器均为24位寄存器，所以其 <strong>大计数值为0xffffff</strong> 。因此，在使用默认的9Mhz频率时，<strong>延迟时间理论上最大可到(0xffffff/9000)秒，即1.864秒。</strong> 因此在进行延迟时，一般只延迟1秒，要延迟2秒则调用两次延迟函数就好。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、延迟微秒函数，延迟毫秒为乘以9000.</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span>u32 i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u32 temp<span class="token punctuation">;</span>
    SysTick<span class="token operator">-></span>LOAD<span class="token operator">=</span><span class="token number">9</span><span class="token operator">*</span>i<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//在9Mhz的频率下，意味着每为妙执行9次，因此需要乘以9</span>
    SysTick<span class="token operator">-></span>CTRL<span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//控制寄存器最低位为打开systick</span>
    SysTick<span class="token operator">-></span>VAL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前值清零</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{</span>
        temp<span class="token operator">=</span>SysTick<span class="token operator">-></span>CTRL<span class="token punctuation">;</span>           
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//判断是否计数完成</span>
    SysTick<span class="token operator">-></span>CTRL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关闭systick</span>
    SysTick<span class="token operator">-></span>VAL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前计数值清零</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、自定义时钟频率</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">RCC_HSE_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//自定义系统时间（可以修改时钟）</span>
<span class="token punctuation">{</span>
    <span class="token function">RCC_DeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将外设RCC寄存器重设为缺省值</span>
    <span class="token function">RCC_HSEConfig</span><span class="token punctuation">(</span>RCC_HSE_ON<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置外部高速晶振（HSE）</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">RCC_WaitForHSEStartUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>SUCCESS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//等待HSE起振</span>
    <span class="token punctuation">{</span>
        <span class="token function">RCC_HCLKConfig</span><span class="token punctuation">(</span>RCC_SYSCLK_Div1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置AHB时钟（HCLK）</span>
        <span class="token function">RCC_PCLK1Config</span><span class="token punctuation">(</span>RCC_HCLK_Div2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置低速AHB时钟（PCLK1）</span>
        <span class="token function">RCC_PCLK2Config</span><span class="token punctuation">(</span>RCC_HCLK_Div1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置高速AHB时钟（PCLK2）</span>
        <span class="token function">RCC_PLLConfig</span><span class="token punctuation">(</span>RCC_PLLSource_HSE_Div2<span class="token punctuation">,</span>RCC_PLLMul_9<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置PLL时钟源及倍频系数</span>
        <span class="token function">RCC_PLLCmd</span><span class="token punctuation">(</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能或者失能PLL</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">RCC_GetFlagStatus</span><span class="token punctuation">(</span>RCC_FLAG_PLLRDY<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查指定的RCC标志位设置与否,PLL就绪</span>
        <span class="token function">RCC_SYSCLKConfig</span><span class="token punctuation">(</span>RCC_SYSCLKSource_PLLCLK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置系统时钟（SYSCLK）</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">RCC_GetSYSCLKSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回用作系统时钟的时钟源,0x08：PLL作为系统时钟</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2017-11-19-更新"><a href="#2017-11-19-更新" class="headerlink" title="2017/11/19 更新"></a>2017/11/19 更新</h2><ul>
<li>1、在较新的库函数版本中，systick用于延时的时候是非常实用的，而且配置上也比较简单。都是根据系统主频的配置自动设置初始计数值，将定时器的定时时间设置成1ms。</li>
<li>2、1ms产生一次中断，在中断函数中执行计数值<code>uwTick</code>加1操作。</li>
<li>3、延迟函数中通过对<code>uwTick</code>的数值进行判断来实现。这样在延迟时也可以比较灵活，对参数i（单位为ms）传值便可以配置延迟时间。代码如下：<pre class="line-numbers language-c"><code class="language-c">  __weak <span class="token keyword">void</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span>__IO uint32_t Delay<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    uint32_t tickstart <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>
    tickstart <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickstart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Delay<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 按键实验]]></title>
      <url>https://blog.cyang.tech/2016/07/15/STM32%20%E6%8C%89%E9%94%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-按键实验"><a href="#STM32-按键实验" class="headerlink" title="STM32 按键实验"></a>STM32 按键实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>使用按键对单片机进行输入，之后通过led的显示来展示输出。通过判断输入端口的数值来执行程序，并不才用中断控制的方式。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、按键抖动。由于机械点的弹性作用，一个按键开关在闭合时不会马上稳定的接通，在断 开时也不会一下子断开。因而在闭合及断开的瞬间均伴随有一连串的抖动。抖动 时间的长短由按键的机械特性决定的，一般为 5ms 到 10ms。</li>
<li>2、按键去抖动的方法。一般来说一个简单的按键消抖就是先读取一次按键的状态，如果得到按键按下之后，延时 10ms，再次读取一次按键的状态，如果按键还是按下状态，那么说明按键已经按下。</li>
<li>3、GPIO的输入模式。采用下啦输入的模式。按键被按下则相应引脚位变为1。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>k_up<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//判断按键是否被按下</span>
    <span class="token punctuation">{</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//延迟10ms</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>k_up<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//按键仍然被按下</span>
        <span class="token punctuation">{</span>
            <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token number">0xfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>k_up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待按键放开后跳出循环</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 流水灯续集]]></title>
      <url>https://blog.cyang.tech/2016/07/14/STM32%20%E6%B5%81%E6%B0%B4%E7%81%AF%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="流水灯续集"><a href="#流水灯续集" class="headerlink" title="流水灯续集"></a>流水灯续集</h1><p> 这里写出三种不同的代码，均可是实现流水灯的效果。</p>
<a id="more"></a>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><ul>
<li>1、最简单的方式，直接输出</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">led_display1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xfe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xfd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xfb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xf7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xdf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0xbf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>2、通过每次移动不同的位数</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">led_display2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>3、每次都只移动一位，但是采用或0x01实现将每次移位自动补充的0变成1。这种方式和之前的每次移位后加1的操作本质上是相同的。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">led_display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">6000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> i <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 蜂鸣器实验]]></title>
      <url>https://blog.cyang.tech/2016/07/13/STM32%20%E8%9C%82%E9%B8%A3%E5%99%A8%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-蜂鸣器实验"><a href="#STM32-蜂鸣器实验" class="headerlink" title="STM32 蜂鸣器实验"></a>STM32 蜂鸣器实验</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>使用STM32控制无源蜂鸣器播放声音。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、无源蜂鸣器的“源”指的不是电源，而是指有没有自带震荡电路，有源蜂鸣器带震荡电路，一通电就会发声；无源蜂鸣器则没有自带震荡电路，必须外部提供2~5Khz 左右的方波驱动，才能发声。</li>
<li>2、对蜂鸣器的控制仅需要IO口的一个引脚。该引脚产生一个2~5kHz的方波即可。产生的方式为每过一段时间后就输出高，之后输出同样时间的低，如此反复。</li>
<li>3、脉冲宽度调制(PWM)是利用微处理器的数字输出来对模拟电路进行控制的一种非常有效的技术，广泛应用在从测量、通信到功率控制与变换的许多领域中。其根据相应载荷的变化来调制晶体管基极或MOS管栅极的偏置，来实现晶体管或MOS管导通时间的改变，从而实现开关稳压电源输出的改变。这个项目中，输出口并不是直接接到无源蜂鸣器的，而是通过连接欸一个三极管后再连接。</li>
<li>4、GPIO口的初始化。和流水灯一样，需要使用IO口就需要对其进行初始化。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、产生方波的代码<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sound2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//电动车声音</span>
<span class="token punctuation">{</span>
  u32 i<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//产生一段PWM波</span>
  <span class="token punctuation">{</span>
      <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>BZ<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//IO输出高电平</span>
      <span class="token function">delay</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>BZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//IO输出低电平</span>
      <span class="token function">delay</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
这里实现PWM的方式是通过while循环不断对i进行减一操作。这样做既保证了输出波形为方波，同时又保证了每一次周期都减1。<br>可通过更改i的值来改变发出的声音。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STM32 流水灯实验]]></title>
      <url>https://blog.cyang.tech/2016/07/12/STM32%20%E6%B5%81%E6%B0%B4%E7%81%AF%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="STM32-流水灯项目"><a href="#STM32-流水灯项目" class="headerlink" title="STM32 流水灯项目"></a>STM32 流水灯项目</h1><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>使用STM32单片机点亮流水灯的代码和之前使用的51有很大的区别。最主要的区别是这两种单片机的区别，至于核心算法思想都是一样的。使用STM32单片机的代码比骄复杂。</p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>1、STM32单片机需要的代码文件很多。除了这个项目核心的代码 main.c 之外，还有很多需要加载的库函数，这些函数也是必不可少的。其中类似有StdPerich_Driver，Startup ，cmsis这三个文件夹目前是不需要更改里面存放的内容。需要更改的有APP，user这两个文件夹中存放的部分代码。</li>
<li>2、STM32单片机的每个IO口都有8种不同的输入模式，这8种模式的选择由代码来设置。分为输入和输出各4种。在这个项目中，使用到8个IO口，使用的模式为推挽式输出。</li>
<li>3、GPIO的使用，首先需要初始化，使用初始化函数GPIO_init函数，这个函数需要两个参数，第一个指定使用的GPIO组，这里是GPIOC；第二个参数是一个指向设置pin,传输速率，模式的结构体的指针。</li>
<li>4、GPIO的输出函数。共有三个函数可以设置IO口的输出。分别为set,reset,write。第一个设置管脚为1，第二个设置为0，这两个的操作范围是全部选中的IO口；而第三个是可以向51单片机对P口赋值一样的8位二进制数，一般用两位十六进制数字表示。使用前两个函数只能实现整排LED的闪烁，因为其不能实现具体的某一个管脚的控制，而是一整排所有管脚的控制。</li>
</ul>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>1、数据左移<pre class="line-numbers language-code"><code class="language-code">void led_display()
{
  int i = 0xfe;
  while(1){
      GPIO_Write(GPIOC,i);
      delay(6000000);
      i = i << 1;
      i = i + 1;
  }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>由于是共阳的连接，所以首先需要赋初值为0xfe。之后进行左移时并不是执行的循环左移，而是在右端补0，这样做的结果类似于显示进度栏，没过一秒点亮一个灯，直到所有都点亮。而我们需要的效果是每次仅有一个灯点亮，每一次这个位置都向左/右移动一个位置。需要实现这个功能，就要在每一次左移后，系统西东给数子末端补的<strong>0加1</strong>，这样，就会熄灭本来要点亮的那个灯。</li>
<li>这段代码没没有实现循环不间断的流水灯，具体原因还未知。尝试过的几种方法理论上的没有问题的。估计是因为GPIO,或者数据左移的问题。在之前用VHDL或者JAVA写过的左移代码里，核心思想都是需要将第一位数字保存在数组里，之后通过在后置位叠加的方式移位。在VHDL中，可以很容易的对位进行操作。但是在JAVA中需要将数字使用toString方法转换成字符串后叠加。</li>
<li>数据流。第一列表示理想的状态，第二列表示近进行左移的效果。第三列表示左移后对数据进行+1操作的效果，其实第三列就是理想效果，即数据和第一列一样。</li>
</ul>
<table>
<thead>
<tr>
<th>i=</th>
<th style="text-align:center">&lt;&lt;</th>
<th style="text-align:right">&lt;&lt; + +1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1111 1110</td>
<td style="text-align:center">1111 1110</td>
<td style="text-align:right">1111 1110</td>
</tr>
<tr>
<td>1111 1101</td>
<td style="text-align:center">1111 1100</td>
<td style="text-align:right">1111 1101</td>
</tr>
<tr>
<td>1111 1011</td>
<td style="text-align:center">1111 1000</td>
<td style="text-align:right">1111 1011</td>
</tr>
<tr>
<td>1111 0111</td>
<td style="text-align:center">1111 0000</td>
<td style="text-align:right">1111 0111</td>
</tr>
<tr>
<td>1110 1111</td>
<td style="text-align:center">1110 0000</td>
<td style="text-align:right">1110 1111</td>
</tr>
<tr>
<td>1101 1111</td>
<td style="text-align:center">1100 0000</td>
<td style="text-align:right">1101 1111</td>
</tr>
<tr>
<td>1011 1111</td>
<td style="text-align:center">1000 0000</td>
<td style="text-align:right">1011 1111</td>
</tr>
<tr>
<td>0111 1111</td>
<td style="text-align:center">0000 0000</td>
<td style="text-align:right">0111 1111</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用腾讯云学生套餐免费搭建WP博客]]></title>
      <url>https://blog.cyang.tech/2016/07/08/%E5%88%A9%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AD%A6%E7%94%9F%E5%A5%97%E9%A4%90%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>本文是一片个人博客建站教程，利用腾讯云学生套餐搭建免费的WP博客。</p>
<h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h2 id="1、申请学生套餐中免费的腾讯云服务器。首先需要通过学信网验证学生身份，之后腾讯每月会赠送一个满65元减64元的代金券，一直赠送到大学毕业。云服务器建议选择安装cent-OS-6-x版本。安装时候需要记住系统镜像的密码，后续通过SSH连接服务器时需要填写这个密码。"><a href="#1、申请学生套餐中免费的腾讯云服务器。首先需要通过学信网验证学生身份，之后腾讯每月会赠送一个满65元减64元的代金券，一直赠送到大学毕业。云服务器建议选择安装cent-OS-6-x版本。安装时候需要记住系统镜像的密码，后续通过SSH连接服务器时需要填写这个密码。" class="headerlink" title="1、申请学生套餐中免费的腾讯云服务器。首先需要通过学信网验证学生身份，之后腾讯每月会赠送一个满65元减64元的代金券，一直赠送到大学毕业。云服务器建议选择安装cent OS 6.x版本。安装时候需要记住系统镜像的密码，后续通过SSH连接服务器时需要填写这个密码。"></a>1、申请<a href="http://www.qcloud.com/event/qcloudSchool" target="_blank" rel="external">学生套餐</a>中免费的腾讯云服务器。首先需要通过学信网验证学生身份，之后腾讯每月会赠送一个满65元减64元的代金券，一直赠送到大学毕业。云服务器建议选择安装cent OS 6.x版本。安装时候需要记住系统镜像的密码，后续通过SSH连接服务器时需要填写这个密码。</h2><p><img src="http://p7tst3obo.bkt.clouddn.com/20160708191226398?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<a id="more"></a>
<h2 id="2、购买域名。这个可以在万网购买，很多后缀都只要6元一年。"><a href="#2、购买域名。这个可以在万网购买，很多后缀都只要6元一年。" class="headerlink" title="2、购买域名。这个可以在万网购买，很多后缀都只要6元一年。"></a>2、购买域名。这个可以在万网购买，很多后缀都只要6元一年。</h2><p><img src="http://p7tst3obo.bkt.clouddn.com/20160708191334898?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><hr>
<p>——-面板安装———–</p>
<h2 id="1、通过SSH连接云服务器"><a href="#1、通过SSH连接云服务器" class="headerlink" title="1、通过SSH连接云服务器"></a><strong>1、通过SSH连接云服务器</strong></h2><p>1.1建议使用X shell这个软件。在主机框内填写云服务器的公网IP地址。这个地址从腾讯云服务器管理后天得到。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708191504284?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br>1.2 填写后点击连接，需要填写服务器的用户名和密码。如果是cent OS ,默认用户名为root，密码是你安装镜像是填写的密码。如果忘记，需要去腾讯云服务器后台重新设置，重新设置后需要重启服务器才能生效。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708192152214?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"><br><strong>补充：</strong> 如果使用的是ubuntu系统，则默认不提供管理员权限。需要通过用户名ubuntu登陆，登陆后通过输入<code>sudo passwd root</code>获取权限，之后输入<code>sudo -s -H</code>提升用户权限至管理员。</p>
<h2 id="2、安装AMH面板。"><a href="#2、安装AMH面板。" class="headerlink" title="2、安装AMH面板。"></a><strong>2、安装AMH面板。</strong></h2><p>2.1 安装面板需要获取管理员权限。具体安装步骤查看<a href="https://amh.sh/install.htm" target="_blank" rel="external">官网</a>。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708192914577?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p> 2.2  amh4.2版本安装过程比较慢，大概需要20分钟。如果是5.2版本就很快，不过需要支付每月6元的费用。这里选择4.2版本就可以。<br> <img src="http://p7tst3obo.bkt.clouddn.com/20160708193102156?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="3、安装面板成功后，就可以登陆面板，之后通过面板安装博客程序。"><a href="#3、安装面板成功后，就可以登陆面板，之后通过面板安装博客程序。" class="headerlink" title="3、安装面板成功后，就可以登陆面板，之后通过面板安装博客程序。"></a><strong>3、安装面板成功后，就可以登陆面板，之后通过面板安装博客程序。</strong></h2><p>面板安装完成后，就可以通过访问 <code>主机ip:8888</code>登陆到amh面板<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708193313235?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<hr>
<p>——-博客程序安装———</p>
<h2 id="4、新建一个虚拟主机"><a href="#4、新建一个虚拟主机" class="headerlink" title="4、新建一个虚拟主机"></a><strong>4、新建一个虚拟主机</strong></h2><p>点击“虚拟主机”选项卡，并按照下图填入你想要绑定的域名（这里以cyang.top 这个域名为例，不要忘了将域名的A记录解析到你VPS的IP上），然后点击保存。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708193501750?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>域名解析直接使用万网提供的解析就好。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708200217435?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="5、安装AMFTP–在线文件管理工具"><a href="#5、安装AMFTP–在线文件管理工具" class="headerlink" title="5、安装AMFTP–在线文件管理工具"></a><strong>5、安装AMFTP–在线文件管理工具</strong></h2><p>点击“扩展模块”选项卡，找到AMFTP-2.0并点击“安装”。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708193915193?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="6-添加FTP账户"><a href="#6-添加FTP账户" class="headerlink" title="6. 添加FTP账户"></a><strong>6. 添加FTP账户</strong></h2><p>点击“FTP”选项卡，如下图输入你想要设置的FTP的账号密码，并将主机根目录选择为我们刚才新建的虚拟主机的根目录。然后点击“保存”即可完成新建。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708194023675?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="7-上传Wordpress程序"><a href="#7-上传Wordpress程序" class="headerlink" title="7. 上传Wordpress程序"></a><strong>7. 上传Wordpress程序</strong></h2><p>点击“FTP”选项卡，在我们刚才新建的FTP账户的最后面点击“管理”并输入上一步中我们设置的FTP的账号密码，登录之后即可进入在线文件管理系统。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708200422215?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>7.1 选择并删除默认自带的 index.html 文件</p>
<p>7.2 点击“上传”按钮将Wordpress程序的zip压缩包上传到根目录中。<br>WordPress程序请从这里下载<a href="https://cn.wordpress.org/wordpress-4.2.2-zh_CN.zip" target="_blank" rel="external">https://cn.wordpress.org/wordpress-4.2.2-zh_CN.zip</a><br><img src="http://p7tst3obo.bkt.clouddn.com/20160708194303557?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>7.3 上传完成之后，点击“刷新”即可看到我们刚刚上传的压缩包，选择它，并且点击“智能解压”。</p>
<p>7.4 点击进入刚刚解压的wordpress目录，点击复选框，全选目录下的所有文件，移动到目录中输入“/”，然后点击确定。这样就把所有文件都移动到根目录中了。<br>全选应该移动的项目应该为19项，这里和截图不一样。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708194455294?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="8-新建Wordpress数据库"><a href="#8-新建Wordpress数据库" class="headerlink" title="8. 新建Wordpress数据库"></a><strong>8. 新建Wordpress数据库</strong></h2><p>点击选项卡“MYSQL”–“快速建库”，在弹出的页面“数据库名称”中输入你想要建立的数据库名字，AMH会自动生成“数据库用户名”以及“数据库用户密码”，点击“创建”，将这三组数据记下来，一会要用到。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708194655319?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/20160708194801112?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<h2 id="9-配置Wordpress"><a href="#9-配置Wordpress" class="headerlink" title="9. 配置Wordpress"></a><strong>9. 配置Wordpress</strong></h2><p>打开你的域名，本例子中为 <a href="http://www.cyang.top" target="_blank" rel="external">http://www.cyang.top</a></p>
<p>点击“现在就开始”，输入刚才的三组数据（数据库名、数据库用户名、数据库密码）然后点击“进行安装”。</p>
<p>9.1 输入站点相关信息，然后点击“确定”就完成安装啦。<br><img src="http://p7tst3obo.bkt.clouddn.com/20160708195146446?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="这里写图片描述"></p>
<p>原文链接 <a href="http://blog.csdn.net/u011303443/article/details/51863282" target="_blank" rel="external">csdn博客</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1、<a href="http://yun.baidu.com/share/home?uk=288436188&amp;third=1&amp;view=share#category/type=0" target="_blank" rel="external">安装面板的视频教程</a></p>
<p>2、<em><a href="http://www.izcv.com/379.html" target="_blank" rel="external">安装博客文件的教程</a></em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[51单片机学习总结（一）]]></title>
      <url>https://blog.cyang.tech/2016/06/16/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="51单片机学习总结（一）"><a href="#51单片机学习总结（一）" class="headerlink" title="51单片机学习总结（一）"></a>51单片机学习总结（一）</h1><p>最近在学习STM32单片机的过程中，经常联想到51单片机，一些知识点总是会拿来对比。发现STM32单片机比起51内核要复杂和强大的多，但同时也对51单片机的很多知识点有了进一步的认识。下面回顾下之前用51单片机做过的项目。包括点阵显示项目，智能台灯项目，蓝牙小车项目，频率计项目。</p>
<a id="more"></a>
<h2 id="频率计项目"><a href="#频率计项目" class="headerlink" title="频率计项目"></a>频率计项目</h2><ul>
<li>1、这个项目主要是需要使用到51内部的两个定时器/计数器。其中一个用做定时，一个用作计数。根据测频原理可知，使用51内核中的定时器定时1秒，然后通过计数器检测脉冲数，从而判断出频率值，之后通过LED显示出来。</li>
<li>2、所以，首先需要对定时器和计数器进行初始化。这个过程包括设置工作方式，设置初值，允许中端。代码如下：</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Timer_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TMOD<span class="token operator">=</span><span class="token number">0x15</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器与计数器均用方式1  计数器用timer0  定时器用timer1</span>
    TH0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//计数器初值为0</span>
    TL0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                
    TH1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//定时1        50ms</span>
    TL1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>
    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    ET1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开定时器1中断</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>3、主函数需要调用定时器计数器初始化函数，打开定时器和计数器，然后让程序一直执行。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//主函数</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">Timer_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD1602_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>4、在定时器达到设定时间，会产生中断，进入中断函数后，需要先关闭定时器和计数器，以免产生干扰。在中断函数中，需要对计数器的值进行判断，并进行LCD的写入操作，结束后需要重新设置定时器初值和计数器初值，之后打开定时器和计数器。由于采用定时器定时间为50ms,所以需要进入中断函数20次才有1秒，因此计数值才等于频率值。在第20次时，获取计数值，写入LCD ，并且对计数值进行清零处理。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//中断程序</span>
<span class="token keyword">void</span> <span class="token function">Timer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">3</span>
<span class="token punctuation">{</span>

    TR0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//关计数器0</span>
    TR1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//关定时器1</span>
    TH1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//定时1        50ms</span>
    TL1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>              

    <span class="token keyword">if</span><span class="token punctuation">(</span>times<span class="token operator">!=</span><span class="token number">19</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        times<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
            times<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            Frequence<span class="token operator">=</span>TH0<span class="token operator">*</span><span class="token number">256</span><span class="token operator">+</span>TL0<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//计算频率值</span>

            <span class="token function">write1602_DDRAM_pos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//开始向LCD1602写频率值</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span>Table<span class="token punctuation">[</span>Frequence<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//万位数</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span>Table<span class="token punctuation">[</span>Frequence<span class="token operator">%</span><span class="token number">10000</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//千位数</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span>Table<span class="token punctuation">[</span>Frequence<span class="token operator">%</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//百位数</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span>Table<span class="token punctuation">[</span>Frequence<span class="token operator">%</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//十位数</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span>Table<span class="token punctuation">[</span>Frequence<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//个位数</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        
            <span class="token function">write1602_byte</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            TH0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//计数器清0</span>
            TL0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//开计数器0</span>
    TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//开定时器1</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[城市距离]]></title>
      <url>https://blog.cyang.tech/2016/06/13/%E5%9F%8E%E5%B8%82%E8%B7%9D%E7%A6%BB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 首先，你会读到若干个城市的名字。每个名字都只是一个英文单词，中间不含空格或其他符号。当读到名字为“###”（三个#号）时，表示城市名字输入结束，###并不是一个城市的名字。如果记读到的城市名字的数量为n。<br>然后，你会读到（N x N）的一个整数矩阵。第一行的每一个数字，表示上述城市名单中第一个城市依次到另一个城市之间的里程。表中同一个城市之间的里程为0。<br>最后，你会读到两个城市的名字。</p>
<a id="more"></a>
<p><strong>输入示例：</strong></p>
<pre><code>Hagzou    Hugzou    Jigxng    ###
0    1108    708
1108    0    994
708    994    0
Hagzou    Jigxng
</code></pre><p><strong>输出示例：</strong></p>
<pre><code>708
</code></pre><p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> mileage<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Mileage</span> <span class="token punctuation">{</span>

     <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> cityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">public</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> mileage<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCity</span><span class="token punctuation">(</span>String e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addmileage</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mileage<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>cityList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>cityList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMileage</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mileage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Mileage cityMileage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mileage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String ac <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            cityMileage<span class="token punctuation">.</span><span class="token function">addCity</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ac <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ac<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

        <span class="token keyword">int</span> size <span class="token operator">=</span> cityMileage<span class="token punctuation">.</span>cityList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mileage <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cityMileage<span class="token punctuation">.</span><span class="token function">addmileage</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        String cityOne <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String cityTwo <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the distance of "</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>cityOne<span class="token operator">+</span><span class="token string">" and "</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>cityTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mileage <span class="token operator">=</span> cityMileage<span class="token punctuation">.</span><span class="token function">getMileage</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>cityOne<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>cityTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mileage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>0、这个题目中的城市数据，是需要前期自己输入的。</li>
<li>1、首先是需要明确接口，需要有三个接口，一个用于添加城市，一个用于添加距离，一个用于返回距离。添加城市，存储于列表中。距离是两个城市之间唯一确定的，所以采用哈希表的方式存储，哈希表的键值为两个城市的名字，中间用“-”连接。采用位置对应的方式来确定输入的距离是表示两城市之间唯一确定的值。第三个返回一个数值的方法，返回哈希表中的键值，采用哈希表的get方法。</li>
<li>2、由于在输入数据是，采用(N x N)的方式，所以其实表格中的数据是一一对应的，也就是说你想知道 A_city和 B_city之间的距离，那么你不论先输入那个城市的名称，后输入那个城市都是可以得到唯一的结果。</li>
<li>3、在输入是，采用<code>in.next()</code>的方式，.next这种方式是采用next()方法是以换行或者空格符为分界线接收下一个String类型变量。所以可已不断地进行输入，在数据全部输入完后再关闭输入就可以向后执行，得到结果了。</li>
<li>4、有意思的是，在输入时，其实是分为三部分的内容的，第一部分就是需要添加目标城市，并以”###”表示输入完成，所以此时需要采用<code>do-while</code>语句来判断这部分是否添加完成了。如果检测到”###”那么就不在继续添加城市，同时”###”不能添加进城市列表。第二部分的数据为城市之间的距离，此时为了输入的简洁明了，采用表格的方式，每当添加完一行数据就回车从下一行开始，程序会检测到回车，所以不影响结果。此时采用两层<code>for循环</code>，循环的判别条件为城市的个数N,若(N x N)表格输入完成后，for循环执行完成，自然就会向下执行。而第三种输入的内容很简单，因为这里表示两城市的名字，已知输入的数量为二，所以定义两个字符串变量就好。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模拟时钟]]></title>
      <url>https://blog.cyang.tech/2016/06/11/%E6%A8%A1%E6%8B%9F%E6%97%B6%E9%92%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 使用java语言创建一个模拟时钟，要求可以从外部输入三个数字表示原始时间，程序返回下一时刻，返回格式为tt:mm:ss</p>
<a id="more"></a>
<p><strong>要求：</strong> 创建三个类，一个为Display,一个为Clock，一个为Main。第一个类用于显示两位数，这个数有一个初值，有一个限制值，有一个加一的方法和一个放回当前值的方法。第二个类用于包含三个第一类对象，用于表示时分秒。这个类可以设置初值，可以设置显示数字之间的逻辑。第三个类就是主函数，用于控制该程序实现的功能。在这里为返回下一秒的时间，而时间上可以让程序不断的执行，即不断输出时间。</p>
<p><strong>Java代码：</strong></p>
<ul>
<li>Display类</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> clock<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

   <span class="token comment" spellcheck="true">//设置最大值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> x<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//返回当前值</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//用于测试该类功能是否正确</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       Display d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           d1<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
           d1<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Clock类</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">package</span> clock<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token punctuation">{</span>

    Display ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Display mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Display tt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Clock</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ss<span class="token punctuation">.</span>value <span class="token operator">=</span> s<span class="token punctuation">;</span>
        mm<span class="token punctuation">.</span>value <span class="token operator">=</span> m<span class="token punctuation">;</span>
        tt<span class="token punctuation">.</span>value <span class="token operator">=</span> t<span class="token punctuation">;</span>
        ss<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mm<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tt<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//模拟表示增加一秒</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ss<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ss<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mm<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tt<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//标准化的方式返回一个时间字符串</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d"</span><span class="token punctuation">,</span>tt<span class="token punctuation">.</span>value<span class="token punctuation">,</span>mm<span class="token punctuation">.</span>value<span class="token punctuation">,</span>ss<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       Clock clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       clock<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
       clock<span class="token punctuation">.</span>mm<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
       clock<span class="token punctuation">.</span>tt<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           clock<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d\n"</span><span class="token punctuation">,</span> clock<span class="token punctuation">.</span>tt<span class="token punctuation">.</span>value<span class="token punctuation">,</span>clock<span class="token punctuation">.</span>mm<span class="token punctuation">.</span>value<span class="token punctuation">,</span>clock<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Mian类</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> clock<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
      Clock clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      clock<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clock<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这个程序用于模拟时钟，采用面向对象的设计方式。首先分析出用于显示可以为一个类，这个类主要用于显示一个两位数，所以创建一个这样的对象就可以显示一个两位数，因此表示完整的时间需要三个这样的类。这个类需要一个初值，需要一个限制值，因为小时不会超过24，分和秒不会超过60.另外这个类还需要一种方法，用于返回当前的值。</li>
<li>2、其次，时间管理为另外一个类，这个类首先就要包含三个Display对象，用于显示时分秒。其次这个类会有一个构造函数用于初始化三个Display对象的初值和限制值。此外，这个类还应该具有表示时间走一秒这样的逻辑，并控制分钟时钟的进位表示。</li>
<li>3、主函数就是让用户输入三个数，之后让程序输出下一时刻时间值。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[类与对象]]></title>
      <url>https://blog.cyang.tech/2016/06/06/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 设计一个表示分数的类Fraction。这个类用两个int类型的变量分别表示分子和分母。</p>
<a id="more"></a>
<p><strong>说明：</strong></p>
<blockquote>
<p>Fraction plus(Fraction r);<br>    将自己的分数和r的分数相加，产生一个新的Fraction的对象。注意小学四年级学过两个分数如何相加的哈。<br>Fraction multiply(Fraction r);<br>    将自己的分数和r的分数相乘，产生一个新的Fraction的对象。<br>void print();<br>    将自己以“分子/分母”的形式输出到标准输出，并带有回车换行。如果分数是1/1，应该输出1。当分子大于分母时，不需要提出整数部分，即31/30是一个正确的输出。</p>
<p>注意，在创建和做完运算后应该化简分数为最简形式。如2/4应该被化简为1/2。</p>
<p>你写的类要和以下的代码放在一起，并请勿修改这个代码：<br>```java<br>import java.util.Scanner;</p>
</blockquote>
<p>public class Main {</p>
<pre><code>public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
    Fraction a = new Fraction(in.nextInt(), in.nextInt());
    Fraction b = new Fraction(in.nextInt(),in.nextInt());
    a.print();
    b.print();
    a.plus(b).print();
    a.multiply(b).plus(new Fraction(5,6)).print();
    a.print();
    b.print();
    in.close();
}
</code></pre><p>}</p>
<pre><code>**输入实例：**
`2 4 1 3`
**输出实例：**
</code></pre><p>1/2<br>1/3<br>5/6<br>1<br>1/2<br>1/3</p>
<pre><code>
**java代码：**
```java
package Function;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        Fraction a = new Fraction(in.nextInt(), in.nextInt());
        Fraction b = new Fraction(in.nextInt(),in.nextInt());
        a.print();
        b.print();
        a.plus(b).print();
        a.multiply(b).plus(new Fraction(5,6)).print();
        a.print();
        b.print();
        in.close();
    }

}

    class Fraction{
       int a;
       int b;
       int c;
       int d;
        Fraction(int a,int b) {
            //toDouble(a, b);
            this.a = a;
            this.b = b;
        }

        Fraction plus(Fraction y){
             c = this.a*y.b+y.a*this.b;
             d = this.b*y.b;
             return new Fraction(c,d);
        }

        Fraction multiply(Fraction y) {
            c = this.a*y.a;
            d = this.b*y.b;
            return new Fraction(c,d);
        }

        void print() {
            if (a==b) {
                System.out.println(1);
            }else {
                int z = this.gcd(a, b);
                if (z==1) {
                    System.out.println(a+&quot;/&quot;+b);
                }else {
                    System.out.println((a/z)+&quot;/&quot;+(b/z));    
                }
            }
        }


        //用于寻找两个数的最大公约数
        int gcd(int a,int b) {
             int x = a;
             a = b;
             b = x%b;
             if(b==0) {
                return a;
             }
             return gcd(a,b);
         }

     }
</code></pre><ul>
<li>1、这题主要是需要新建一个类Fraction，用这个类来输出分数。这个类有一个构造函数用于初始化变量。这个构造函数接受两个整形变量，作为分数的分子和分母。</li>
<li>2、这个类3个函数，分别是和另一个分数相加，和另一个分数想乘，输出该分数。前两个函数都需要接受一个Fraction对象。所以需要注意到this的用法。</li>
<li>3、第三个函数是一个输出函数，主要是将分子分母通过“/”符号链接后输出，同时需要注意到化简。所以，需要在这个类中新建一个函数，用于寻找两个数的最大公约数。寻找最大公约数的方法在之前的文章中写过。这里直接使用该算法，只不过修改为返回一个整形的函数。将该分子分母分别除以这个最大公约数后，就可以输出一个最简的分数。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[7进制与9进制]]></title>
      <url>https://blog.cyang.tech/2016/06/05/7%E8%BF%9B%E5%88%B6%E4%B8%8E9%E8%BF%9B%E5%88%B6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 一个数的7进制表达式为三位数，9进制表达式也为3位数，且这两个三位数互为对称数。找出该数。<br><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> theNumber<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">theNumber</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>z<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">49</span><span class="token operator">+</span>y<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>z<span class="token operator">==</span>z<span class="token operator">*</span><span class="token number">81</span><span class="token operator">+</span>y<span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">49</span><span class="token operator">+</span>y<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<ul>
<li>1、这题主要采用假设的方法，蛇出三个未知数分别表示个十百位。并且由于对称数的关系，个位和百位不可能为0，而7进制中的最大数为6.因此三个未知量的循环区间不一样，分别为个位和百位从1到6，十位从0到6.</li>
<li>2、主要的判别是根据进制转换的知识写出。即<code>x*49+y*7+z==z*81+y*9+x</code> ，找到满足该式的三个未知量，就可以知道概数的7和9进制表达式，最后再根据进制转化写出该数字的十进制表达式。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Speed]]></title>
      <url>https://blog.cyang.tech/2016/06/05/speed/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 一辆车现在的里程表是一个回文数，为95859，两个小时后是一个新的回文数。求这个回文数是多少？车速是多少？</p>
<a id="more"></a>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> speed<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">speed</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">95860</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">96200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mileage = "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"speed = "</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">95859</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断一个数是否是回文数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> b<span class="token operator">*</span>count<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">=</span>count<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
            b <span class="token operator">=</span> a<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
            c <span class="token operator">+=</span> b<span class="token operator">*</span>count<span class="token punctuation">;</span>          
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//    System.out.println(c);</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            a <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>      
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这题主要是需要找到大于95859的回文数，而同时应该考虑到汽车的车速不可能突破200。因此，只需在（95860，95859+2x200）这个区间去寻找回文数就好。</li>
<li>2、代码中有一段程序是专门用来判断一个数是否是回文数的，返回一个布尔值。判断一个数是否是回文数的方法主要还是采用对一个数做除法和取余操作，循环操作后就可以识别出一个多位数的每一位分别是什么。</li>
<li>3、先得出的结果是该数的个位，而个位应该作为新数的头一位，方法是乘以10000，第二个取出的数乘以1000，依次类比。这样才能去和原数字比较是否相等，若相等则证明该数字就是回文数。</li>
<li>4、主函数得到一个true类型的返回值时，即可显示该里程数，该里程数减去原里程数95859再除以2即为速度值。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自守数]]></title>
      <url>https://blog.cyang.tech/2016/06/05/%E8%87%AA%E5%AE%88%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 找出1-1000中的自守数。<br><strong>自守数说明：</strong> 一个数的平方的尾数等于该数时，该数字即为自守数。比如：0，1，5，6，25，76</p>
<a id="more"></a>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> automorphicNumber<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//自守数</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>text<span class="token punctuation">.</span>html<span class="token punctuation">.</span>HTMLDocument<span class="token punctuation">.</span>HTMLReader<span class="token punctuation">.</span>IsindexAction<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">automorphicNumber</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isautomorphicNumber</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" is a automorphicNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>               
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//System.out.println(isautomorphicNumber(376));</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//判断一个数是不是自守数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isautomorphicNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token operator">*</span>i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            count<span class="token operator">=</span>count<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              
            <span class="token punctuation">}</span>   
            a <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
            b <span class="token operator">=</span> a<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
            c <span class="token operator">=</span> c<span class="token operator">+</span>b<span class="token operator">*</span>count<span class="token punctuation">;</span>   
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这题，指定了一个数的范围为1-1000，对每一个进行判断，找出其中的自守数。</li>
<li>2、寻找自守数的方法里首先需要指定该数的平方a.此时，从a的个位数开始判断，对个位数乘以1后与原数进行比较，若相同就返回真，不同则继续取十位数字乘以10与个位数想加后再进行比较，若相同就返回真，不同则继续循环取百位。</li>
<li>3、主函数中，对每一个返回true类型的数进行输出，该数字即为自守数。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[不使用中间变量交换两数]]></title>
      <url>https://blog.cyang.tech/2016/06/01/%E4%B8%8D%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>交换两个数的值是比较基础也比较常用的算法，比如在<strong>冒泡排序法</strong>中，从第一数开始比较，如后一个数比其小则交换两数的值。</p>
<p>一般在交换两数的值是，最简单的方法适用的方法就是<strong>用中间变量暂存一个数</strong>。例如，要交换a,b的值，可使用中间变量c暂存其中的一个数。<br><strong>核心代码如下：</strong></p>
<pre class="line-numbers language-java"><code class="language-java">c<span class="token operator">=</span>b<span class="token punctuation">;</span>
b<span class="token operator">=</span>a<span class="token punctuation">;</span>
a<span class="token operator">=</span>b<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<a id="more"></a>
<p>当然也可以<strong>不使用中间变量的方法</strong>，如以下几种方法。</p>
<p><strong>1、加法：</strong><br><strong>核心代码如下：</strong></p>
<pre><code>a=a+b;
b=a-b;
a=a-b;
</code></pre><p>这种算法先将a和b的值赋给a,之后b等于a-b，这是b的值就变成了原来的a，最后a=a-b，a的值变为原来的b.<br>这种方法适用于整形和浮点型的数，但是用于浮点型时可能在减法后，<strong>数据可能会出现精度损失。</strong></p>
<p><strong>2、乘法：</strong><br><strong>核心代码如下：</strong></p>
<pre><code>a=a*b;
b=a/b;
a=a/b;
</code></pre><p>这个方法的基本思想和上一种加法很像，只是<strong>这个算法在b=0时出错</strong>，因为分子不能等于0。</p>
<p><strong>3、异或法：</strong><br><strong>核心代码如下：</strong></p>
<pre><code>a=a^b;
b=a^b;
a=a^b;
</code></pre><p>关于异或的算法，简单说就是两数相同结果为1，两数不同结果为0。</p>
<ul>
<li>1、任何数与0异或的结果为它本身。</li>
<li>2、两个相同的数异或的结果为0。<br>基于以上两点，上述的代码可以变形为：<pre><code>a=a^b;
b=a^b=a^b^b=a^0=a;
a=a^b=a^b^a=b^0=b;
</code></pre>这样就和容易理解了，第一步<code>a=a^b；</code>的值没有意义，这是一个逻辑运算的值，这只是一个代换，用于后面两个语句进行逻辑运算。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[只含有重复字母的单词检测]]></title>
      <url>https://blog.cyang.tech/2016/05/29/%E5%8F%AA%E5%90%AB%E6%9C%89%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D%E7%9A%84%E5%8D%95%E8%AF%8D%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 只包含重复字母的单词称为dupledrome,比如“llaammaa”,”ssaabb”。编写一个名为isDupledrome的方法，检测一个单词是否只是由重复的字母组成。</p>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> dupledrome<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">dupledrome</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String s <span class="token operator">=</span> <span class="token string">"abcdefgabcdefg"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isDuplerome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDuplerome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flagj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断后面有没有出现重复字符</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//System.err.println("i="+i);</span>
            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            flagj <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">//  System.out.println("j="+j);</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    flagj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    m<span class="token operator">++</span><span class="token punctuation">;</span>
              <span class="token comment" spellcheck="true">//      System.out.println("a   "+flag+"  "+flagj);</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>flagj<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//System.err.println("flagj");</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment" spellcheck="true">//  System.err.println("j="+j);</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        m<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//    System.out.println("b   "+flag);</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、检测一个单词是否只是由重复的字母组成，就是说在这个单词里，每一种出现的字母至少要有两个。所以，可以设置一个检测，从第一个字母开始，分别与单词中的其他字母比较，当找到一个字母与之相同时，就可以停止比较，进行后一个字母的比较。</li>
<li>2、当要比较的这个字母为整个单词的首字母时，其只需和后面的单词做比较就好，同理得尾字母只需同前面字母比较。但是当一个字母在中间时，它需要和其前面部分和后面部分比较。因此需要设置不同的循环条件。同时，当其与后面部分比较发现相同字母时，不必要在于前面部分比较，所以可设置一个标志位flagj来判断还需不需要进行与其前面部分的比较。</li>
<li>3、整个单词中的每一个字母都需要进行一次主动比较，即主动与其他字母比较。比较的结果有两种，一种是找到相同，一种是没找到，分别对应了flag的两个数值。而采用m，这是一个计数器，记录了总共有多少个字母通过主动比较找到了相同字母。如果m等于单词长度，也就意味着这个单词中的每一个字母都至少出现了两次，也就满足题目。而m不等于单词长度，m只可能小于单词长度，表明这个单词中至少有一个字母是只出现一次的。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[回文检测]]></title>
      <url>https://blog.cyang.tech/2016/05/29/%E5%9B%9E%E6%96%87%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 编写一个isPalindrome的方法，检测一个单词是否是回文单词。<br><strong>说明：</strong> abcbc,otto等均为回文单词。</p>
<p><strong>java程序：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Palindrome<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Palindrome</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String s <span class="token operator">=</span> <span class="token string">"2112"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        first(s);</span>
<span class="token comment" spellcheck="true">//        last(s);</span>
<span class="token comment" spellcheck="true">//        middle(s);</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//输出首字母</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//输出末字母</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//输出出首尾字母外的其他字母</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">middle</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断是否是回文单词</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span> <span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这个程序主要使用字符串的几个方法，包括.charAt() ,length() .subString( , )</li>
<li>2、在判断是否为回文时，根据第一个对应倒数第一个，第二个对于倒数第二个的方式进行比较，默认标志位为1，当发现不一样时，标志位变为0，最后检测标志位进行判断。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字母顺序检测]]></title>
      <url>https://blog.cyang.tech/2016/05/29/%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 如果一个单词中的字母都是以字母表的顺序出现，那么这个单词称为“abecedarian”.比如下面这些字母</p>
<blockquote>
<p>abdest acknow acorsy adempt adiplsy</p>
</blockquote>
<a id="more"></a>
<p>编写一个名为isAbecedrian的方法，实现对单词的检测。</p>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> isAbecedarian<span class="token punctuation">;</span>

<span class="token keyword">import</span> recurse<span class="token punctuation">.</span>recurse<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">isAbecedarian</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String s1 <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>
        String s2 <span class="token operator">=</span> <span class="token string">"edfeasac"</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isAbecedarian</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isAbecedarian</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAbecedarian</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">>=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这算是一种排序的方法，即单词从小到大排列，因此检测的方法很简单，只需保证每一个字母都排在其后一个字母的前面。</li>
<li>2、因此，可设置一个标志位，但检测到前一个字母的字母顺序不在后一个字母的前面时，标志位变化。最后对标志位进行检测，以输出结果。</li>
<li>3、需要说明的是，程序是根据一个字母的ASCLL码值来比较的，因此a（97）&lt;z（122）.程序里的代码不考虑前一个字母和后一个字母相等的情况。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[myExp]]></title>
      <url>https://blog.cyang.tech/2016/05/21/myExp/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 计算exp的一种方法是<code>exp(x)=1+x+x^2/2!+x^3/3!+……</code></p>
<p><strong>要求：</strong> 编写一个myExp方法，计算该公式。</p>
<a id="more"></a>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> myExp<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myExp</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please enter a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"myExp: \t "</span><span class="token operator">+</span><span class="token function">myExp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.exp:"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//计算阶乘</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum<span class="token operator">=</span>sum<span class="token operator">*</span>n<span class="token punctuation">;</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//计算x的n次方</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum<span class="token operator">=</span>sum<span class="token operator">*</span>x<span class="token punctuation">;</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>
         <span class="token keyword">return</span> sum<span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//计算exp</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">myExp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> pow <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> fac <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            z <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> pow<span class="token operator">/</span>fac<span class="token punctuation">;</span>
            result <span class="token operator">=</span> result<span class="token operator">+</span>z<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//System.out.println(i+"   "+result);</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>输出示例：</strong></p>
<pre><code>please enter a number
1
myExp:      2.7182815255731922
Math.exp:2.718281828459045
</code></pre><ul>
<li>1、这个程序中有三个函数，分别为计算阶乘，计算pow，计算exp。计算exp需要用到阶乘和pow。需要注意的是，计算阶乘时，数字增长很快。超过数据类型的限制时，计算结果就会不正确，此时数据变为0，所以出现异常。<code>java.lang.ArithmeticException:/by zero</code>.即出现除以0的情况，因此程序抛出异常。</li>
<li>2、同时，由于阶乘以及pow方法的返回值类型都是整数，而如果两者的商小于1时，整个结果就不会有变化，此时需要使用强制类型转换<code>(double)</code>.</li>
<li>3、事实上，由于阶乘数值过大，决定了n值不能取太大，而此时计算误差就会比较大。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[求一个数的平方根算法]]></title>
      <url>https://blog.cyang.tech/2016/05/21/%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 求解数a的平方根的一种方法为：先给求解结果指定一个粗略的猜测结果x,然后使用以下公式对其求解结果。</p>
<blockquote>
<pre><code>          x1=(x0+a/x0)/2
</code></pre></blockquote>
<p>比如，如果要找9的平方根，首先给出猜测值6，即x=6,然后应用公式得x1=3.75,此值更接近正确结果。重复利用这个公式，很快可以得出结果。</p>
<a id="more"></a>
<p><strong>要求：</strong> 编写一个方法，该方法接受一个双精度型的参数并返回该参数的近似平方根。可以使用a/2作为初始的猜测值，迭代终止的条件为|Xn-Xn-1|&lt;0.0001.使用Math.abs来计算绝对值。</p>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> squareRoot<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">squareRoot</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please enter a number of double type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> num <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">squareRoot</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//通过迭代求一个数的平方根</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> z <span class="token operator">=</span> a<span class="token operator">-</span>a<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> x<span class="token operator">=</span>a<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>z<span class="token operator">></span><span class="token number">0.0001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            y <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>a<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            z <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            x<span class="token operator">=</span>y<span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the result:  "</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>结果演示：</strong></p>
<pre><code>please enter a number of double type
190.2
1  48.55
2  26.233805355303808
3  16.741996281572128
4  14.051324333707054
5  13.793707494215955
6  13.791301816263989
7  13.791301606447451
the result:  13.791301606447451
</code></pre><ul>
<li>1、这个程序之前写出来一直提示错误，错误在于内存溢出。原因是迭代错误，终止条件不满足，循环体不正确，所以不断迭代。</li>
<li>2、这个程序就在于说计算Xn时，需要使用Xn-1。这个赋值一定要正确，循环的条件也很简单，使用两值差的绝对值就好。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串综合实验]]></title>
      <url>https://blog.cyang.tech/2016/05/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 编程实现一下功能。<br>1.取出字符串首字母<br>2.取出除首字母外的其他字母<br>3.打印字符串中的每个字母，每行一个<br>4.逆序打印出这个字符串的字母<br>5.打印一个多位数的逆序数</p>
<a id="more"></a>
<p><strong>关键词：</strong></p>
<blockquote>
<p>.length  .charAt  .toString  .substring  构造函数</p>
</blockquote>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> recurse<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">recurse</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String agrs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String text <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">first</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">rest</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printBackward</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printBackNumber</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//取出首字母</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">first</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//取出除首字母以外的其他字母</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">rest</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//每行打印一个字母，打印完整个字符串</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//倒着打印出这句话</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printBackward</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//倒着打印一个数字的新方法，使用包裹类型将数字变为对象，使用对象的toString方法变为字符串，之后调用前面这个方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printBackNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Integer nn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String m <span class="token operator">=</span> nn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、charAt可指定一个数字，输出字符串中该位置处的字符。返回值是一个字符。</li>
<li>2、substring有两个参数，第一个为开始位置，第二个为结束位置。返回结果是一个字符串。</li>
<li>3、.length用于输出字符串的长度</li>
<li>4、toString 方法可以将对象转化为一个字符串，以方便输出。同时，如果改写该方法可以实现格式化字符串。但是，这个方法是针对对象的，整数这种数据类型是不具有该方法的，所以需要使用包裹类型将其转化成一个对象，之后在使用toString方法。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[斐波那契数列]]></title>
      <url>https://blog.cyang.tech/2016/05/18/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 输入一个阶数，输出该阶数对应的斐波那契数列。</p>
<p><strong>斐波那契数列：</strong><br>斐波那契数列(Fibonacci sequence).<br>其值为f(n)=f(n-1)+f(n-2).<br>f(0)=0;<br>f(1)=1;</p>
<a id="more"></a>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> fibonacci<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fibonacci</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"it's error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sum<span class="token operator">=</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、<code>sum=fibonacci(n-1)+fibonacci(n-2);</code>这条语句是核心。这会使这个方法不断的进行迭代处理，知道最后n=0.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[欧几里得算法求最大公因数]]></title>
      <url>https://blog.cyang.tech/2016/05/18/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 使用欧几里得算法求两个数的最大公因式。</p>
<p><strong>欧几里得算法：</strong><br>1.如果r是a除以b的余数，那么a与b的最大公因数和b与r的最大公因数相等，使用公式表示为：<code>gcd(a,b)=gcd(b,r)</code>.<br>2.使用欧几里得算法，可将两个大整数的最大公约数逐渐转化为两个较小整数的最大公约数，例如<code>gcd(36,16)=gcd(16,4)=gcd(4,0)=4.</code> 可见36和20的最大公约数为4.</p>
<a id="more"></a>
<p><strong>java代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> greatestCommonDivisor<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">greatestCommonDivisor</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input two numbers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">;</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
        b <span class="token operator">=</span> x<span class="token operator">%</span>b<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the greatest common divisor is:"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、该算法转化关系很容易，主要是需要考虑迭代。在第二次迭代时，a=b，b=a%b.可是这时候不论先执行那个语句，a和b的值都会被改变，导致结果出错，所以需要借助另一个变量x寄存其中的一个数。</li>
<li>2、迭代终止的条件为第二个数变为0.此时输出a的值即为最大公因式。</li>
<li>3、不用考虑输入的值a大还是b大，因为gcd(16,36)=gcd(36,16).即如果a&lt;b,只需多进行一次迭代就会交换两个数的位置。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UI设计实验一]]></title>
      <url>https://blog.cyang.tech/2016/05/17/UI%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>本实验基于 <strong>郭霖《第一行代码》</strong>第三章内容。</p>
<h2 id="一、实验内容"><a href="#一、实验内容" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><a id="more"></a>
<h3 id="1、常见控件实验"><a href="#1、常见控件实验" class="headerlink" title="1、常见控件实验"></a>1、常见控件实验</h3><blockquote>
<p>控件包括 Button、TextView、EditView、ImageView、ProcessBar、AlertDialog、ProgressDialog</p>
</blockquote>
<p><strong>程序截图：</strong></p>
<blockquote>
<p><img src="http://p7tst3obo.bkt.clouddn.com/ui/3.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/ui/4.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/ui/5.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/ui/6.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://p7tst3obo.bkt.clouddn.com/ui/7.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt=""></p>
</blockquote>
<p><strong>程序说明：</strong></p>
<p>1、从上到下分别有5个控件。TextView显示一句话；Button控件添加一个点击响应事件；EditView控件可以输入文字；ImageView控件可以显示图片。<br>2、Button控件可支持多种功能，当然需要替换内部代码。例如，点击将EditView输入的内容通过Toast显示出来；或者点击切换ImageView控件显示的图片；或者点击对进度条加10%；或者点击弹出AlertDialog或ProgressDialog提示框。<br>3、控件详解</p>
<ul>
<li>TextView控件<pre class="line-numbers language-android"><code class="language-android">  android:gravity="center"     //设置文字居中显示
  android:textSize="30sp"      //设置文字的大小
  android:textColor="#00aa00"  //设置文字的颜色
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>EditView控件<pre class="line-numbers language-android"><code class="language-android">  android:hint="type something here" //设置提示文字
  android:maxLines="2"               //设置最大内容显示行数
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>ImageView控件<pre class="line-numbers language-android"><code class="language-android">  android:src="@mipmap/ic_launcher" //设置图片文件位置
  android:layout_gravity="center"   //设置图片显示位置
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>ProcessBar控件<pre class="line-numbers language-android"><code class="language-android">  style="?android:attr/progressBarStyleHorizontal" //设置控件风格
  android:max="100"                                //设置最大量
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>Button控件<pre class="line-numbers language-android"><code class="language-android">  android:layout_width="wrap_content"   //设置为包裹内容
  android:layout_height="wrap_content"  //设置为由父布局控制
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
4、Button监听事件</li>
<li>Toast显示EditView输入的内容<pre class="line-numbers language-android"><code class="language-android">String inputText = editText.getText().toString(); //获取输入转换为字符串
Toast.makeText(MainActivity.this, inputText, Toast.LENGTH_SHORT).show();//短时间显示内容
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>切换图片<pre class="line-numbers language-android"><code class="language-android">imageView.setImageResource(R.drawable.cyang); //切换显示该位置处的图片
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>切换是否显示进度条<pre class="line-numbers language-android"><code class="language-android">if (progressBar.getVisibility() == View.VISIBLE){
  progressBar.setVisibility(View.GONE);
}else {
  progressBar.setVisibility(View.VISIBLE);}
//通过getVisibility获取控件属性，判断后通过setVisibility设置
//控件的三种熟悉为visibility(可见)，invisibility(透明占地方)，gone(完全消失).
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>对程序进度条加10<pre class="line-numbers language-android"><code class="language-android">int progress = progressBar.getProgress(); //获取属性
  progress = progress + 10;           //点击加10
  progressBar.setProgress(progress);  //设置属性
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>进入一个activity<pre class="line-numbers language-android"><code class="language-android">Intent intent = new intent(FisrtActivity.this,SecondActivity.class);
startActivity(intent);
//第一个参数为启动活动的上下文，第二个参数为指定想要启动的活动
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>启动AlertDialog<pre class="line-numbers language-android"><code class="language-android">AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);
  dialog.setTitle("这是一个对话框");
  dialog.setMessage("something important.");
  dialog.setCancelable(false);
  dialog.setPositiveButton("ok", new DialogInterface.OnClickListener() {
  @Override
  public void onClick(DialogInterface dialog, int which) {}});
  dialog.setNegativeButton("no",new DialogInterface.OnClickListener(){
  @Override
  public void onClick(DialogInterface dialog,int which){}});
  dialog.show();
//前面设置title，message，设置不可返回，之后可设置两种选项的触发事件，这里没有设置
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>启动ProgressDialog<br>```android<br>ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);<br>progressDialog.setTitle(“this is ProgressDialog”);<br>progressDialog.setMessage(“Loading…”);<br>progressDialog.setCancelable(true);<br>progressDialog.show();<br>//设置名称，内容，是否可通过返回键返回当前活动</li>
</ul>
<p>```</p>
<h2 id="二、Errors-amp-solutions"><a href="#二、Errors-amp-solutions" class="headerlink" title="二、Errors&amp;solutions"></a>二、Errors&amp;solutions</h2><p>1、 layout_gravity和gravity的区别</p>
<blockquote>
<p>前者用于指定控件在布局中的对齐方式，后者用于指定文字在控件中的对齐方式。</p>
</blockquote>
<p>2、 可通过使用匿名类的方式来注册监听器，也可以使用实现接口的方式来进行注册。但是，使用前者在实现具体逻辑时程序运行出错，使用第二种时运行正常。</p>
<h2 id="三、关键词"><a href="#三、关键词" class="headerlink" title="三、关键词"></a>三、关键词</h2><blockquote>
<p>Button、TextView、EditView、ImageView、ProcessBar、AlertDialog、ProgressDialog</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发入门]]></title>
      <url>https://blog.cyang.tech/2016/05/13/Android%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=5041667&auto=1&height=66"></iframe>

<p>大概从5月开始就在看Mars的<strong>java4Android的视频</strong>，总共50集，现在看到40集。另外，从周二开始看<strong>《第一行代码》</strong>，目前这本书看到一半。</p>
<a id="more"></a>
<p>这个视频和这本书讲的都挺好的，里面的东西都很好理解，视频里的东西都是很基础的java应用，而且是主要用于android开发的。而《第一行代码》这本书，给了很多的例子，去实现理论的内容，结合起来看很容易理解。并且android的内容都是日常用到的东西，所以很容易知道这行代码是实现什么功能的。</p>
<p>目前的想法是，继续开完视频，之后看完书，并通过筛选，选择书中的部分案例做一遍。这两件事情在这个周末完成，<strong>算是第一个阶段。第二个阶段，</strong> java方面继续学习和应用，实现更多的案例。而至于，安卓，则通过开源项目去学习。</p>
<p>目前学习中，都没有遇到很多特别难以理解的东西，也没有特别难解决的错误。但是也还不能做什么，只能写一些简单的程序，写一些简单的app。但是，一步一步来，每天都付出，每天都有收获。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[左移右移，循环移]]></title>
      <url>https://blog.cyang.tech/2016/05/08/%E5%B7%A6%E7%A7%BB%E5%8F%B3%E7%A7%BB%EF%BC%8C%E5%BE%AA%E7%8E%AF%E7%A7%BB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 同学在做移位器，用VHDL代码写。所以提示我想出了今天的编程题。<br>可以实现左移，右移n位，或者循环左移循环右移。</p>
<blockquote>
<p>例如，<code>输入12345，</code>左移1位的结果为<code>23450</code>；右移一位的结果为<code>01234</code>；循环左移的结果为<code>23451</code>;循环右移的结果为<code>51234</code>.</p>
</blockquote>
<a id="more"></a>
<p>这里是<strong>VHDL</strong>实现移位器的部分代码</p>
<pre class="line-numbers language-vhdl"><code class="language-vhdl"><span class="token keyword">begin</span>
    <span class="token keyword">process</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>sel<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">case</span> sel <span class="token keyword">is</span>
        <span class="token keyword">when</span> shftpass <span class="token operator">=</span><span class="token operator">></span>    y <span class="token operator">&lt;=</span> a<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">--数据直通    </span>
        <span class="token keyword">when</span> shtl     <span class="token operator">=</span><span class="token operator">></span>    y <span class="token operator">&lt;=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">14</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">'0'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--左移</span>
        <span class="token keyword">when</span> shtr     <span class="token operator">=</span><span class="token operator">></span>    y <span class="token operator">&lt;=</span> <span class="token number">'0'</span> <span class="token operator">&amp;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">downto</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--右移</span>
        <span class="token keyword">when</span> rotl     <span class="token operator">=</span><span class="token operator">></span>    y <span class="token operator">&lt;=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">14</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--循环左移</span>
        <span class="token keyword">when</span> rotl     <span class="token operator">=</span><span class="token operator">></span>    y <span class="token operator">&lt;=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">downto</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--循环右移</span>
        <span class="token keyword">when</span> <span class="token keyword">others</span>   <span class="token operator">=</span><span class="token operator">></span>    y <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"000000000000000"</span><span class="token punctuation">;</span>        
    <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是<strong>java的代码:</strong></p>
<p><strong>1.循环左移</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cyclicShift<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cyclicShift</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span>
        <span class="token punctuation">{</span>
        String b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


输出示例；    
请输入需要循环左移的数据，每位数以空格分隔，末尾以空格加“<span class="token punctuation">.</span>”结束
            <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token punctuation">.</span>
            <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.循环右移</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cyclicShift<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">shiftRight</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数位数：并回车确定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输如需要循环右移的数，并回车确定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span>
        <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

输出示例<span class="token operator">:</span>
请输入数位数：并回车确定
<span class="token number">6</span>
请输如需要循环右移的数，并回车确定
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
<span class="token number">6</span>
 <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>3.左/右移n位</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cyclicShift<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cyclicN</span> <span class="token punctuation">{</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数的位数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要左移或右移几位。左移为正，右移为负"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token punctuation">}</span>

   <span class="token comment" spellcheck="true">//1号  若为右移则执行1，2号</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"0  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       m<span class="token operator">++</span><span class="token punctuation">;</span>
       x<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token comment" spellcheck="true">//2号</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>   
       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>z<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       z<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token comment" spellcheck="true">//3号  若为左移则执行2，3号</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"0  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       m<span class="token operator">--</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

输出示例：
请输入数的位数
<span class="token number">5</span>
请输入需要左移或右移几位。左移为正，右移为负
<span class="token number">2</span>
请输入数字
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
<span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">0</span>  <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这个题目是我自己想出来的。首先想实现的结果就是可以循环左移。思路就是一次性输入完需要移动的数据，中间以空格分开，这样就可以使用<code>in.next()</code>读取一个数据。将第一个读到的数据用变量存储起来，而其他的读到什么就输出什么，知道检测到<code>.</code>代表输入完成，之后接着输出第一次读到的数。这样就完成了一次循环左移。</li>
<li>2、第二题循环右移，本可以参照第一题的方法，可是这次麻烦的是读进的数并不马上输出，因为首先要输出的是最后一次的输入。这就需要将先读入的数据存放在一个数组里。而关于数组，由于不知道要输入的数据会有多少个，如果设置一个很大的 容量的数组，若很多空位没被赋值，就会被默认设成0，这样在输出是就会造成麻烦。所以先指定了此次需要输入的数据会有几个。这样的处理，现在想来，或许可以指定一个变量，每次读到一个数据就加1，即该变量存有数据的长度这一数值，输出是更具该值做变化。</li>
<li>3、第三题是很神奇的一题。要做到左移右移n位，首先输入数组的长度n，输入需要移动的位数m，整数表示左移，负数表示右移。之后遍历一遍数组给每一位赋值。然后就根据m的值去判断需要左移还是右移。由于不想写<code>if语句</code>，所以调整了很多次1，2，3号片段的内容，最终才能输出正确的值。</li>
<li>4、现在可以做到的就是，若为右移，即<code>m&lt;0;</code>，此时先输入m个0，之后进入<code>while循环</code>，即2号程序，进行数组0到n-m结束的输出，此时借助辅助的变量x。而若m&gt;0,则1号程序会跳过，执行2号程序，先输出从m到n的值，然后打印出m个0。</li>
<li>5、其实可以设置<code>if语句</code>，将左移右移的循环语句分开执行，可是为了追求一个统一好看的输出，选择增加z,x两个辅助变量，以实现同样的输出语句，左移右移都可以执行。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[寻找完数]]></title>
      <url>https://blog.cyang.tech/2016/05/07/%E5%AF%BB%E6%89%BE%E5%AE%8C%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>完数：</strong> 又称perfect number,若一个数等于出其自身外所有因数（能被其整除的数）的和，则称该数为完数。例如<code>6=1+2+3;28=1+2+4+7+14;</code>从这个定义可知，素数不能是完数。</p>
<a id="more"></a>
<p><strong>题目：</strong> 输入两个数，例如1，10.找出这两个数中间存在的完数。</p>
<p><strong>代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> findPerfectNumber<span class="token punctuation">;</span>

  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">findPerfectNumber</span> <span class="token punctuation">{</span>

      <span class="token comment" spellcheck="true">//判断一个数是否为素数</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrimeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                      <span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">//System.out.print("i="+i+"  ");</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrimeNumber</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                      <span class="token comment" spellcheck="true">//System.out.print("j="+j+"  ");</span>
                      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                      <span class="token punctuation">{</span>
                          a<span class="token operator">=</span>i<span class="token operator">/</span>j<span class="token punctuation">;</span>
                          sum<span class="token operator">=</span>sum<span class="token operator">+</span>a<span class="token punctuation">;</span>
                          <span class="token comment" spellcheck="true">//System.out.print("sum="+sum+"  ");</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the result:"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>    
              <span class="token punctuation">}</span>
              sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
              <span class="token comment" spellcheck="true">//System.out.println();</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>结果输出：</strong></p>
<pre><code>1
100000000
the result:6
the result:28
the result:496
the result:8128
</code></pre><ul>
<li>1、这题依然需要调用函数<code>isPrimeNumber</code>，因为若一个数为素数，则显然不可能是完数。所以只需去寻找区间内的非素数即可。</li>
<li>2、但一个数为非素数，则该数肯定存在因数，找出这所有的因数，相加并与该数比较，即可得到结果。</li>
<li>3、寻找因数的方法为，设置一个从<code>i=2</code>开始的循环，当i能被该数整出时，执行<code>sum=sum+i;</code>循环的终止条件为<code>i&lt;=该数/2；</code>。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[质因数分解]]></title>
      <url>https://blog.cyang.tech/2016/05/06/%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 输入一个数，并将这个数分解为几个素数的乘积。例如：<code>16=2x2x2x2; 20=2x5x2;3=3x1;</code></p>
<a id="more"></a>
<p><strong>代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> primeFactorization<span class="token punctuation">;</span>

  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test3</span> <span class="token punctuation">{</span>

      <span class="token comment" spellcheck="true">//判断一个数是否为素数</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrimeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                      <span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

      <span class="token comment" spellcheck="true">//主函数</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isPrimeNumber</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">do</span>
          <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  c<span class="token operator">=</span>a<span class="token operator">/</span>i<span class="token punctuation">;</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrimeNumber</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
                  <span class="token keyword">else</span>
                  <span class="token punctuation">{</span>   a<span class="token operator">=</span>c<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                      i<span class="token operator">++</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这题使用了<code>do-while循环</code>，因为循环体必须要做一次。调用了<code>isPrimeNumber函数</code>，用这个函数可以判断一个数是否是素数，返回一个boolean类型的值用于判断。</li>
<li>2、一个非素数，需要进行分解，首先可用其对一个从2开始数进行整出判断（<code>a%2==0</code>）；若可以整除，说明此时可以得到一个商，在判断这个商是否为素数；若为素数则说明可以得到结果，即该数已分解为两个素数的乘积；若这个商不是素数，说明还可以进一步分解，此时将商赋值为变量a。</li>
<li>3、第二条中，若2不能对该输入的数整除，则用3除，之后继续下一步，若3还不能，则继续增加，4，5，6，7…，（事实上只需用素数去试）。但是这需要一个小于输入数值的一个素数数组，该方法是首先想到的，但是目前没有成功写出，有语法错误。</li>
<li>4、下面是流程图：<br><img src="http://p7tst3obo.bkt.clouddn.com/primeDecomposition/primeDecomposition.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="enter description here"></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单词长度]]></title>
      <url>https://blog.cyang.tech/2016/05/05/%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>题目：</strong> 输入一个句子，返回这个句子中包含的每个单词的长度。句子中的每个单词以空格为分界，句子以英文句号结束。每个长度中间加空格，末尾的句号不算做最后一个单词的长度中。</p>
<a id="more"></a>
<p><strong>例子：</strong> 输入 <code>it&#39;s a good test.</code> 输出：“4 1 4 4”<br><strong>代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> wordLength<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">wordLength</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                flag <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            flag <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这个题目要求的是一次性输入整个句子，最后在输出结果。所以在读入键盘输入时要使用<code>in.next</code> 。这个语句在读书时仅读一个空格前的内容，而<code>in.nextLine</code>会读入键盘输入的整一行，所以不用。</li>
<li>2、在首次读入句子中的首个单词后，需要判断这个单词里是否句号这个字符，因为如果含有句号则需要进行不同的输出，即需要讲字符串长度减一，即减去句号的长度。使用<code>indexOf(&quot;.&quot;)</code>进行判断该词中是否含有句号，因为该语句返回的一个表示该字符在字符串中的位置，若存在则返回值可能是从0开始的一个数字，而不存在则返回-1，所以使用flag记住该返回值，用于判断。</li>
<li>3、在输出该次后，需要进行循环，此时需要重新读入下一个单词。最后会以句号结尾，也就是说每个输入的句子必须含有句号。也就是说，不含有句号的输出可能会执行n次，所以使用<code>do-while</code>循环，而含有句号的输出（减1）仅会执行一次，而且在最后，所以这段代码不需要放在循环体内，只需放在程序的最后一部分就好。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读数字]]></title>
      <url>https://blog.cyang.tech/2016/05/04/%E8%AF%BB%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>功能：</strong> 输入一个数，这个数载的范围为（-10000，10000）。要求输出输入的这个数的读法。如果遇到负数，要在前面加上“fu”.</p>
<a id="more"></a>
<p><strong>程序：</strong></p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> readNumber<span class="token punctuation">;</span>

  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">readNumber</span> <span class="token punctuation">{</span>

      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> count <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> digit<span class="token punctuation">;</span>
          <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          String b<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token operator">&lt;</span>count <span class="token operator">&amp;&amp;</span> count<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"fu "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  count<span class="token operator">=</span><span class="token operator">-</span>count<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ling"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                  <span class="token keyword">do</span>
                  <span class="token punctuation">{</span>
                      digit<span class="token operator">=</span>count<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
                      sum<span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>digit<span class="token punctuation">;</span>
                      count<span class="token operator">=</span>count<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span> count<span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token comment" spellcheck="true">//System.out.println(sum);</span>
                  <span class="token keyword">do</span>
                  <span class="token punctuation">{</span>
                      a<span class="token operator">=</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
                      sum<span class="token operator">=</span>sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
                  <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"yi"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"er"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"san"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"si"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"wu"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"liu"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"qi"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"ba"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"jiu"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> b<span class="token operator">=</span><span class="token string">"ling"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
                  <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
                  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span> sum<span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span>
          <span class="token punctuation">{</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、这个函数首先是读入一个数字，之后再进行每位数分别为几的一个判断，之后再进行选择读法，然后输出。</li>
<li>2、在判断每位数为几的时候，使用的算法为<code>x=y%10;y=y/10;</code>这段代码可以读出每一位为几，使用<code>y=0;</code>作为判断是否结束判断数字的标志。</li>
<li>3、在上述判断数字的两条代码中，首先输出的是个位，其次是百位，就是说这个顺序的是从右到左的。而我们读数的顺序是从左到右，所以我们需要将数字逆序输出。使用<code>digit=count%10;sum=sum*10+digit;count=count/10;</code>可将先得出的个位作为逆序这个数的第一部分，之后每循环一次得到的一位数，要先将上一部分乘以10在加上该数。等到循环结束，则每一部分相加所得到的值即为我们所需要的数。</li>
<li>4、既然我们得到了输入的数的逆序，此时我们将这个逆序进行每位数的判断，得到的结果为逆序的逆序，即为正序，此时即可进行选择和输出。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[素数2.0]]></title>
      <url>https://blog.cyang.tech/2016/05/01/%E7%B4%A0%E6%95%B02.0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>前几天写了一个查找素数的程序，现在写一个计算指定素数的和。例如2为第一个素数，3为第二个素数，现在需要求第n到m个素数的和。</p>
<a id="more"></a>
<p><strong>代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> sum_PrimeNumber<span class="token punctuation">;</span>

  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">sum_PrimeNumber</span> <span class="token punctuation">{</span>

      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>   
              <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                      flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                      <span class="token keyword">break</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
              i<span class="token operator">++</span><span class="token punctuation">;</span>
                  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>n<span class="token punctuation">)</span>
                  <span class="token punctuation">{</span>
                      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>
                      <span class="token punctuation">{</span>
                          sum<span class="token operator">+=</span>x<span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>                
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token comment" spellcheck="true">//System.out.println(n+" "+m);</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、核心的素数算法是一样的，可以默认一个数是素数，即给flag立初值为1。之后用2到该数本身取余，一旦出现余为0，即该数不是素数，则flag置为0，跳出循环，检查下一个数。若flag一直为1，则说明一直没出现可以与该数整除的数，该数就为素数。</li>
<li>2、这段代码需要实现指定序号的一些素数的和，所以下一步就需要为每一个素数确定一个序号。这个序号订位i，初值为0。当找到一个素数时，这个i+1，但i满足所给的范围时，将素数相加。</li>
<li>3、下图为流程图：<br><img src="http://p7tst3obo.bkt.clouddn.com/sumOfPrimeNumber/sumOfPrimeNumber.png?imageView2/0/interlace/1/q/100|watermark/2/text/Y3lhbmcudGVjaA==/font/Y29uc29sYXM=/fontsize/720/fill/I0Q0RUVGMQ==/dissolve/69/gravity/SouthEast/dx/10/dy/10" alt="enter description here"></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BJT转UTC]]></title>
      <url>https://blog.cyang.tech/2016/04/30/BJT%E8%BD%ACUTC/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>UTC是世界协调时，BJT是北京时间，UTC时间相当于BJT减去8。</strong> 现在，你的程序要读入一个整数，表示BJT的时和分。整数的个位和十位表示分，百位和千位表示小时。</p>
<blockquote>
<p>如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10分，需要保留十位上的0。如1124表示11点24分，而905表示9点5分，36表示0点36分，7表示0点7分。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>有效的输入范围是0到2359，即你的程序不可能从测试服务器读到0到2359以外的输入数据。</p>
</blockquote>
<p>你的程序要输出这个时间对应的UTC时间，输出的格式和输入的相同，即输出一个整数，表示UTC的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10分，需要保留十位上的0。</p>
<p><strong>提醒：要小心跨日的换算。</strong></p>
<p><strong>代码：</strong></p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> uTC2BJT<span class="token punctuation">;</span>

  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
          Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> s <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          a <span class="token operator">=</span> s<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>
          b <span class="token operator">=</span> s<span class="token operator">-</span>a<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">|</span>a<span class="token operator">></span><span class="token number">24</span><span class="token operator">|</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">|</span>b<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">800</span><span class="token operator">+</span><span class="token number">2400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">8</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">8</span><span class="token operator">&amp;</span>b<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>
          <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1、首先需要明确输入的数据，这个数据可能是一位数，两位数，三位数，四位数。而且，输入的数据是代表时间的，所以有限制前两位为00 ~ 24，后两位为00 ~ 59.所以当输入不符合实际时，即为输入错误，此时没有结果，应返回输入错误。</li>
<li>2、基本的算法就是北京时间的变量在时钟减去8即为UTC。而当北京时钟小于8时，往后退8小时，此时为昨天，而单纯的减去会出现负值，所以此时采用if语句分情况讨论。</li>
<li>3、另外，由于单纯用数字表示时间，且数字可为1 ~ 4位数，所以为了避免标示不清，需要对特殊情况的输出加以表示，例如，但0时7分时，输出为07，表示00：07。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[This Is My First Blog]]></title>
      <url>https://blog.cyang.tech/2016/04/21/This%20is%20my%20first%20blog/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>﻿# This is my first blog</p>
<p><strong>测试</strong><br><strong><em>hello，world!</em></strong></p>
<blockquote>
<p>welcome</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://blog.cyang.tech/2016/04/21/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
